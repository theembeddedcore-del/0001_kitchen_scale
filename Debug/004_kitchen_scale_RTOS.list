
004_kitchen_scale_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800ad28  0800ad28  0000bd28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2d0  0800b2d0  0000d1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2d0  0800b2d0  0000c2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2d8  0800b2d8  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2d8  0800b2d8  0000c2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2dc  0800b2dc  0000c2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800b2e0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1f8  2**0
                  CONTENTS
 10 .bss          00004bd4  200001f8  200001f8  0000d1f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004dcc  20004dcc  0000d1f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a00  00000000  00000000  0000d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037a1  00000000  00000000  00024c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  000283d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001005  00000000  00000000  00029878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c0a  00000000  00000000  0002a87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b1d  00000000  00000000  0004e487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5288  00000000  00000000  00066fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c22c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b44  00000000  00000000  0013c270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00142db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad0c 	.word	0x0800ad0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800ad0c 	.word	0x0800ad0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <NEXTION_SendString>:

uint8_t RxData = 0;
int32_t num = 1;
float value = 1.1;

void NEXTION_SendString(char *ID, char *string) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b090      	sub	sp, #64	@ 0x40
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	char buffer[50];
	int len = sprintf(buffer, "%s.txt=\"%s\"", ID, string);
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	490b      	ldr	r1, [pc, #44]	@ (8000ed8 <NEXTION_SendString+0x40>)
 8000eac:	f006 ff54 	bl	8007d58 <siprintf>
 8000eb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, 1000);
 8000eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	f107 0108 	add.w	r1, r7, #8
 8000eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ebe:	4807      	ldr	r0, [pc, #28]	@ (8000edc <NEXTION_SendString+0x44>)
 8000ec0:	f002 f999 	bl	80031f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, Cmd_End, 3, 100);
 8000ec4:	2364      	movs	r3, #100	@ 0x64
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	4905      	ldr	r1, [pc, #20]	@ (8000ee0 <NEXTION_SendString+0x48>)
 8000eca:	4804      	ldr	r0, [pc, #16]	@ (8000edc <NEXTION_SendString+0x44>)
 8000ecc:	f002 f993 	bl	80031f6 <HAL_UART_Transmit>
}
 8000ed0:	bf00      	nop
 8000ed2:	3740      	adds	r7, #64	@ 0x40
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	0800ad28 	.word	0x0800ad28
 8000edc:	200002d0 	.word	0x200002d0
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <NEXTION_SendFloat>:
	HAL_UART_Transmit(&huart2, Cmd_End, 3, 100);
}


void NEXTION_SendFloat (char *obj, float num, int dp)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ef4:	6079      	str	r1, [r7, #4]
	// convert to the integer
	int32_t number = num*(pow(10,dp));
 8000ef6:	68b8      	ldr	r0, [r7, #8]
 8000ef8:	f7ff fb26 	bl	8000548 <__aeabi_f2d>
 8000efc:	4604      	mov	r4, r0
 8000efe:	460d      	mov	r5, r1
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fb0f 	bl	8000524 <__aeabi_i2d>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	ec43 2b11 	vmov	d1, r2, r3
 8000f0e:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8000fa0 <NEXTION_SendFloat+0xb8>
 8000f12:	f008 ff9b 	bl	8009e4c <pow>
 8000f16:	ec53 2b10 	vmov	r2, r3, d0
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	f7ff fb6b 	bl	80005f8 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f7ff fe15 	bl	8000b58 <__aeabi_d2iz>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	61fb      	str	r3, [r7, #28]

	uint8_t *buffer = malloc(30*sizeof (char));
 8000f32:	201e      	movs	r0, #30
 8000f34:	f006 f8c8 	bl	80070c8 <malloc>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	61bb      	str	r3, [r7, #24]
	int len = sprintf ((char *)buffer, "%s.vvs1=%d", obj, dp);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	4919      	ldr	r1, [pc, #100]	@ (8000fa8 <NEXTION_SendFloat+0xc0>)
 8000f42:	69b8      	ldr	r0, [r7, #24]
 8000f44:	f006 ff08 	bl	8007d58 <siprintf>
 8000f48:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	4815      	ldr	r0, [pc, #84]	@ (8000fac <NEXTION_SendFloat+0xc4>)
 8000f56:	f002 f94e 	bl	80031f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, Cmd_End, 3, 100);
 8000f5a:	2364      	movs	r3, #100	@ 0x64
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4914      	ldr	r1, [pc, #80]	@ (8000fb0 <NEXTION_SendFloat+0xc8>)
 8000f60:	4812      	ldr	r0, [pc, #72]	@ (8000fac <NEXTION_SendFloat+0xc4>)
 8000f62:	f002 f948 	bl	80031f6 <HAL_UART_Transmit>


	len = sprintf ((char *)buffer, "%s.val=%ld", obj, number);
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4912      	ldr	r1, [pc, #72]	@ (8000fb4 <NEXTION_SendFloat+0xcc>)
 8000f6c:	69b8      	ldr	r0, [r7, #24]
 8000f6e:	f006 fef3 	bl	8007d58 <siprintf>
 8000f72:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart2, buffer, len, 1000);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7c:	69b9      	ldr	r1, [r7, #24]
 8000f7e:	480b      	ldr	r0, [pc, #44]	@ (8000fac <NEXTION_SendFloat+0xc4>)
 8000f80:	f002 f939 	bl	80031f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, Cmd_End, 3, 100);
 8000f84:	2364      	movs	r3, #100	@ 0x64
 8000f86:	2203      	movs	r2, #3
 8000f88:	4909      	ldr	r1, [pc, #36]	@ (8000fb0 <NEXTION_SendFloat+0xc8>)
 8000f8a:	4808      	ldr	r0, [pc, #32]	@ (8000fac <NEXTION_SendFloat+0xc4>)
 8000f8c:	f002 f933 	bl	80031f6 <HAL_UART_Transmit>
	free(buffer);
 8000f90:	69b8      	ldr	r0, [r7, #24]
 8000f92:	f006 f8a1 	bl	80070d8 <free>
}
 8000f96:	bf00      	nop
 8000f98:	3720      	adds	r7, #32
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40240000 	.word	0x40240000
 8000fa8:	0800ad40 	.word	0x0800ad40
 8000fac:	200002d0 	.word	0x200002d0
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	0800ad4c 	.word	0x0800ad4c

08000fb8 <HX711_Init>:
static GPIO_TypeDef* HX711_DT_Port;
static uint16_t HX711_DT_Pin;
static GPIO_TypeDef* HX711_SCK_Port;
static uint16_t HX711_SCK_Pin;

void HX711_Init(GPIO_TypeDef* dt_port, uint16_t dt_pin, GPIO_TypeDef* sck_port, uint16_t sck_pin) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	817b      	strh	r3, [r7, #10]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	813b      	strh	r3, [r7, #8]
    HX711_DT_Port = dt_port;
 8000fcc:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <HX711_Init+0x38>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6013      	str	r3, [r2, #0]
    HX711_DT_Pin = dt_pin;
 8000fd2:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <HX711_Init+0x3c>)
 8000fd4:	897b      	ldrh	r3, [r7, #10]
 8000fd6:	8013      	strh	r3, [r2, #0]
    HX711_SCK_Port = sck_port;
 8000fd8:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <HX711_Init+0x40>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
    HX711_SCK_Pin = sck_pin;
 8000fde:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <HX711_Init+0x44>)
 8000fe0:	893b      	ldrh	r3, [r7, #8]
 8000fe2:	8013      	strh	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000214 	.word	0x20000214
 8000ff4:	20000218 	.word	0x20000218
 8000ff8:	2000021c 	.word	0x2000021c
 8000ffc:	20000220 	.word	0x20000220

08001000 <HX711_Read>:

int32_t HX711_Read(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
    int32_t count = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
    uint8_t i;

    while(HAL_GPIO_ReadPin(HX711_DT_Port, HX711_DT_Pin));  // warten bis Daten bereit
 800100a:	bf00      	nop
 800100c:	4b29      	ldr	r3, [pc, #164]	@ (80010b4 <HX711_Read+0xb4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a29      	ldr	r2, [pc, #164]	@ (80010b8 <HX711_Read+0xb8>)
 8001012:	8812      	ldrh	r2, [r2, #0]
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fa06 	bl	8002428 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f4      	bne.n	800100c <HX711_Read+0xc>

    for(i = 0; i < 24; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	70fb      	strb	r3, [r7, #3]
 8001026:	e023      	b.n	8001070 <HX711_Read+0x70>
        HAL_GPIO_WritePin(HX711_SCK_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8001028:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <HX711_Read+0xbc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a24      	ldr	r2, [pc, #144]	@ (80010c0 <HX711_Read+0xc0>)
 800102e:	8811      	ldrh	r1, [r2, #0]
 8001030:	2201      	movs	r2, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f001 fa10 	bl	8002458 <HAL_GPIO_WritePin>
        count = count << 1;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	607b      	str	r3, [r7, #4]
        HAL_GPIO_WritePin(HX711_SCK_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <HX711_Read+0xbc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a1f      	ldr	r2, [pc, #124]	@ (80010c0 <HX711_Read+0xc0>)
 8001044:	8811      	ldrh	r1, [r2, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fa05 	bl	8002458 <HAL_GPIO_WritePin>
        if(HAL_GPIO_ReadPin(HX711_DT_Port, HX711_DT_Pin))
 800104e:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <HX711_Read+0xb4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <HX711_Read+0xb8>)
 8001054:	8812      	ldrh	r2, [r2, #0]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f001 f9e5 	bl	8002428 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <HX711_Read+0x6a>
            count++;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3301      	adds	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
    for(i = 0; i < 24; i++) {
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	3301      	adds	r3, #1
 800106e:	70fb      	strb	r3, [r7, #3]
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b17      	cmp	r3, #23
 8001074:	d9d8      	bls.n	8001028 <HX711_Read+0x28>
    }

    HAL_GPIO_WritePin(HX711_SCK_Port, HX711_SCK_Pin, GPIO_PIN_SET); // 25. Takt (Gain 128)
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <HX711_Read+0xbc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a11      	ldr	r2, [pc, #68]	@ (80010c0 <HX711_Read+0xc0>)
 800107c:	8811      	ldrh	r1, [r2, #0]
 800107e:	2201      	movs	r2, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f001 f9e9 	bl	8002458 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(HX711_SCK_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <HX711_Read+0xbc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <HX711_Read+0xc0>)
 800108c:	8811      	ldrh	r1, [r2, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f001 f9e1 	bl	8002458 <HAL_GPIO_WritePin>

    if(count & 0x800000) count |= 0xFF000000; // Vorzeichen erweitern
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HX711_Read+0xa8>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80010a6:	607b      	str	r3, [r7, #4]

    return count;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000214 	.word	0x20000214
 80010b8:	20000218 	.word	0x20000218
 80010bc:	2000021c 	.word	0x2000021c
 80010c0:	20000220 	.word	0x20000220

080010c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d013      	beq.n	8001104 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80010e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00b      	beq.n	8001104 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010ec:	e000      	b.n	80010f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f9      	beq.n	80010ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	printf("HX711 Kalibrierung\n");
 8001118:	4816      	ldr	r0, [pc, #88]	@ (8001174 <main+0x60>)
 800111a:	f006 fe15 	bl	8007d48 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f000 fdad 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001122:	f000 f839 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001126:	f000 f92f 	bl	8001388 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800112a:	f000 f903 	bl	8001334 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800112e:	f000 f8cb 	bl	80012c8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001132:	f000 f89b 	bl	800126c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001136:	f003 f859 	bl	80041ec <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of WeightDataQueue */
  WeightDataQueueHandle = osMessageQueueNew (16, sizeof(float), &WeightDataQueue_attributes);
 800113a:	4a0f      	ldr	r2, [pc, #60]	@ (8001178 <main+0x64>)
 800113c:	2104      	movs	r1, #4
 800113e:	2010      	movs	r0, #16
 8001140:	f003 f94b 	bl	80043da <osMessageQueueNew>
 8001144:	4603      	mov	r3, r0
 8001146:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <main+0x68>)
 8001148:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of WeightReadTask */
  WeightReadTaskHandle = osThreadNew(WeightReadTask01, NULL, &WeightReadTask_attributes);
 800114a:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <main+0x6c>)
 800114c:	2100      	movs	r1, #0
 800114e:	480d      	ldr	r0, [pc, #52]	@ (8001184 <main+0x70>)
 8001150:	f003 f896 	bl	8004280 <osThreadNew>
 8001154:	4603      	mov	r3, r0
 8001156:	4a0c      	ldr	r2, [pc, #48]	@ (8001188 <main+0x74>)
 8001158:	6013      	str	r3, [r2, #0]

  /* creation of SendWeightDispl */
  SendWeightDisplHandle = osThreadNew(SendWeightDisplay01, NULL, &SendWeightDispl_attributes);
 800115a:	4a0c      	ldr	r2, [pc, #48]	@ (800118c <main+0x78>)
 800115c:	2100      	movs	r1, #0
 800115e:	480c      	ldr	r0, [pc, #48]	@ (8001190 <main+0x7c>)
 8001160:	f003 f88e 	bl	8004280 <osThreadNew>
 8001164:	4603      	mov	r3, r0
 8001166:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <main+0x80>)
 8001168:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800116a:	f003 f863 	bl	8004234 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116e:	bf00      	nop
 8001170:	e7fd      	b.n	800116e <main+0x5a>
 8001172:	bf00      	nop
 8001174:	0800ad88 	.word	0x0800ad88
 8001178:	0800af00 	.word	0x0800af00
 800117c:	20000320 	.word	0x20000320
 8001180:	0800aeb8 	.word	0x0800aeb8
 8001184:	0800165d 	.word	0x0800165d
 8001188:	20000318 	.word	0x20000318
 800118c:	0800aedc 	.word	0x0800aedc
 8001190:	080017bd 	.word	0x080017bd
 8001194:	2000031c 	.word	0x2000031c

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	@ 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2230      	movs	r2, #48	@ 0x30
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f006 fece 	bl	8007f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <SystemClock_Config+0xcc>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	4a27      	ldr	r2, [pc, #156]	@ (8001264 <SystemClock_Config+0xcc>)
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80011cc:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <SystemClock_Config+0xcc>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <SystemClock_Config+0xd0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <SystemClock_Config+0xd0>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <SystemClock_Config+0xd0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001202:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001208:	2304      	movs	r3, #4
 800120a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800120c:	23a8      	movs	r3, #168	@ 0xa8
 800120e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001214:	2307      	movs	r3, #7
 8001216:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0320 	add.w	r3, r7, #32
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fa79 	bl	8002714 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001228:	f000 fafe 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001230:	2302      	movs	r3, #2
 8001232:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001238:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800123e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001242:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2105      	movs	r1, #5
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fcda 	bl	8002c04 <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001256:	f000 fae7 	bl	8001828 <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3750      	adds	r7, #80	@ 0x50
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000

0800126c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <MX_I2C1_Init+0x50>)
 8001272:	4a13      	ldr	r2, [pc, #76]	@ (80012c0 <MX_I2C1_Init+0x54>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_I2C1_Init+0x50>)
 8001278:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <MX_I2C1_Init+0x58>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_I2C1_Init+0x50>)
 800128a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800128e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <MX_I2C1_Init+0x50>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_I2C1_Init+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_I2C1_Init+0x50>)
 80012aa:	f001 f8ef 	bl	800248c <HAL_I2C_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b4:	f000 fab8 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000224 	.word	0x20000224
 80012c0:	40005400 	.word	0x40005400
 80012c4:	000186a0 	.word	0x000186a0

080012c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <MX_SPI1_Init+0x64>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	@ (8001330 <MX_SPI1_Init+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4b16      	ldr	r3, [pc, #88]	@ (800132c <MX_SPI1_Init+0x64>)
 80012d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012da:	4b14      	ldr	r3, [pc, #80]	@ (800132c <MX_SPI1_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e0:	4b12      	ldr	r3, [pc, #72]	@ (800132c <MX_SPI1_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <MX_SPI1_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <MX_SPI1_Init+0x64>)
 80012f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <MX_SPI1_Init+0x64>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001300:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <MX_SPI1_Init+0x64>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <MX_SPI1_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130c:	4b07      	ldr	r3, [pc, #28]	@ (800132c <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <MX_SPI1_Init+0x64>)
 8001314:	220a      	movs	r2, #10
 8001316:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	@ (800132c <MX_SPI1_Init+0x64>)
 800131a:	f001 fe93 	bl	8003044 <HAL_SPI_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001324:	f000 fa80 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000278 	.word	0x20000278
 8001330:	40013000 	.word	0x40013000

08001334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <MX_USART2_UART_Init+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 8001340:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_USART2_UART_Init+0x4c>)
 800136c:	f001 fef3 	bl	8003156 <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001376:	f000 fa57 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002d0 	.word	0x200002d0
 8001384:	40004400 	.word	0x40004400

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	4b9a      	ldr	r3, [pc, #616]	@ (800160c <MX_GPIO_Init+0x284>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a99      	ldr	r2, [pc, #612]	@ (800160c <MX_GPIO_Init+0x284>)
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b97      	ldr	r3, [pc, #604]	@ (800160c <MX_GPIO_Init+0x284>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	4b93      	ldr	r3, [pc, #588]	@ (800160c <MX_GPIO_Init+0x284>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a92      	ldr	r2, [pc, #584]	@ (800160c <MX_GPIO_Init+0x284>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b90      	ldr	r3, [pc, #576]	@ (800160c <MX_GPIO_Init+0x284>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b8c      	ldr	r3, [pc, #560]	@ (800160c <MX_GPIO_Init+0x284>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a8b      	ldr	r2, [pc, #556]	@ (800160c <MX_GPIO_Init+0x284>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b89      	ldr	r3, [pc, #548]	@ (800160c <MX_GPIO_Init+0x284>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b85      	ldr	r3, [pc, #532]	@ (800160c <MX_GPIO_Init+0x284>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a84      	ldr	r2, [pc, #528]	@ (800160c <MX_GPIO_Init+0x284>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b82      	ldr	r3, [pc, #520]	@ (800160c <MX_GPIO_Init+0x284>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b7e      	ldr	r3, [pc, #504]	@ (800160c <MX_GPIO_Init+0x284>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a7d      	ldr	r2, [pc, #500]	@ (800160c <MX_GPIO_Init+0x284>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b7b      	ldr	r3, [pc, #492]	@ (800160c <MX_GPIO_Init+0x284>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b77      	ldr	r3, [pc, #476]	@ (800160c <MX_GPIO_Init+0x284>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a76      	ldr	r2, [pc, #472]	@ (800160c <MX_GPIO_Init+0x284>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b74      	ldr	r3, [pc, #464]	@ (800160c <MX_GPIO_Init+0x284>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2108      	movs	r1, #8
 800144a:	4871      	ldr	r0, [pc, #452]	@ (8001610 <MX_GPIO_Init+0x288>)
 800144c:	f001 f804 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2101      	movs	r1, #1
 8001454:	486f      	ldr	r0, [pc, #444]	@ (8001614 <MX_GPIO_Init+0x28c>)
 8001456:	f000 ffff 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2101      	movs	r1, #1
 800145e:	486e      	ldr	r0, [pc, #440]	@ (8001618 <MX_GPIO_Init+0x290>)
 8001460:	f000 fffa 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001464:	2200      	movs	r2, #0
 8001466:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800146a:	486c      	ldr	r0, [pc, #432]	@ (800161c <MX_GPIO_Init+0x294>)
 800146c:	f000 fff4 	bl	8002458 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001470:	2308      	movs	r3, #8
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4862      	ldr	r0, [pc, #392]	@ (8001610 <MX_GPIO_Init+0x288>)
 8001488:	f000 fe32 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	485c      	ldr	r0, [pc, #368]	@ (8001614 <MX_GPIO_Init+0x28c>)
 80014a4:	f000 fe24 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014a8:	2308      	movs	r3, #8
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b8:	2305      	movs	r3, #5
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4854      	ldr	r0, [pc, #336]	@ (8001614 <MX_GPIO_Init+0x28c>)
 80014c4:	f000 fe14 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	484e      	ldr	r0, [pc, #312]	@ (8001618 <MX_GPIO_Init+0x290>)
 80014e0:	f000 fe06 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4848      	ldr	r0, [pc, #288]	@ (8001618 <MX_GPIO_Init+0x290>)
 80014f8:	f000 fdfa 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014fc:	2310      	movs	r3, #16
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800150c:	2306      	movs	r3, #6
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4840      	ldr	r0, [pc, #256]	@ (8001618 <MX_GPIO_Init+0x290>)
 8001518:	f000 fdea 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800151c:	2304      	movs	r3, #4
 800151e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	483c      	ldr	r0, [pc, #240]	@ (8001620 <MX_GPIO_Init+0x298>)
 8001530:	f000 fdde 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001546:	2305      	movs	r3, #5
 8001548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4833      	ldr	r0, [pc, #204]	@ (8001620 <MX_GPIO_Init+0x298>)
 8001552:	f000 fdcd 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001556:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800155a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	482b      	ldr	r0, [pc, #172]	@ (800161c <MX_GPIO_Init+0x294>)
 8001570:	f000 fdbe 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001574:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001586:	2306      	movs	r3, #6
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4820      	ldr	r0, [pc, #128]	@ (8001614 <MX_GPIO_Init+0x28c>)
 8001592:	f000 fdad 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001596:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	481b      	ldr	r0, [pc, #108]	@ (8001618 <MX_GPIO_Init+0x290>)
 80015ac:	f000 fda0 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80015b0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015c2:	230a      	movs	r3, #10
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4812      	ldr	r0, [pc, #72]	@ (8001618 <MX_GPIO_Init+0x290>)
 80015ce:	f000 fd8f 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015d2:	2320      	movs	r3, #32
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	480d      	ldr	r0, [pc, #52]	@ (800161c <MX_GPIO_Init+0x294>)
 80015e6:	f000 fd83 	bl	80020f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015ee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	4804      	ldr	r0, [pc, #16]	@ (8001610 <MX_GPIO_Init+0x288>)
 8001600:	f000 fd76 	bl	80020f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001604:	bf00      	nop
 8001606:	3730      	adds	r7, #48	@ 0x30
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	40021000 	.word	0x40021000
 8001614:	40020800 	.word	0x40020800
 8001618:	40020000 	.word	0x40020000
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40020400 	.word	0x40020400

08001624 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e009      	b.n	800164a <_write+0x26>
	 {
		 ITM_SendChar(*ptr++);
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	60ba      	str	r2, [r7, #8]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd40 	bl	80010c4 <ITM_SendChar>
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	dbf1      	blt.n	8001636 <_write+0x12>
	 }
	 return len;
 8001652:	687b      	ldr	r3, [r7, #4]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <WeightReadTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_WeightReadTask01 */
void WeightReadTask01(void *argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	 printf("HX711 Kalibrierung\n");
 8001664:	4842      	ldr	r0, [pc, #264]	@ (8001770 <WeightReadTask01+0x114>)
 8001666:	f006 fb6f 	bl	8007d48 <puts>
	  NEXTION_SendString("t1", "HX711 Kalibrierung\n");
 800166a:	4942      	ldr	r1, [pc, #264]	@ (8001774 <WeightReadTask01+0x118>)
 800166c:	4842      	ldr	r0, [pc, #264]	@ (8001778 <WeightReadTask01+0x11c>)
 800166e:	f7ff fc13 	bl	8000e98 <NEXTION_SendString>

	  // HX711 an PA1 (DT), PA0 (SCK)
	  HX711_Init(GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_0);
 8001672:	2301      	movs	r3, #1
 8001674:	4a41      	ldr	r2, [pc, #260]	@ (800177c <WeightReadTask01+0x120>)
 8001676:	2102      	movs	r1, #2
 8001678:	4840      	ldr	r0, [pc, #256]	@ (800177c <WeightReadTask01+0x120>)
 800167a:	f7ff fc9d 	bl	8000fb8 <HX711_Init>

	  HAL_Delay(1000);
 800167e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001682:	f000 fb6d 	bl	8001d60 <HAL_Delay>

	  // Tare
	  offset = HX711_Read();
 8001686:	f7ff fcbb 	bl	8001000 <HX711_Read>
 800168a:	4603      	mov	r3, r0
 800168c:	4a3c      	ldr	r2, [pc, #240]	@ (8001780 <WeightReadTask01+0x124>)
 800168e:	6013      	str	r3, [r2, #0]
	  printf("Offset (leer): %ld\r\n", offset);
 8001690:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <WeightReadTask01+0x124>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	483b      	ldr	r0, [pc, #236]	@ (8001784 <WeightReadTask01+0x128>)
 8001698:	f006 faee 	bl	8007c78 <iprintf>
	  NEXTION_SendString("t1", "Offset (leer)\n");
 800169c:	493a      	ldr	r1, [pc, #232]	@ (8001788 <WeightReadTask01+0x12c>)
 800169e:	4836      	ldr	r0, [pc, #216]	@ (8001778 <WeightReadTask01+0x11c>)
 80016a0:	f7ff fbfa 	bl	8000e98 <NEXTION_SendString>

	  printf("Lege jetzt 206g (iphone 14 pro) auf...\r\n");
 80016a4:	4839      	ldr	r0, [pc, #228]	@ (800178c <WeightReadTask01+0x130>)
 80016a6:	f006 fb4f 	bl	8007d48 <puts>
	  NEXTION_SendString("t1", "Lege jetzt 206g (iphone 14 pro) auf...\r\n");
 80016aa:	4939      	ldr	r1, [pc, #228]	@ (8001790 <WeightReadTask01+0x134>)
 80016ac:	4832      	ldr	r0, [pc, #200]	@ (8001778 <WeightReadTask01+0x11c>)
 80016ae:	f7ff fbf3 	bl	8000e98 <NEXTION_SendString>
	  HAL_Delay(5000);
 80016b2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80016b6:	f000 fb53 	bl	8001d60 <HAL_Delay>

	  int32_t raw_with_weight = HX711_Read();
 80016ba:	f7ff fca1 	bl	8001000 <HX711_Read>
 80016be:	6178      	str	r0, [r7, #20]
	  printf("Raw mit 206g: %ld\r\n", raw_with_weight);
 80016c0:	6979      	ldr	r1, [r7, #20]
 80016c2:	4834      	ldr	r0, [pc, #208]	@ (8001794 <WeightReadTask01+0x138>)
 80016c4:	f006 fad8 	bl	8007c78 <iprintf>
	  NEXTION_SendString("t1", "Raw mit 206g:");
 80016c8:	4933      	ldr	r1, [pc, #204]	@ (8001798 <WeightReadTask01+0x13c>)
 80016ca:	482b      	ldr	r0, [pc, #172]	@ (8001778 <WeightReadTask01+0x11c>)
 80016cc:	f7ff fbe4 	bl	8000e98 <NEXTION_SendString>


	  scale = (float)(raw_with_weight - offset) / kalibriergewicht;
 80016d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <WeightReadTask01+0x124>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016e0:	4b2e      	ldr	r3, [pc, #184]	@ (800179c <WeightReadTask01+0x140>)
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ea:	4b2d      	ldr	r3, [pc, #180]	@ (80017a0 <WeightReadTask01+0x144>)
 80016ec:	edc3 7a00 	vstr	s15, [r3]
	  printf("Skalierung: %.4f\r\n", scale);
 80016f0:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <WeightReadTask01+0x144>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff27 	bl	8000548 <__aeabi_f2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4829      	ldr	r0, [pc, #164]	@ (80017a4 <WeightReadTask01+0x148>)
 8001700:	f006 faba 	bl	8007c78 <iprintf>

	  printf("Live-Gewicht:\r\n");
 8001704:	4828      	ldr	r0, [pc, #160]	@ (80017a8 <WeightReadTask01+0x14c>)
 8001706:	f006 fb1f 	bl	8007d48 <puts>


	for(;;)
  {
	  int32_t raw = HX711_Read();
 800170a:	f7ff fc79 	bl	8001000 <HX711_Read>
 800170e:	6138      	str	r0, [r7, #16]
	  float gewicht = (raw - offset) / scale;
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <WeightReadTask01+0x124>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001720:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <WeightReadTask01+0x144>)
 8001722:	ed93 7a00 	vldr	s14, [r3]
 8001726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172a:	edc7 7a03 	vstr	s15, [r7, #12]

	  printf("Gewicht: %.2f g\r\n", gewicht);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff09 	bl	8000548 <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	481c      	ldr	r0, [pc, #112]	@ (80017ac <WeightReadTask01+0x150>)
 800173c:	f006 fa9c 	bl	8007c78 <iprintf>
	  NEXTION_SendFloat("x0", gewicht, 2);
 8001740:	edd7 7a03 	vldr	s15, [r7, #12]
 8001744:	2102      	movs	r1, #2
 8001746:	eeb0 0a67 	vmov.f32	s0, s15
 800174a:	4819      	ldr	r0, [pc, #100]	@ (80017b0 <WeightReadTask01+0x154>)
 800174c:	f7ff fbcc 	bl	8000ee8 <NEXTION_SendFloat>
	  osMessageQueuePut(WeightDataQueueHandle, &gewicht, 0, 0); // Kein Timeout
 8001750:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <WeightReadTask01+0x158>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	f107 010c 	add.w	r1, r7, #12
 8001758:	2300      	movs	r3, #0
 800175a:	2200      	movs	r2, #0
 800175c:	f002 feb0 	bl	80044c0 <osMessageQueuePut>
	  osDelay(200); // alle 1 Sekunde
 8001760:	20c8      	movs	r0, #200	@ 0xc8
 8001762:	f002 fe1f 	bl	80043a4 <osDelay>
	  printf("Hello");
 8001766:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <WeightReadTask01+0x15c>)
 8001768:	f006 fa86 	bl	8007c78 <iprintf>
  {
 800176c:	bf00      	nop
 800176e:	e7cc      	b.n	800170a <WeightReadTask01+0xae>
 8001770:	0800ad88 	.word	0x0800ad88
 8001774:	0800ad9c 	.word	0x0800ad9c
 8001778:	0800adb0 	.word	0x0800adb0
 800177c:	40020000 	.word	0x40020000
 8001780:	20000324 	.word	0x20000324
 8001784:	0800adb4 	.word	0x0800adb4
 8001788:	0800adcc 	.word	0x0800adcc
 800178c:	0800addc 	.word	0x0800addc
 8001790:	0800ae04 	.word	0x0800ae04
 8001794:	0800ae30 	.word	0x0800ae30
 8001798:	0800ae44 	.word	0x0800ae44
 800179c:	20000008 	.word	0x20000008
 80017a0:	20000004 	.word	0x20000004
 80017a4:	0800ae54 	.word	0x0800ae54
 80017a8:	0800ae68 	.word	0x0800ae68
 80017ac:	0800ae78 	.word	0x0800ae78
 80017b0:	0800ae8c 	.word	0x0800ae8c
 80017b4:	20000320 	.word	0x20000320
 80017b8:	0800ae90 	.word	0x0800ae90

080017bc <SendWeightDisplay01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendWeightDisplay01 */
void SendWeightDisplay01(void *argument)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	float receivedValue;

	for (;;) {

		if (osMessageQueueGet(WeightDataQueueHandle, &receivedValue, NULL,
 80017c4:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <SendWeightDisplay01+0x58>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	f107 010c 	add.w	r1, r7, #12
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	2200      	movs	r2, #0
 80017d2:	f002 fed5 	bl	8004580 <osMessageQueueGet>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d117      	bne.n	800180c <SendWeightDisplay01+0x50>
		osWaitForever) == osOK)
		{
			printf("Gewicht: %.2f g\r\n", receivedValue);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feb2 	bl	8000548 <__aeabi_f2d>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	480b      	ldr	r0, [pc, #44]	@ (8001818 <SendWeightDisplay01+0x5c>)
 80017ea:	f006 fa45 	bl	8007c78 <iprintf>
			NEXTION_SendString("t1", "Start");
 80017ee:	490b      	ldr	r1, [pc, #44]	@ (800181c <SendWeightDisplay01+0x60>)
 80017f0:	480b      	ldr	r0, [pc, #44]	@ (8001820 <SendWeightDisplay01+0x64>)
 80017f2:	f7ff fb51 	bl	8000e98 <NEXTION_SendString>
			osDelay(20);
 80017f6:	2014      	movs	r0, #20
 80017f8:	f002 fdd4 	bl	80043a4 <osDelay>
			NEXTION_SendFloat("x0", receivedValue, 2);
 80017fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001800:	2102      	movs	r1, #2
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	4807      	ldr	r0, [pc, #28]	@ (8001824 <SendWeightDisplay01+0x68>)
 8001808:	f7ff fb6e 	bl	8000ee8 <NEXTION_SendFloat>
		}
		osDelay(20);
 800180c:	2014      	movs	r0, #20
 800180e:	f002 fdc9 	bl	80043a4 <osDelay>
		if (osMessageQueueGet(WeightDataQueueHandle, &receivedValue, NULL,
 8001812:	e7d7      	b.n	80017c4 <SendWeightDisplay01+0x8>
 8001814:	20000320 	.word	0x20000320
 8001818:	0800ae78 	.word	0x0800ae78
 800181c:	0800ae98 	.word	0x0800ae98
 8001820:	0800adb0 	.word	0x0800adb0
 8001824:	0800ae8c 	.word	0x0800ae8c

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <Error_Handler+0x8>

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <HAL_MspInit+0x54>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	4a11      	ldr	r2, [pc, #68]	@ (8001888 <HAL_MspInit+0x54>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001848:	6453      	str	r3, [r2, #68]	@ 0x44
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <HAL_MspInit+0x54>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <HAL_MspInit+0x54>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <HAL_MspInit+0x54>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	@ 0x40
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <HAL_MspInit+0x54>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	210f      	movs	r1, #15
 8001876:	f06f 0001 	mvn.w	r0, #1
 800187a:	f000 fb70 	bl	8001f5e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a19      	ldr	r2, [pc, #100]	@ (8001910 <HAL_I2C_MspInit+0x84>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12c      	bne.n	8001908 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <HAL_I2C_MspInit+0x88>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <HAL_I2C_MspInit+0x88>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <HAL_I2C_MspInit+0x88>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80018ca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d0:	2312      	movs	r3, #18
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018dc:	2304      	movs	r3, #4
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	480c      	ldr	r0, [pc, #48]	@ (8001918 <HAL_I2C_MspInit+0x8c>)
 80018e8:	f000 fc02 	bl	80020f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <HAL_I2C_MspInit+0x88>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <HAL_I2C_MspInit+0x88>)
 80018f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_I2C_MspInit+0x88>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	@ 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40005400 	.word	0x40005400
 8001914:	40023800 	.word	0x40023800
 8001918:	40020400 	.word	0x40020400

0800191c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	@ (80019a0 <HAL_SPI_MspInit+0x84>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a17      	ldr	r2, [pc, #92]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 8001948:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_SPI_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001976:	23e0      	movs	r3, #224	@ 0xe0
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001986:	2305      	movs	r3, #5
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <HAL_SPI_MspInit+0x8c>)
 8001992:	f000 fbad 	bl	80020f0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	@ 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40013000 	.word	0x40013000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000

080019ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a40 <HAL_UART_MspInit+0x94>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d133      	bne.n	8001a36 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <HAL_UART_MspInit+0x98>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <HAL_UART_MspInit+0x98>)
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019de:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <HAL_UART_MspInit+0x98>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <HAL_UART_MspInit+0x98>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <HAL_UART_MspInit+0x98>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <HAL_UART_MspInit+0x98>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a06:	230c      	movs	r3, #12
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a16:	2307      	movs	r3, #7
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <HAL_UART_MspInit+0x9c>)
 8001a22:	f000 fb65 	bl	80020f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2105      	movs	r1, #5
 8001a2a:	2026      	movs	r0, #38	@ 0x26
 8001a2c:	f000 fa97 	bl	8001f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a30:	2026      	movs	r0, #38	@ 0x26
 8001a32:	f000 fab0 	bl	8001f96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	@ 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40004400 	.word	0x40004400
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <NMI_Handler+0x4>

08001a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <MemManage_Handler+0x4>

08001a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a86:	f000 f94b 	bl	8001d20 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a8a:	f004 faa1 	bl	8005fd0 <xTaskGetSchedulerState>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d001      	beq.n	8001a98 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a94:	f005 f898 	bl	8006bc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <USART2_IRQHandler+0x10>)
 8001aa2:	f001 fc33 	bl	800330c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200002d0 	.word	0x200002d0

08001ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_kill>:

int _kill(int pid, int sig)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aca:	f006 fa9f 	bl	800800c <__errno>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2216      	movs	r2, #22
 8001ad2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_exit>:

void _exit (int status)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ffe7 	bl	8001ac0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001af2:	bf00      	nop
 8001af4:	e7fd      	b.n	8001af2 <_exit+0x12>

08001af6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e00a      	b.n	8001b1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b08:	f3af 8000 	nop.w
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	60ba      	str	r2, [r7, #8]
 8001b14:	b2ca      	uxtb	r2, r1
 8001b16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	dbf0      	blt.n	8001b08 <_read+0x12>
  }

  return len;
 8001b26:	687b      	ldr	r3, [r7, #4]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b58:	605a      	str	r2, [r3, #4]
  return 0;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_isatty>:

int _isatty(int file)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba0:	4a14      	ldr	r2, [pc, #80]	@ (8001bf4 <_sbrk+0x5c>)
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <_sbrk+0x60>)
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb4:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <_sbrk+0x64>)
 8001bb6:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <_sbrk+0x68>)
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d207      	bcs.n	8001bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc8:	f006 fa20 	bl	800800c <__errno>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	220c      	movs	r2, #12
 8001bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	e009      	b.n	8001bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bde:	4b07      	ldr	r3, [pc, #28]	@ (8001bfc <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a05      	ldr	r2, [pc, #20]	@ (8001bfc <_sbrk+0x64>)
 8001be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20020000 	.word	0x20020000
 8001bf8:	00000400 	.word	0x00000400
 8001bfc:	20000328 	.word	0x20000328
 8001c00:	20004dd0 	.word	0x20004dd0

08001c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <SystemInit+0x20>)
 8001c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c0e:	4a05      	ldr	r2, [pc, #20]	@ (8001c24 <SystemInit+0x20>)
 8001c10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c2c:	f7ff ffea 	bl	8001c04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c32:	490d      	ldr	r1, [pc, #52]	@ (8001c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c34:	4a0d      	ldr	r2, [pc, #52]	@ (8001c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c48:	4c0a      	ldr	r4, [pc, #40]	@ (8001c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c56:	f006 f9df 	bl	8008018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5a:	f7ff fa5b 	bl	8001114 <main>
  bx  lr    
 8001c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001c6c:	0800b2e0 	.word	0x0800b2e0
  ldr r2, =_sbss
 8001c70:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001c74:	20004dcc 	.word	0x20004dcc

08001c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC_IRQHandler>
	...

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c80:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <HAL_Init+0x40>)
 8001c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_Init+0x40>)
 8001c92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c98:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	@ (8001cbc <HAL_Init+0x40>)
 8001c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f000 f94f 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001caa:	200f      	movs	r0, #15
 8001cac:	f000 f808 	bl	8001cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb0:	f7ff fdc0 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_InitTick+0x54>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_InitTick+0x58>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f967 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00e      	b.n	8001d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d80a      	bhi.n	8001d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f000 f92f 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d00:	4a06      	ldr	r2, [pc, #24]	@ (8001d1c <HAL_InitTick+0x5c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	2000000c 	.word	0x2000000c
 8001d18:	20000014 	.word	0x20000014
 8001d1c:	20000010 	.word	0x20000010

08001d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_IncTick+0x20>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_IncTick+0x24>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a04      	ldr	r2, [pc, #16]	@ (8001d44 <HAL_IncTick+0x24>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000014 	.word	0x20000014
 8001d44:	2000032c 	.word	0x2000032c

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_GetTick+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	2000032c 	.word	0x2000032c

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff ffee 	bl	8001d48 <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <HAL_Delay+0x44>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffde 	bl	8001d48 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000014 	.word	0x20000014

08001da8 <__NVIC_SetPriorityGrouping>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_GetPriorityGrouping>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_EnableIRQ>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db0b      	blt.n	8001e36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4907      	ldr	r1, [pc, #28]	@ (8001e44 <__NVIC_EnableIRQ+0x38>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	@ (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	@ (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <SysTick_Config>:
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f7ff ff8e 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff29 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff3e 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff8e 	bl	8001e9c <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5d 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff31 	bl	8001e0c <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffa2 	bl	8001f04 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff feb6 	bl	8001d48 <HAL_GetTick>
 8001fdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d008      	beq.n	8001ffc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2280      	movs	r2, #128	@ 0x80
 8001fee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e052      	b.n	80020a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0216 	bic.w	r2, r2, #22
 800200a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800201a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d103      	bne.n	800202c <HAL_DMA_Abort+0x62>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0208 	bic.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204c:	e013      	b.n	8002076 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800204e:	f7ff fe7b 	bl	8001d48 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b05      	cmp	r3, #5
 800205a:	d90c      	bls.n	8002076 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2203      	movs	r2, #3
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e015      	b.n	80020a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e4      	bne.n	800204e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	223f      	movs	r2, #63	@ 0x3f
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d004      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2280      	movs	r2, #128	@ 0x80
 80020c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e00c      	b.n	80020e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2205      	movs	r2, #5
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e16b      	b.n	80023e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 815a 	bne.w	80023de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d005      	beq.n	8002142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213e:	2b02      	cmp	r3, #2
 8002140:	d130      	bne.n	80021a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 0201 	and.w	r2, r3, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d017      	beq.n	80021e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80b4 	beq.w	80023de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b60      	ldr	r3, [pc, #384]	@ (80023fc <HAL_GPIO_Init+0x30c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	4a5f      	ldr	r2, [pc, #380]	@ (80023fc <HAL_GPIO_Init+0x30c>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002284:	6453      	str	r3, [r2, #68]	@ 0x44
 8002286:	4b5d      	ldr	r3, [pc, #372]	@ (80023fc <HAL_GPIO_Init+0x30c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002292:	4a5b      	ldr	r2, [pc, #364]	@ (8002400 <HAL_GPIO_Init+0x310>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a52      	ldr	r2, [pc, #328]	@ (8002404 <HAL_GPIO_Init+0x314>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d02b      	beq.n	8002316 <HAL_GPIO_Init+0x226>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a51      	ldr	r2, [pc, #324]	@ (8002408 <HAL_GPIO_Init+0x318>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d025      	beq.n	8002312 <HAL_GPIO_Init+0x222>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a50      	ldr	r2, [pc, #320]	@ (800240c <HAL_GPIO_Init+0x31c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01f      	beq.n	800230e <HAL_GPIO_Init+0x21e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002410 <HAL_GPIO_Init+0x320>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d019      	beq.n	800230a <HAL_GPIO_Init+0x21a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002414 <HAL_GPIO_Init+0x324>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0x216>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002418 <HAL_GPIO_Init+0x328>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_GPIO_Init+0x212>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4c      	ldr	r2, [pc, #304]	@ (800241c <HAL_GPIO_Init+0x32c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x20e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002420 <HAL_GPIO_Init+0x330>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_Init+0x20a>
 80022f6:	2307      	movs	r3, #7
 80022f8:	e00e      	b.n	8002318 <HAL_GPIO_Init+0x228>
 80022fa:	2308      	movs	r3, #8
 80022fc:	e00c      	b.n	8002318 <HAL_GPIO_Init+0x228>
 80022fe:	2306      	movs	r3, #6
 8002300:	e00a      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002302:	2305      	movs	r3, #5
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002306:	2304      	movs	r3, #4
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x228>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x228>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x228>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	@ (8002400 <HAL_GPIO_Init+0x310>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b3b      	ldr	r3, [pc, #236]	@ (8002424 <HAL_GPIO_Init+0x334>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a32      	ldr	r2, [pc, #200]	@ (8002424 <HAL_GPIO_Init+0x334>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b30      	ldr	r3, [pc, #192]	@ (8002424 <HAL_GPIO_Init+0x334>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a27      	ldr	r2, [pc, #156]	@ (8002424 <HAL_GPIO_Init+0x334>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800238a:	4b26      	ldr	r3, [pc, #152]	@ (8002424 <HAL_GPIO_Init+0x334>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002424 <HAL_GPIO_Init+0x334>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_GPIO_Init+0x334>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023d8:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <HAL_GPIO_Init+0x334>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f ae90 	bls.w	800210c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	@ 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40021400 	.word	0x40021400
 800241c:	40021800 	.word	0x40021800
 8002420:	40021c00 	.word	0x40021c00
 8002424:	40013c00 	.word	0x40013c00

08002428 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e001      	b.n	800244a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
 8002464:	4613      	mov	r3, r2
 8002466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002468:	787b      	ldrb	r3, [r7, #1]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800246e:	887a      	ldrh	r2, [r7, #2]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002474:	e003      	b.n	800247e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002476:	887b      	ldrh	r3, [r7, #2]
 8002478:	041a      	lsls	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	619a      	str	r2, [r3, #24]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e12b      	b.n	80026f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff f9ea 	bl	800188c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	@ 0x24
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024f0:	f000 fd80 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 80024f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4a81      	ldr	r2, [pc, #516]	@ (8002700 <HAL_I2C_Init+0x274>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d807      	bhi.n	8002510 <HAL_I2C_Init+0x84>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a80      	ldr	r2, [pc, #512]	@ (8002704 <HAL_I2C_Init+0x278>)
 8002504:	4293      	cmp	r3, r2
 8002506:	bf94      	ite	ls
 8002508:	2301      	movls	r3, #1
 800250a:	2300      	movhi	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	e006      	b.n	800251e <HAL_I2C_Init+0x92>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a7d      	ldr	r2, [pc, #500]	@ (8002708 <HAL_I2C_Init+0x27c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	bf94      	ite	ls
 8002518:	2301      	movls	r3, #1
 800251a:	2300      	movhi	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0e7      	b.n	80026f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4a78      	ldr	r2, [pc, #480]	@ (800270c <HAL_I2C_Init+0x280>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	0c9b      	lsrs	r3, r3, #18
 8002530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a6a      	ldr	r2, [pc, #424]	@ (8002700 <HAL_I2C_Init+0x274>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d802      	bhi.n	8002560 <HAL_I2C_Init+0xd4>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3301      	adds	r3, #1
 800255e:	e009      	b.n	8002574 <HAL_I2C_Init+0xe8>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	4a69      	ldr	r2, [pc, #420]	@ (8002710 <HAL_I2C_Init+0x284>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	099b      	lsrs	r3, r3, #6
 8002572:	3301      	adds	r3, #1
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	430b      	orrs	r3, r1
 800257a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002586:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	495c      	ldr	r1, [pc, #368]	@ (8002700 <HAL_I2C_Init+0x274>)
 8002590:	428b      	cmp	r3, r1
 8002592:	d819      	bhi.n	80025c8 <HAL_I2C_Init+0x13c>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e59      	subs	r1, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a2:	1c59      	adds	r1, r3, #1
 80025a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025a8:	400b      	ands	r3, r1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <HAL_I2C_Init+0x138>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1e59      	subs	r1, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c2:	e051      	b.n	8002668 <HAL_I2C_Init+0x1dc>
 80025c4:	2304      	movs	r3, #4
 80025c6:	e04f      	b.n	8002668 <HAL_I2C_Init+0x1dc>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d111      	bne.n	80025f4 <HAL_I2C_Init+0x168>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1e58      	subs	r0, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	440b      	add	r3, r1
 80025de:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf0c      	ite	eq
 80025ec:	2301      	moveq	r3, #1
 80025ee:	2300      	movne	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e012      	b.n	800261a <HAL_I2C_Init+0x18e>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1e58      	subs	r0, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	0099      	lsls	r1, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	fbb0 f3f3 	udiv	r3, r0, r3
 800260a:	3301      	adds	r3, #1
 800260c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Init+0x196>
 800261e:	2301      	movs	r3, #1
 8002620:	e022      	b.n	8002668 <HAL_I2C_Init+0x1dc>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10e      	bne.n	8002648 <HAL_I2C_Init+0x1bc>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1e58      	subs	r0, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6859      	ldr	r1, [r3, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	440b      	add	r3, r1
 8002638:	fbb0 f3f3 	udiv	r3, r0, r3
 800263c:	3301      	adds	r3, #1
 800263e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002646:	e00f      	b.n	8002668 <HAL_I2C_Init+0x1dc>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1e58      	subs	r0, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	0099      	lsls	r1, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002664:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	6809      	ldr	r1, [r1, #0]
 800266c:	4313      	orrs	r3, r2
 800266e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002696:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6911      	ldr	r1, [r2, #16]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68d2      	ldr	r2, [r2, #12]
 80026a2:	4311      	orrs	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	000186a0 	.word	0x000186a0
 8002704:	001e847f 	.word	0x001e847f
 8002708:	003d08ff 	.word	0x003d08ff
 800270c:	431bde83 	.word	0x431bde83
 8002710:	10624dd3 	.word	0x10624dd3

08002714 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e267      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d075      	beq.n	800281e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002732:	4b88      	ldr	r3, [pc, #544]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b04      	cmp	r3, #4
 800273c:	d00c      	beq.n	8002758 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273e:	4b85      	ldr	r3, [pc, #532]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002746:	2b08      	cmp	r3, #8
 8002748:	d112      	bne.n	8002770 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274a:	4b82      	ldr	r3, [pc, #520]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002752:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002756:	d10b      	bne.n	8002770 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	4b7e      	ldr	r3, [pc, #504]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d05b      	beq.n	800281c <HAL_RCC_OscConfig+0x108>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d157      	bne.n	800281c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e242      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002778:	d106      	bne.n	8002788 <HAL_RCC_OscConfig+0x74>
 800277a:	4b76      	ldr	r3, [pc, #472]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a75      	ldr	r2, [pc, #468]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e01d      	b.n	80027c4 <HAL_RCC_OscConfig+0xb0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x98>
 8002792:	4b70      	ldr	r3, [pc, #448]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6f      	ldr	r2, [pc, #444]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b6d      	ldr	r3, [pc, #436]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0xb0>
 80027ac:	4b69      	ldr	r3, [pc, #420]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a68      	ldr	r2, [pc, #416]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b66      	ldr	r3, [pc, #408]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a65      	ldr	r2, [pc, #404]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7ff fabc 	bl	8001d48 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7ff fab8 	bl	8001d48 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	@ 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e207      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0xc0>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7ff faa8 	bl	8001d48 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7ff faa4 	bl	8001d48 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	@ 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e1f3      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	4b51      	ldr	r3, [pc, #324]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0xe8>
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d063      	beq.n	80028f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800282a:	4b4a      	ldr	r3, [pc, #296]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800283e:	2b08      	cmp	r3, #8
 8002840:	d11c      	bne.n	800287c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x152>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1c7      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b3b      	ldr	r3, [pc, #236]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4937      	ldr	r1, [pc, #220]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e03a      	b.n	80028f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <HAL_RCC_OscConfig+0x244>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7ff fa5d 	bl	8001d48 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002892:	f7ff fa59 	bl	8001d48 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e1a8      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4925      	ldr	r1, [pc, #148]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]
 80028c4:	e015      	b.n	80028f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c6:	4b24      	ldr	r3, [pc, #144]	@ (8002958 <HAL_RCC_OscConfig+0x244>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff fa3c 	bl	8001d48 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d4:	f7ff fa38 	bl	8001d48 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e187      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d036      	beq.n	800296c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002906:	4b15      	ldr	r3, [pc, #84]	@ (800295c <HAL_RCC_OscConfig+0x248>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7ff fa1c 	bl	8001d48 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002914:	f7ff fa18 	bl	8001d48 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e167      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <HAL_RCC_OscConfig+0x240>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x200>
 8002932:	e01b      	b.n	800296c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002934:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_RCC_OscConfig+0x248>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293a:	f7ff fa05 	bl	8001d48 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	e00e      	b.n	8002960 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002942:	f7ff fa01 	bl	8001d48 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d907      	bls.n	8002960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e150      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
 8002954:	40023800 	.word	0x40023800
 8002958:	42470000 	.word	0x42470000
 800295c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b88      	ldr	r3, [pc, #544]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ea      	bne.n	8002942 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8097 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b81      	ldr	r3, [pc, #516]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	4a7c      	ldr	r2, [pc, #496]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	@ 0x40
 800299a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b77      	ldr	r3, [pc, #476]	@ (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b74      	ldr	r3, [pc, #464]	@ (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a73      	ldr	r2, [pc, #460]	@ (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7ff f9c1 	bl	8001d48 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7ff f9bd 	bl	8001d48 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e10c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002b88 <HAL_RCC_OscConfig+0x474>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x2ea>
 80029f0:	4b64      	ldr	r3, [pc, #400]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	4a63      	ldr	r2, [pc, #396]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fc:	e01c      	b.n	8002a38 <HAL_RCC_OscConfig+0x324>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x30c>
 8002a06:	4b5f      	ldr	r3, [pc, #380]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a12:	4b5c      	ldr	r3, [pc, #368]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	4a5b      	ldr	r2, [pc, #364]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0x324>
 8002a20:	4b58      	ldr	r3, [pc, #352]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	4a57      	ldr	r2, [pc, #348]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2c:	4b55      	ldr	r3, [pc, #340]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	4a54      	ldr	r2, [pc, #336]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7ff f982 	bl	8001d48 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7ff f97e 	bl	8001d48 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0cb      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	4b49      	ldr	r3, [pc, #292]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0ee      	beq.n	8002a48 <HAL_RCC_OscConfig+0x334>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6c:	f7ff f96c 	bl	8001d48 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7ff f968 	bl	8001d48 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0b5      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ee      	bne.n	8002a74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b39      	ldr	r3, [pc, #228]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	4a38      	ldr	r2, [pc, #224]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80a1 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab2:	4b34      	ldr	r3, [pc, #208]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d05c      	beq.n	8002b78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d141      	bne.n	8002b4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b31      	ldr	r3, [pc, #196]	@ (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7ff f93c 	bl	8001d48 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7ff f938 	bl	8001d48 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e087      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	4b27      	ldr	r3, [pc, #156]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	491b      	ldr	r1, [pc, #108]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7ff f911 	bl	8001d48 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7ff f90d 	bl	8001d48 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e05c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x416>
 8002b48:	e054      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <HAL_RCC_OscConfig+0x478>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7ff f8fa 	bl	8001d48 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7ff f8f6 	bl	8001d48 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e045      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x444>
 8002b76:	e03d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e038      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <HAL_RCC_OscConfig+0x4ec>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d028      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d121      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d11a      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d111      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800

08002c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0cc      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b68      	ldr	r3, [pc, #416]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d90c      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b65      	ldr	r3, [pc, #404]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b63      	ldr	r3, [pc, #396]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c58:	4b59      	ldr	r3, [pc, #356]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a58      	ldr	r2, [pc, #352]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c70:	4b53      	ldr	r3, [pc, #332]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a52      	ldr	r2, [pc, #328]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b50      	ldr	r3, [pc, #320]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	494d      	ldr	r1, [pc, #308]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d044      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d119      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e06f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e067      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4b37      	ldr	r3, [pc, #220]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4934      	ldr	r1, [pc, #208]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7ff f828 	bl	8001d48 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7ff f824 	bl	8001d48 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e04f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b25      	ldr	r3, [pc, #148]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d20c      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b22      	ldr	r3, [pc, #136]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b20      	ldr	r3, [pc, #128]	@ (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e032      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4916      	ldr	r1, [pc, #88]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d76:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	490e      	ldr	r1, [pc, #56]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d8a:	f000 f821 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	490a      	ldr	r1, [pc, #40]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	5ccb      	ldrb	r3, [r1, r3]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a09      	ldr	r2, [pc, #36]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe ff88 	bl	8001cc0 <HAL_InitTick>

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	0800af18 	.word	0x0800af18
 8002dc8:	2000000c 	.word	0x2000000c
 8002dcc:	20000010 	.word	0x20000010

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd4:	b094      	sub	sp, #80	@ 0x50
 8002dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de8:	4b79      	ldr	r3, [pc, #484]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d00d      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x40>
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	f200 80e1 	bhi.w	8002fbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x34>
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d003      	beq.n	8002e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e02:	e0db      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b73      	ldr	r3, [pc, #460]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e08:	e0db      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e0a:	4b73      	ldr	r3, [pc, #460]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e0e:	e0d8      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e10:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e26:	4b6a      	ldr	r3, [pc, #424]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	099b      	lsrs	r3, r3, #6
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e42:	4622      	mov	r2, r4
 8002e44:	462b      	mov	r3, r5
 8002e46:	f04f 0000 	mov.w	r0, #0
 8002e4a:	f04f 0100 	mov.w	r1, #0
 8002e4e:	0159      	lsls	r1, r3, #5
 8002e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e54:	0150      	lsls	r0, r2, #5
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	1a51      	subs	r1, r2, r1
 8002e5e:	6139      	str	r1, [r7, #16]
 8002e60:	4629      	mov	r1, r5
 8002e62:	eb63 0301 	sbc.w	r3, r3, r1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e74:	4659      	mov	r1, fp
 8002e76:	018b      	lsls	r3, r1, #6
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e7e:	4651      	mov	r1, sl
 8002e80:	018a      	lsls	r2, r1, #6
 8002e82:	4651      	mov	r1, sl
 8002e84:	ebb2 0801 	subs.w	r8, r2, r1
 8002e88:	4659      	mov	r1, fp
 8002e8a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ea2:	4690      	mov	r8, r2
 8002ea4:	4699      	mov	r9, r3
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	eb18 0303 	adds.w	r3, r8, r3
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	462b      	mov	r3, r5
 8002eb0:	eb49 0303 	adc.w	r3, r9, r3
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	024b      	lsls	r3, r1, #9
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ecc:	4621      	mov	r1, r4
 8002ece:	024a      	lsls	r2, r1, #9
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ee0:	f7fd fe62 	bl	8000ba8 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eec:	e058      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	4b38      	ldr	r3, [pc, #224]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	4611      	mov	r1, r2
 8002efa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f08:	4642      	mov	r2, r8
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	f04f 0000 	mov.w	r0, #0
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	0159      	lsls	r1, r3, #5
 8002f16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f1a:	0150      	lsls	r0, r2, #5
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4641      	mov	r1, r8
 8002f22:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f26:	4649      	mov	r1, r9
 8002f28:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f40:	ebb2 040a 	subs.w	r4, r2, sl
 8002f44:	eb63 050b 	sbc.w	r5, r3, fp
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	00eb      	lsls	r3, r5, #3
 8002f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f56:	00e2      	lsls	r2, r4, #3
 8002f58:	4614      	mov	r4, r2
 8002f5a:	461d      	mov	r5, r3
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	18e3      	adds	r3, r4, r3
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	464b      	mov	r3, r9
 8002f64:	eb45 0303 	adc.w	r3, r5, r3
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f76:	4629      	mov	r1, r5
 8002f78:	028b      	lsls	r3, r1, #10
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f80:	4621      	mov	r1, r4
 8002f82:	028a      	lsls	r2, r1, #10
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	61fa      	str	r2, [r7, #28]
 8002f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f94:	f7fd fe08 	bl	8000ba8 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	3301      	adds	r3, #1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002fb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fba:	e002      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3750      	adds	r7, #80	@ 0x50
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	007a1200 	.word	0x007a1200

08002fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	@ (8002ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	2000000c 	.word	0x2000000c

08002ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ff8:	f7ff fff0 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	0a9b      	lsrs	r3, r3, #10
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4903      	ldr	r1, [pc, #12]	@ (8003018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40023800 	.word	0x40023800
 8003018:	0800af28 	.word	0x0800af28

0800301c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003020:	f7ff ffdc 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b05      	ldr	r3, [pc, #20]	@ (800303c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	0b5b      	lsrs	r3, r3, #13
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4903      	ldr	r1, [pc, #12]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40023800 	.word	0x40023800
 8003040:	0800af28 	.word	0x0800af28

08003044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07b      	b.n	800314e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003066:	d009      	beq.n	800307c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
 800306e:	e005      	b.n	800307c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe fc40 	bl	800191c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003100:	ea42 0103 	orr.w	r1, r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	f003 0104 	and.w	r1, r3, #4
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	f003 0210 	and.w	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800313c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e042      	b.n	80031ee <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fe fc15 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2224      	movs	r2, #36	@ 0x24
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003198:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fd7e 	bl	8003c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b08a      	sub	sp, #40	@ 0x28
 80031fa:	af02      	add	r7, sp, #8
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	d175      	bne.n	8003302 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_UART_Transmit+0x2c>
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e06e      	b.n	8003304 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2221      	movs	r2, #33	@ 0x21
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003234:	f7fe fd88 	bl	8001d48 <HAL_GetTick>
 8003238:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324e:	d108      	bne.n	8003262 <HAL_UART_Transmit+0x6c>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d104      	bne.n	8003262 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	e003      	b.n	800326a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800326a:	e02e      	b.n	80032ca <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2200      	movs	r2, #0
 8003274:	2180      	movs	r1, #128	@ 0x80
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fb1c 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e03a      	b.n	8003304 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	3302      	adds	r3, #2
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	e007      	b.n	80032bc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1cb      	bne.n	800326c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2200      	movs	r2, #0
 80032dc:	2140      	movs	r1, #64	@ 0x40
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fae8 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e006      	b.n	8003304 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	e000      	b.n	8003304 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
  }
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b0ba      	sub	sp, #232	@ 0xe8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800333e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800334a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_UART_IRQHandler+0x66>
 800335e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fbd7 	bl	8003b1e <UART_Receive_IT>
      return;
 8003370:	e273      	b.n	800385a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80de 	beq.w	8003538 <HAL_UART_IRQHandler+0x22c>
 800337c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800338c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80d1 	beq.w	8003538 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_UART_IRQHandler+0xae>
 80033a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <HAL_UART_IRQHandler+0xd2>
 80033c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d6:	f043 0202 	orr.w	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_UART_IRQHandler+0xf6>
 80033ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	f043 0204 	orr.w	r2, r3, #4
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d011      	beq.n	8003432 <HAL_UART_IRQHandler+0x126>
 800340e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800341a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	f043 0208 	orr.w	r2, r3, #8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 820a 	beq.w	8003850 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800343c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_UART_IRQHandler+0x14e>
 8003448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fb62 	bl	8003b1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003464:	2b40      	cmp	r3, #64	@ 0x40
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <HAL_UART_IRQHandler+0x17a>
 800347e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d04f      	beq.n	8003526 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fa6d 	bl	8003966 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003496:	2b40      	cmp	r3, #64	@ 0x40
 8003498:	d141      	bne.n	800351e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3314      	adds	r3, #20
 80034a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3314      	adds	r3, #20
 80034c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1d9      	bne.n	800349a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d013      	beq.n	8003516 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f2:	4a8a      	ldr	r2, [pc, #552]	@ (800371c <HAL_UART_IRQHandler+0x410>)
 80034f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fdd5 	bl	80020aa <HAL_DMA_Abort_IT>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d016      	beq.n	8003534 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003510:	4610      	mov	r0, r2
 8003512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00e      	b.n	8003534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f9b6 	bl	8003888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e00a      	b.n	8003534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9b2 	bl	8003888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	e006      	b.n	8003534 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9ae 	bl	8003888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003532:	e18d      	b.n	8003850 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	bf00      	nop
    return;
 8003536:	e18b      	b.n	8003850 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 8167 	bne.w	8003810 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8160 	beq.w	8003810 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8159 	beq.w	8003810 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	2b40      	cmp	r3, #64	@ 0x40
 8003580:	f040 80ce 	bne.w	8003720 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003590:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a9 	beq.w	80036ec <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800359e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035a2:	429a      	cmp	r2, r3
 80035a4:	f080 80a2 	bcs.w	80036ec <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ba:	f000 8088 	beq.w	80036ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	330c      	adds	r3, #12
 80035c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003602:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1d9      	bne.n	80035be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3314      	adds	r3, #20
 8003610:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800361a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3314      	adds	r3, #20
 800362a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800362e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003632:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003636:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e1      	bne.n	800360a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3314      	adds	r3, #20
 800364c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800365c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3314      	adds	r3, #20
 8003666:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800366a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800366c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003670:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e3      	bne.n	8003646 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800369c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800369e:	f023 0310 	bic.w	r3, r3, #16
 80036a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e3      	bne.n	800368c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fc7e 	bl	8001fca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8d9 	bl	800389c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80036ea:	e0b3      	b.n	8003854 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036f4:	429a      	cmp	r2, r3
 80036f6:	f040 80ad 	bne.w	8003854 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003704:	f040 80a6 	bne.w	8003854 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f8c1 	bl	800389c <HAL_UARTEx_RxEventCallback>
      return;
 800371a:	e09b      	b.n	8003854 <HAL_UART_IRQHandler+0x548>
 800371c:	08003a2d 	.word	0x08003a2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003728:	b29b      	uxth	r3, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 808e 	beq.w	8003858 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800373c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8089 	beq.w	8003858 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800375c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800376a:	647a      	str	r2, [r7, #68]	@ 0x44
 800376c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003770:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e3      	bne.n	8003746 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	623b      	str	r3, [r7, #32]
   return(result);
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80037a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e3      	bne.n	800377e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0310 	bic.w	r3, r3, #16
 80037da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037e8:	61fa      	str	r2, [r7, #28]
 80037ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	617b      	str	r3, [r7, #20]
   return(result);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e3      	bne.n	80037c4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003802:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f847 	bl	800389c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800380e:	e023      	b.n	8003858 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_UART_IRQHandler+0x524>
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f910 	bl	8003a4e <UART_Transmit_IT>
    return;
 800382e:	e014      	b.n	800385a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <HAL_UART_IRQHandler+0x54e>
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f950 	bl	8003aee <UART_EndTransmit_IT>
    return;
 800384e:	e004      	b.n	800385a <HAL_UART_IRQHandler+0x54e>
    return;
 8003850:	bf00      	nop
 8003852:	e002      	b.n	800385a <HAL_UART_IRQHandler+0x54e>
      return;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <HAL_UART_IRQHandler+0x54e>
      return;
 8003858:	bf00      	nop
  }
}
 800385a:	37e8      	adds	r7, #232	@ 0xe8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c4:	e03b      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d037      	beq.n	800393e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fe fa3b 	bl	8001d48 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e03a      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d023      	beq.n	800393e <UART_WaitOnFlagUntilTimeout+0x8a>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b80      	cmp	r3, #128	@ 0x80
 80038fa:	d020      	beq.n	800393e <UART_WaitOnFlagUntilTimeout+0x8a>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b40      	cmp	r3, #64	@ 0x40
 8003900:	d01d      	beq.n	800393e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b08      	cmp	r3, #8
 800390e:	d116      	bne.n	800393e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f81d 	bl	8003966 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2208      	movs	r2, #8
 8003930:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	429a      	cmp	r2, r3
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	429a      	cmp	r2, r3
 800395a:	d0b4      	beq.n	80038c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003966:	b480      	push	{r7}
 8003968:	b095      	sub	sp, #84	@ 0x54
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800398e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003990:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003994:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e5      	bne.n	800396e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3314      	adds	r3, #20
 80039a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3314      	adds	r3, #20
 80039c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e5      	bne.n	80039a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d119      	bne.n	8003a12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f023 0310 	bic.w	r3, r3, #16
 80039f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039fe:	61ba      	str	r2, [r7, #24]
 8003a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6979      	ldr	r1, [r7, #20]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e5      	bne.n	80039de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a20:	bf00      	nop
 8003a22:	3754      	adds	r7, #84	@ 0x54
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7ff ff21 	bl	8003888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b085      	sub	sp, #20
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b21      	cmp	r3, #33	@ 0x21
 8003a60:	d13e      	bne.n	8003ae0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a6a:	d114      	bne.n	8003a96 <UART_Transmit_IT+0x48>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d110      	bne.n	8003a96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	1c9a      	adds	r2, r3, #2
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	621a      	str	r2, [r3, #32]
 8003a94:	e008      	b.n	8003aa8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	1c59      	adds	r1, r3, #1
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6211      	str	r1, [r2, #32]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10f      	bne.n	8003adc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003aca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ada:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff fea6 	bl	8003860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b08c      	sub	sp, #48	@ 0x30
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b22      	cmp	r3, #34	@ 0x22
 8003b38:	f040 80aa 	bne.w	8003c90 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b44:	d115      	bne.n	8003b72 <UART_Receive_IT+0x54>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d111      	bne.n	8003b72 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b52:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6a:	1c9a      	adds	r2, r3, #2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b70:	e024      	b.n	8003bbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b80:	d007      	beq.n	8003b92 <UART_Receive_IT+0x74>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <UART_Receive_IT+0x82>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	e008      	b.n	8003bb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d15d      	bne.n	8003c8c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0220 	bic.w	r2, r2, #32
 8003bde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d135      	bne.n	8003c82 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f023 0310 	bic.w	r3, r3, #16
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3c:	623a      	str	r2, [r7, #32]
 8003c3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	69f9      	ldr	r1, [r7, #28]
 8003c42:	6a3a      	ldr	r2, [r7, #32]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e5      	bne.n	8003c1c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d10a      	bne.n	8003c74 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff fe0e 	bl	800389c <HAL_UARTEx_RxEventCallback>
 8003c80:	e002      	b.n	8003c88 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fdf6 	bl	8003874 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e002      	b.n	8003c92 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3730      	adds	r7, #48	@ 0x30
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca0:	b0c0      	sub	sp, #256	@ 0x100
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	68d9      	ldr	r1, [r3, #12]
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	ea40 0301 	orr.w	r3, r0, r1
 8003cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cf4:	f021 010c 	bic.w	r1, r1, #12
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d02:	430b      	orrs	r3, r1
 8003d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	6999      	ldr	r1, [r3, #24]
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	ea40 0301 	orr.w	r3, r0, r1
 8003d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b8f      	ldr	r3, [pc, #572]	@ (8003f68 <UART_SetConfig+0x2cc>)
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d005      	beq.n	8003d3c <UART_SetConfig+0xa0>
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b8d      	ldr	r3, [pc, #564]	@ (8003f6c <UART_SetConfig+0x2d0>)
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d104      	bne.n	8003d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d3c:	f7ff f96e 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 8003d40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d44:	e003      	b.n	8003d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d46:	f7ff f955 	bl	8002ff4 <HAL_RCC_GetPCLK1Freq>
 8003d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d58:	f040 810c 	bne.w	8003f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d6e:	4622      	mov	r2, r4
 8003d70:	462b      	mov	r3, r5
 8003d72:	1891      	adds	r1, r2, r2
 8003d74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d76:	415b      	adcs	r3, r3
 8003d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d7e:	4621      	mov	r1, r4
 8003d80:	eb12 0801 	adds.w	r8, r2, r1
 8003d84:	4629      	mov	r1, r5
 8003d86:	eb43 0901 	adc.w	r9, r3, r1
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d9e:	4690      	mov	r8, r2
 8003da0:	4699      	mov	r9, r3
 8003da2:	4623      	mov	r3, r4
 8003da4:	eb18 0303 	adds.w	r3, r8, r3
 8003da8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003dac:	462b      	mov	r3, r5
 8003dae:	eb49 0303 	adc.w	r3, r9, r3
 8003db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dca:	460b      	mov	r3, r1
 8003dcc:	18db      	adds	r3, r3, r3
 8003dce:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	eb42 0303 	adc.w	r3, r2, r3
 8003dd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003de0:	f7fc fee2 	bl	8000ba8 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4b61      	ldr	r3, [pc, #388]	@ (8003f70 <UART_SetConfig+0x2d4>)
 8003dea:	fba3 2302 	umull	r2, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	011c      	lsls	r4, r3, #4
 8003df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e04:	4642      	mov	r2, r8
 8003e06:	464b      	mov	r3, r9
 8003e08:	1891      	adds	r1, r2, r2
 8003e0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e0c:	415b      	adcs	r3, r3
 8003e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e14:	4641      	mov	r1, r8
 8003e16:	eb12 0a01 	adds.w	sl, r2, r1
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e34:	4692      	mov	sl, r2
 8003e36:	469b      	mov	fp, r3
 8003e38:	4643      	mov	r3, r8
 8003e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e42:	464b      	mov	r3, r9
 8003e44:	eb4b 0303 	adc.w	r3, fp, r3
 8003e48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e60:	460b      	mov	r3, r1
 8003e62:	18db      	adds	r3, r3, r3
 8003e64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e66:	4613      	mov	r3, r2
 8003e68:	eb42 0303 	adc.w	r3, r2, r3
 8003e6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e76:	f7fc fe97 	bl	8000ba8 <__aeabi_uldivmod>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <UART_SetConfig+0x2d4>)
 8003e82:	fba3 2301 	umull	r2, r3, r3, r1
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2264      	movs	r2, #100	@ 0x64
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	1acb      	subs	r3, r1, r3
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e96:	4b36      	ldr	r3, [pc, #216]	@ (8003f70 <UART_SetConfig+0x2d4>)
 8003e98:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ea4:	441c      	add	r4, r3
 8003ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ec8:	4641      	mov	r1, r8
 8003eca:	1851      	adds	r1, r2, r1
 8003ecc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ece:	4649      	mov	r1, r9
 8003ed0:	414b      	adcs	r3, r1
 8003ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	00cb      	lsls	r3, r1, #3
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eea:	4651      	mov	r1, sl
 8003eec:	00ca      	lsls	r2, r1, #3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003efc:	464b      	mov	r3, r9
 8003efe:	460a      	mov	r2, r1
 8003f00:	eb42 0303 	adc.w	r3, r2, r3
 8003f04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	18db      	adds	r3, r3, r3
 8003f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f22:	4613      	mov	r3, r2
 8003f24:	eb42 0303 	adc.w	r3, r2, r3
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f32:	f7fc fe39 	bl	8000ba8 <__aeabi_uldivmod>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <UART_SetConfig+0x2d4>)
 8003f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	2164      	movs	r1, #100	@ 0x64
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	3332      	adds	r3, #50	@ 0x32
 8003f4e:	4a08      	ldr	r2, [pc, #32]	@ (8003f70 <UART_SetConfig+0x2d4>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	f003 0207 	and.w	r2, r3, #7
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4422      	add	r2, r4
 8003f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f64:	e106      	b.n	8004174 <UART_SetConfig+0x4d8>
 8003f66:	bf00      	nop
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	40011400 	.word	0x40011400
 8003f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f86:	4642      	mov	r2, r8
 8003f88:	464b      	mov	r3, r9
 8003f8a:	1891      	adds	r1, r2, r2
 8003f8c:	6239      	str	r1, [r7, #32]
 8003f8e:	415b      	adcs	r3, r3
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f96:	4641      	mov	r1, r8
 8003f98:	1854      	adds	r4, r2, r1
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	eb43 0501 	adc.w	r5, r3, r1
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	00eb      	lsls	r3, r5, #3
 8003faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fae:	00e2      	lsls	r2, r4, #3
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	4643      	mov	r3, r8
 8003fb6:	18e3      	adds	r3, r4, r3
 8003fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	eb45 0303 	adc.w	r3, r5, r3
 8003fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	008b      	lsls	r3, r1, #2
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fec:	4621      	mov	r1, r4
 8003fee:	008a      	lsls	r2, r1, #2
 8003ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ff4:	f7fc fdd8 	bl	8000ba8 <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4b60      	ldr	r3, [pc, #384]	@ (8004180 <UART_SetConfig+0x4e4>)
 8003ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	011c      	lsls	r4, r3, #4
 8004006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004010:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004018:	4642      	mov	r2, r8
 800401a:	464b      	mov	r3, r9
 800401c:	1891      	adds	r1, r2, r2
 800401e:	61b9      	str	r1, [r7, #24]
 8004020:	415b      	adcs	r3, r3
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004028:	4641      	mov	r1, r8
 800402a:	1851      	adds	r1, r2, r1
 800402c:	6139      	str	r1, [r7, #16]
 800402e:	4649      	mov	r1, r9
 8004030:	414b      	adcs	r3, r1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004040:	4659      	mov	r1, fp
 8004042:	00cb      	lsls	r3, r1, #3
 8004044:	4651      	mov	r1, sl
 8004046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404a:	4651      	mov	r1, sl
 800404c:	00ca      	lsls	r2, r1, #3
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	4603      	mov	r3, r0
 8004054:	4642      	mov	r2, r8
 8004056:	189b      	adds	r3, r3, r2
 8004058:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800405c:	464b      	mov	r3, r9
 800405e:	460a      	mov	r2, r1
 8004060:	eb42 0303 	adc.w	r3, r2, r3
 8004064:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004072:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004080:	4649      	mov	r1, r9
 8004082:	008b      	lsls	r3, r1, #2
 8004084:	4641      	mov	r1, r8
 8004086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800408a:	4641      	mov	r1, r8
 800408c:	008a      	lsls	r2, r1, #2
 800408e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004092:	f7fc fd89 	bl	8000ba8 <__aeabi_uldivmod>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4611      	mov	r1, r2
 800409c:	4b38      	ldr	r3, [pc, #224]	@ (8004180 <UART_SetConfig+0x4e4>)
 800409e:	fba3 2301 	umull	r2, r3, r3, r1
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2264      	movs	r2, #100	@ 0x64
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	1acb      	subs	r3, r1, r3
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	3332      	adds	r3, #50	@ 0x32
 80040b0:	4a33      	ldr	r2, [pc, #204]	@ (8004180 <UART_SetConfig+0x4e4>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040bc:	441c      	add	r4, r3
 80040be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040c2:	2200      	movs	r2, #0
 80040c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80040c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80040c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040cc:	4642      	mov	r2, r8
 80040ce:	464b      	mov	r3, r9
 80040d0:	1891      	adds	r1, r2, r2
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	415b      	adcs	r3, r3
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040dc:	4641      	mov	r1, r8
 80040de:	1851      	adds	r1, r2, r1
 80040e0:	6039      	str	r1, [r7, #0]
 80040e2:	4649      	mov	r1, r9
 80040e4:	414b      	adcs	r3, r1
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040f4:	4659      	mov	r1, fp
 80040f6:	00cb      	lsls	r3, r1, #3
 80040f8:	4651      	mov	r1, sl
 80040fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fe:	4651      	mov	r1, sl
 8004100:	00ca      	lsls	r2, r1, #3
 8004102:	4610      	mov	r0, r2
 8004104:	4619      	mov	r1, r3
 8004106:	4603      	mov	r3, r0
 8004108:	4642      	mov	r2, r8
 800410a:	189b      	adds	r3, r3, r2
 800410c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800410e:	464b      	mov	r3, r9
 8004110:	460a      	mov	r2, r1
 8004112:	eb42 0303 	adc.w	r3, r2, r3
 8004116:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	663b      	str	r3, [r7, #96]	@ 0x60
 8004122:	667a      	str	r2, [r7, #100]	@ 0x64
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004130:	4649      	mov	r1, r9
 8004132:	008b      	lsls	r3, r1, #2
 8004134:	4641      	mov	r1, r8
 8004136:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800413a:	4641      	mov	r1, r8
 800413c:	008a      	lsls	r2, r1, #2
 800413e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004142:	f7fc fd31 	bl	8000ba8 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <UART_SetConfig+0x4e4>)
 800414c:	fba3 1302 	umull	r1, r3, r3, r2
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	2164      	movs	r1, #100	@ 0x64
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	3332      	adds	r3, #50	@ 0x32
 800415e:	4a08      	ldr	r2, [pc, #32]	@ (8004180 <UART_SetConfig+0x4e4>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	f003 020f 	and.w	r2, r3, #15
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4422      	add	r2, r4
 8004172:	609a      	str	r2, [r3, #8]
}
 8004174:	bf00      	nop
 8004176:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800417a:	46bd      	mov	sp, r7
 800417c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004180:	51eb851f 	.word	0x51eb851f

08004184 <__NVIC_SetPriority>:
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	6039      	str	r1, [r7, #0]
 800418e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004194:	2b00      	cmp	r3, #0
 8004196:	db0a      	blt.n	80041ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	490c      	ldr	r1, [pc, #48]	@ (80041d0 <__NVIC_SetPriority+0x4c>)
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	0112      	lsls	r2, r2, #4
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	440b      	add	r3, r1
 80041a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80041ac:	e00a      	b.n	80041c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	4908      	ldr	r1, [pc, #32]	@ (80041d4 <__NVIC_SetPriority+0x50>)
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	3b04      	subs	r3, #4
 80041bc:	0112      	lsls	r2, r2, #4
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	440b      	add	r3, r1
 80041c2:	761a      	strb	r2, [r3, #24]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000e100 	.word	0xe000e100
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80041dc:	2100      	movs	r1, #0
 80041de:	f06f 0004 	mvn.w	r0, #4
 80041e2:	f7ff ffcf 	bl	8004184 <__NVIC_SetPriority>
#endif
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041f2:	f3ef 8305 	mrs	r3, IPSR
 80041f6:	603b      	str	r3, [r7, #0]
  return(result);
 80041f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80041fe:	f06f 0305 	mvn.w	r3, #5
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	e00c      	b.n	8004220 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004206:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <osKernelInitialize+0x44>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800420e:	4b08      	ldr	r3, [pc, #32]	@ (8004230 <osKernelInitialize+0x44>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004214:	2300      	movs	r3, #0
 8004216:	607b      	str	r3, [r7, #4]
 8004218:	e002      	b.n	8004220 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295
 800421e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004220:	687b      	ldr	r3, [r7, #4]
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000330 	.word	0x20000330

08004234 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800423a:	f3ef 8305 	mrs	r3, IPSR
 800423e:	603b      	str	r3, [r7, #0]
  return(result);
 8004240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004246:	f06f 0305 	mvn.w	r3, #5
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	e010      	b.n	8004270 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800424e:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <osKernelStart+0x48>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d109      	bne.n	800426a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004256:	f7ff ffbf 	bl	80041d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800425a:	4b08      	ldr	r3, [pc, #32]	@ (800427c <osKernelStart+0x48>)
 800425c:	2202      	movs	r2, #2
 800425e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004260:	f001 fa68 	bl	8005734 <vTaskStartScheduler>
      stat = osOK;
 8004264:	2300      	movs	r3, #0
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	e002      	b.n	8004270 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004270:	687b      	ldr	r3, [r7, #4]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000330 	.word	0x20000330

08004280 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b08e      	sub	sp, #56	@ 0x38
 8004284:	af04      	add	r7, sp, #16
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004290:	f3ef 8305 	mrs	r3, IPSR
 8004294:	617b      	str	r3, [r7, #20]
  return(result);
 8004296:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004298:	2b00      	cmp	r3, #0
 800429a:	d17e      	bne.n	800439a <osThreadNew+0x11a>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d07b      	beq.n	800439a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80042a2:	2380      	movs	r3, #128	@ 0x80
 80042a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80042a6:	2318      	movs	r3, #24
 80042a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80042ae:	f04f 33ff 	mov.w	r3, #4294967295
 80042b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d045      	beq.n	8004346 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <osThreadNew+0x48>
        name = attr->name;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <osThreadNew+0x6e>
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b38      	cmp	r3, #56	@ 0x38
 80042e0:	d805      	bhi.n	80042ee <osThreadNew+0x6e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <osThreadNew+0x72>
        return (NULL);
 80042ee:	2300      	movs	r3, #0
 80042f0:	e054      	b.n	800439c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	089b      	lsrs	r3, r3, #2
 8004300:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00e      	beq.n	8004328 <osThreadNew+0xa8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004310:	d90a      	bls.n	8004328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004316:	2b00      	cmp	r3, #0
 8004318:	d006      	beq.n	8004328 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <osThreadNew+0xa8>
        mem = 1;
 8004322:	2301      	movs	r3, #1
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	e010      	b.n	800434a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10c      	bne.n	800434a <osThreadNew+0xca>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d108      	bne.n	800434a <osThreadNew+0xca>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <osThreadNew+0xca>
          mem = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	e001      	b.n	800434a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d110      	bne.n	8004372 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004358:	9202      	str	r2, [sp, #8]
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f001 f808 	bl	800537c <xTaskCreateStatic>
 800436c:	4603      	mov	r3, r0
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	e013      	b.n	800439a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d110      	bne.n	800439a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	b29a      	uxth	r2, r3
 800437c:	f107 0310 	add.w	r3, r7, #16
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f001 f856 	bl	800543c <xTaskCreate>
 8004390:	4603      	mov	r3, r0
 8004392:	2b01      	cmp	r3, #1
 8004394:	d001      	beq.n	800439a <osThreadNew+0x11a>
            hTask = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800439a:	693b      	ldr	r3, [r7, #16]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3728      	adds	r7, #40	@ 0x28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ac:	f3ef 8305 	mrs	r3, IPSR
 80043b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80043b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <osDelay+0x1c>
    stat = osErrorISR;
 80043b8:	f06f 0305 	mvn.w	r3, #5
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e007      	b.n	80043d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f001 f97c 	bl	80056c8 <vTaskDelay>
    }
  }

  return (stat);
 80043d0:	68fb      	ldr	r3, [r7, #12]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80043da:	b580      	push	{r7, lr}
 80043dc:	b08a      	sub	sp, #40	@ 0x28
 80043de:	af02      	add	r7, sp, #8
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ea:	f3ef 8305 	mrs	r3, IPSR
 80043ee:	613b      	str	r3, [r7, #16]
  return(result);
 80043f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d15f      	bne.n	80044b6 <osMessageQueueNew+0xdc>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d05c      	beq.n	80044b6 <osMessageQueueNew+0xdc>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d059      	beq.n	80044b6 <osMessageQueueNew+0xdc>
    mem = -1;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d029      	beq.n	8004462 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d012      	beq.n	800443c <osMessageQueueNew+0x62>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b4f      	cmp	r3, #79	@ 0x4f
 800441c:	d90e      	bls.n	800443c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <osMessageQueueNew+0x62>
        mem = 1;
 8004436:	2301      	movs	r3, #1
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e014      	b.n	8004466 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d110      	bne.n	8004466 <osMessageQueueNew+0x8c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10c      	bne.n	8004466 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <osMessageQueueNew+0x8c>
          mem = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e001      	b.n	8004466 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10b      	bne.n	8004484 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2100      	movs	r1, #0
 8004476:	9100      	str	r1, [sp, #0]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fa30 	bl	80048e0 <xQueueGenericCreateStatic>
 8004480:	61f8      	str	r0, [r7, #28]
 8004482:	e008      	b.n	8004496 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800448a:	2200      	movs	r2, #0
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 faa3 	bl	80049da <xQueueGenericCreate>
 8004494:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <osMessageQueueNew+0xd0>
        name = attr->name;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e001      	b.n	80044ae <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80044ae:	6979      	ldr	r1, [r7, #20]
 80044b0:	69f8      	ldr	r0, [r7, #28]
 80044b2:	f000 ff05 	bl	80052c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80044b6:	69fb      	ldr	r3, [r7, #28]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044d8:	f3ef 8305 	mrs	r3, IPSR
 80044dc:	617b      	str	r3, [r7, #20]
  return(result);
 80044de:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d028      	beq.n	8004536 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <osMessageQueuePut+0x36>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <osMessageQueuePut+0x36>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80044f6:	f06f 0303 	mvn.w	r3, #3
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	e038      	b.n	8004570 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004502:	f107 0210 	add.w	r2, r7, #16
 8004506:	2300      	movs	r3, #0
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	69b8      	ldr	r0, [r7, #24]
 800450c:	f000 fbc6 	bl	8004c9c <xQueueGenericSendFromISR>
 8004510:	4603      	mov	r3, r0
 8004512:	2b01      	cmp	r3, #1
 8004514:	d003      	beq.n	800451e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004516:	f06f 0302 	mvn.w	r3, #2
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e028      	b.n	8004570 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d025      	beq.n	8004570 <osMessageQueuePut+0xb0>
 8004524:	4b15      	ldr	r3, [pc, #84]	@ (800457c <osMessageQueuePut+0xbc>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	e01c      	b.n	8004570 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <osMessageQueuePut+0x82>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004542:	f06f 0303 	mvn.w	r3, #3
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	e012      	b.n	8004570 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800454a:	2300      	movs	r3, #0
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	69b8      	ldr	r0, [r7, #24]
 8004552:	f000 faa1 	bl	8004a98 <xQueueGenericSend>
 8004556:	4603      	mov	r3, r0
 8004558:	2b01      	cmp	r3, #1
 800455a:	d009      	beq.n	8004570 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004562:	f06f 0301 	mvn.w	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	e002      	b.n	8004570 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800456a:	f06f 0302 	mvn.w	r3, #2
 800456e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004570:	69fb      	ldr	r3, [r7, #28]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004596:	f3ef 8305 	mrs	r3, IPSR
 800459a:	617b      	str	r3, [r7, #20]
  return(result);
 800459c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d028      	beq.n	80045f4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <osMessageQueueGet+0x34>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <osMessageQueueGet+0x34>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80045b4:	f06f 0303 	mvn.w	r3, #3
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	e037      	b.n	800462c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80045c0:	f107 0310 	add.w	r3, r7, #16
 80045c4:	461a      	mov	r2, r3
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	69b8      	ldr	r0, [r7, #24]
 80045ca:	f000 fce7 	bl	8004f9c <xQueueReceiveFromISR>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d003      	beq.n	80045dc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80045d4:	f06f 0302 	mvn.w	r3, #2
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e027      	b.n	800462c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d024      	beq.n	800462c <osMessageQueueGet+0xac>
 80045e2:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <osMessageQueueGet+0xb8>)
 80045e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	e01b      	b.n	800462c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <osMessageQueueGet+0x80>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d103      	bne.n	8004608 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004600:	f06f 0303 	mvn.w	r3, #3
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	e011      	b.n	800462c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	69b8      	ldr	r0, [r7, #24]
 800460e:	f000 fbe3 	bl	8004dd8 <xQueueReceive>
 8004612:	4603      	mov	r3, r0
 8004614:	2b01      	cmp	r3, #1
 8004616:	d009      	beq.n	800462c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800461e:	f06f 0301 	mvn.w	r3, #1
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	e002      	b.n	800462c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004626:	f06f 0302 	mvn.w	r3, #2
 800462a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800462c:	69fb      	ldr	r3, [r7, #28]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a07      	ldr	r2, [pc, #28]	@ (8004668 <vApplicationGetIdleTaskMemory+0x2c>)
 800464c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4a06      	ldr	r2, [pc, #24]	@ (800466c <vApplicationGetIdleTaskMemory+0x30>)
 8004652:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2280      	movs	r2, #128	@ 0x80
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000334 	.word	0x20000334
 800466c:	20000390 	.word	0x20000390

08004670 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4a07      	ldr	r2, [pc, #28]	@ (800469c <vApplicationGetTimerTaskMemory+0x2c>)
 8004680:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4a06      	ldr	r2, [pc, #24]	@ (80046a0 <vApplicationGetTimerTaskMemory+0x30>)
 8004686:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800468e:	601a      	str	r2, [r3, #0]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	20000590 	.word	0x20000590
 80046a0:	200005ec 	.word	0x200005ec

080046a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f103 0208 	add.w	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f103 0208 	add.w	r2, r3, #8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f103 0208 	add.w	r2, r3, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046fe:	b480      	push	{r7}
 8004700:	b085      	sub	sp, #20
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d103      	bne.n	8004766 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e00c      	b.n	8004780 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3308      	adds	r3, #8
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e002      	b.n	8004774 <vListInsert+0x2e>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	429a      	cmp	r2, r3
 800477e:	d2f6      	bcs.n	800476e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	601a      	str	r2, [r3, #0]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6892      	ldr	r2, [r2, #8]
 80047ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6852      	ldr	r2, [r2, #4]
 80047d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d103      	bne.n	80047ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	1e5a      	subs	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10b      	bne.n	8004838 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	e7fd      	b.n	8004834 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004838:	f002 f936 	bl	8006aa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004844:	68f9      	ldr	r1, [r7, #12]
 8004846:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	441a      	add	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004868:	3b01      	subs	r3, #1
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	441a      	add	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	22ff      	movs	r2, #255	@ 0xff
 800487c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	22ff      	movs	r2, #255	@ 0xff
 8004884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d114      	bne.n	80048b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01a      	beq.n	80048cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3310      	adds	r3, #16
 800489a:	4618      	mov	r0, r3
 800489c:	f001 f9d8 	bl	8005c50 <xTaskRemoveFromEventList>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d012      	beq.n	80048cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048a6:	4b0d      	ldr	r3, [pc, #52]	@ (80048dc <xQueueGenericReset+0xd0>)
 80048a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	e009      	b.n	80048cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3310      	adds	r3, #16
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fef1 	bl	80046a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3324      	adds	r3, #36	@ 0x24
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff feec 	bl	80046a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048cc:	f002 f91e 	bl	8006b0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048d0:	2301      	movs	r3, #1
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	e000ed04 	.word	0xe000ed04

080048e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08e      	sub	sp, #56	@ 0x38
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10b      	bne.n	800492a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <xQueueGenericCreateStatic+0x56>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <xQueueGenericCreateStatic+0x5a>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <xQueueGenericCreateStatic+0x5c>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10b      	bne.n	8004958 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	623b      	str	r3, [r7, #32]
}
 8004952:	bf00      	nop
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <xQueueGenericCreateStatic+0x84>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <xQueueGenericCreateStatic+0x88>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <xQueueGenericCreateStatic+0x8a>
 8004968:	2300      	movs	r3, #0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	61fb      	str	r3, [r7, #28]
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	e7fd      	b.n	8004982 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004986:	2350      	movs	r3, #80	@ 0x50
 8004988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b50      	cmp	r3, #80	@ 0x50
 800498e:	d00b      	beq.n	80049a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	61bb      	str	r3, [r7, #24]
}
 80049a2:	bf00      	nop
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80049ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00d      	beq.n	80049d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80049c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f840 	bl	8004a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3730      	adds	r7, #48	@ 0x30
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b08a      	sub	sp, #40	@ 0x28
 80049de:	af02      	add	r7, sp, #8
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	4613      	mov	r3, r2
 80049e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <xQueueGenericCreate+0x2c>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	613b      	str	r3, [r7, #16]
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	e7fd      	b.n	8004a02 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	3350      	adds	r3, #80	@ 0x50
 8004a14:	4618      	mov	r0, r3
 8004a16:	f002 f969 	bl	8006cec <pvPortMalloc>
 8004a1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d011      	beq.n	8004a46 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	3350      	adds	r3, #80	@ 0x50
 8004a2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a34:	79fa      	ldrb	r2, [r7, #7]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f805 	bl	8004a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a46:	69bb      	ldr	r3, [r7, #24]
	}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e002      	b.n	8004a72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a7e:	2101      	movs	r1, #1
 8004a80:	69b8      	ldr	r0, [r7, #24]
 8004a82:	f7ff fec3 	bl	800480c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08e      	sub	sp, #56	@ 0x38
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <xQueueGenericSend+0x34>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <xQueueGenericSend+0x42>
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <xQueueGenericSend+0x46>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <xQueueGenericSend+0x48>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <xQueueGenericSend+0x64>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d103      	bne.n	8004b0a <xQueueGenericSend+0x72>
 8004b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <xQueueGenericSend+0x76>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <xQueueGenericSend+0x78>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <xQueueGenericSend+0x94>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	623b      	str	r3, [r7, #32]
}
 8004b26:	bf00      	nop
 8004b28:	bf00      	nop
 8004b2a:	e7fd      	b.n	8004b28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b2c:	f001 fa50 	bl	8005fd0 <xTaskGetSchedulerState>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <xQueueGenericSend+0xa4>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <xQueueGenericSend+0xa8>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <xQueueGenericSend+0xaa>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <xQueueGenericSend+0xc6>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	61fb      	str	r3, [r7, #28]
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	e7fd      	b.n	8004b5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b5e:	f001 ffa3 	bl	8006aa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d302      	bcc.n	8004b74 <xQueueGenericSend+0xdc>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d129      	bne.n	8004bc8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b7a:	f000 fa91 	bl	80050a0 <prvCopyDataToQueue>
 8004b7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d010      	beq.n	8004baa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8a:	3324      	adds	r3, #36	@ 0x24
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 f85f 	bl	8005c50 <xTaskRemoveFromEventList>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d013      	beq.n	8004bc0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b98:	4b3f      	ldr	r3, [pc, #252]	@ (8004c98 <xQueueGenericSend+0x200>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	e00a      	b.n	8004bc0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bb0:	4b39      	ldr	r3, [pc, #228]	@ (8004c98 <xQueueGenericSend+0x200>)
 8004bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bc0:	f001 ffa4 	bl	8006b0c <vPortExitCritical>
				return pdPASS;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e063      	b.n	8004c90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bce:	f001 ff9d 	bl	8006b0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e05c      	b.n	8004c90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bdc:	f107 0314 	add.w	r3, r7, #20
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 f899 	bl	8005d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bea:	f001 ff8f 	bl	8006b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bee:	f000 fe09 	bl	8005804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bf2:	f001 ff59 	bl	8006aa8 <vPortEnterCritical>
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bfc:	b25b      	sxtb	r3, r3
 8004bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c02:	d103      	bne.n	8004c0c <xQueueGenericSend+0x174>
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c12:	b25b      	sxtb	r3, r3
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d103      	bne.n	8004c22 <xQueueGenericSend+0x18a>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c22:	f001 ff73 	bl	8006b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c26:	1d3a      	adds	r2, r7, #4
 8004c28:	f107 0314 	add.w	r3, r7, #20
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 f888 	bl	8005d44 <xTaskCheckForTimeOut>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d124      	bne.n	8004c84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c3c:	f000 fb28 	bl	8005290 <prvIsQueueFull>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d018      	beq.n	8004c78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	3310      	adds	r3, #16
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f000 ffac 	bl	8005bac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c56:	f000 fab3 	bl	80051c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c5a:	f000 fde1 	bl	8005820 <xTaskResumeAll>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f47f af7c 	bne.w	8004b5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c66:	4b0c      	ldr	r3, [pc, #48]	@ (8004c98 <xQueueGenericSend+0x200>)
 8004c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	e772      	b.n	8004b5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c7a:	f000 faa1 	bl	80051c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c7e:	f000 fdcf 	bl	8005820 <xTaskResumeAll>
 8004c82:	e76c      	b.n	8004b5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c86:	f000 fa9b 	bl	80051c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c8a:	f000 fdc9 	bl	8005820 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3738      	adds	r7, #56	@ 0x38
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	e000ed04 	.word	0xe000ed04

08004c9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b090      	sub	sp, #64	@ 0x40
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	e7fd      	b.n	8004cc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <xQueueGenericSendFromISR+0x3e>
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <xQueueGenericSendFromISR+0x42>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <xQueueGenericSendFromISR+0x44>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
 8004cfa:	e7fd      	b.n	8004cf8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d103      	bne.n	8004d0a <xQueueGenericSendFromISR+0x6e>
 8004d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <xQueueGenericSendFromISR+0x72>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <xQueueGenericSendFromISR+0x74>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	623b      	str	r3, [r7, #32]
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d2c:	f001 ff9c 	bl	8006c68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d30:	f3ef 8211 	mrs	r2, BASEPRI
 8004d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	61fa      	str	r2, [r7, #28]
 8004d46:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d302      	bcc.n	8004d5e <xQueueGenericSendFromISR+0xc2>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d12f      	bne.n	8004dbe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d74:	f000 f994 	bl	80050a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d112      	bne.n	8004da8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8c:	3324      	adds	r3, #36	@ 0x24
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 ff5e 	bl	8005c50 <xTaskRemoveFromEventList>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00e      	beq.n	8004db8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00b      	beq.n	8004db8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e007      	b.n	8004db8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004da8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004dac:	3301      	adds	r3, #1
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	b25a      	sxtb	r2, r3
 8004db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004db8:	2301      	movs	r3, #1
 8004dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004dbc:	e001      	b.n	8004dc2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3740      	adds	r7, #64	@ 0x40
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08c      	sub	sp, #48	@ 0x30
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10b      	bne.n	8004e0a <xQueueReceive+0x32>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	623b      	str	r3, [r7, #32]
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	e7fd      	b.n	8004e06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <xQueueReceive+0x40>
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <xQueueReceive+0x44>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <xQueueReceive+0x46>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <xQueueReceive+0x62>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	61fb      	str	r3, [r7, #28]
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e3a:	f001 f8c9 	bl	8005fd0 <xTaskGetSchedulerState>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <xQueueReceive+0x72>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <xQueueReceive+0x76>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <xQueueReceive+0x78>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <xQueueReceive+0x94>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	61bb      	str	r3, [r7, #24]
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e6c:	f001 fe1c 	bl	8006aa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01f      	beq.n	8004ebc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e80:	f000 f978 	bl	8005174 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	1e5a      	subs	r2, r3, #1
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00f      	beq.n	8004eb4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	3310      	adds	r3, #16
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fed9 	bl	8005c50 <xTaskRemoveFromEventList>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8004f98 <xQueueReceive+0x1c0>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004eb4:	f001 fe2a 	bl	8006b0c <vPortExitCritical>
				return pdPASS;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e069      	b.n	8004f90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ec2:	f001 fe23 	bl	8006b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e062      	b.n	8004f90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed0:	f107 0310 	add.w	r3, r7, #16
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 ff1f 	bl	8005d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eda:	2301      	movs	r3, #1
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ede:	f001 fe15 	bl	8006b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ee2:	f000 fc8f 	bl	8005804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ee6:	f001 fddf 	bl	8006aa8 <vPortEnterCritical>
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d103      	bne.n	8004f00 <xQueueReceive+0x128>
 8004ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f06:	b25b      	sxtb	r3, r3
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d103      	bne.n	8004f16 <xQueueReceive+0x13e>
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f16:	f001 fdf9 	bl	8006b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f1a:	1d3a      	adds	r2, r7, #4
 8004f1c:	f107 0310 	add.w	r3, r7, #16
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 ff0e 	bl	8005d44 <xTaskCheckForTimeOut>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d123      	bne.n	8004f76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f30:	f000 f998 	bl	8005264 <prvIsQueueEmpty>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d017      	beq.n	8004f6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	3324      	adds	r3, #36	@ 0x24
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fe32 	bl	8005bac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f4a:	f000 f939 	bl	80051c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f4e:	f000 fc67 	bl	8005820 <xTaskResumeAll>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d189      	bne.n	8004e6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f58:	4b0f      	ldr	r3, [pc, #60]	@ (8004f98 <xQueueReceive+0x1c0>)
 8004f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	e780      	b.n	8004e6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f6c:	f000 f928 	bl	80051c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f70:	f000 fc56 	bl	8005820 <xTaskResumeAll>
 8004f74:	e77a      	b.n	8004e6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f78:	f000 f922 	bl	80051c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f7c:	f000 fc50 	bl	8005820 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f82:	f000 f96f 	bl	8005264 <prvIsQueueEmpty>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f43f af6f 	beq.w	8004e6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3730      	adds	r7, #48	@ 0x30
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08e      	sub	sp, #56	@ 0x38
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10b      	bne.n	8004fca <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	623b      	str	r3, [r7, #32]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <xQueueReceiveFromISR+0x3c>
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <xQueueReceiveFromISR+0x40>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <xQueueReceiveFromISR+0x42>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10b      	bne.n	8004ffa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	61fb      	str	r3, [r7, #28]
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	e7fd      	b.n	8004ff6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ffa:	f001 fe35 	bl	8006c68 <vPortValidateInterruptPriority>
	__asm volatile
 8004ffe:	f3ef 8211 	mrs	r2, BASEPRI
 8005002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	61ba      	str	r2, [r7, #24]
 8005014:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005016:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005018:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02f      	beq.n	8005086 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005028:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800502c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005034:	f000 f89e 	bl	8005174 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005040:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d112      	bne.n	8005070 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005054:	3310      	adds	r3, #16
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fdfa 	bl	8005c50 <xTaskRemoveFromEventList>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00e      	beq.n	8005080 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	e007      	b.n	8005080 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005074:	3301      	adds	r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	b25a      	sxtb	r2, r3
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005080:	2301      	movs	r3, #1
 8005082:	637b      	str	r3, [r7, #52]	@ 0x34
 8005084:	e001      	b.n	800508a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005086:	2300      	movs	r3, #0
 8005088:	637b      	str	r3, [r7, #52]	@ 0x34
 800508a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f383 8811 	msr	BASEPRI, r3
}
 8005094:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005098:	4618      	mov	r0, r3
 800509a:	3738      	adds	r7, #56	@ 0x38
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d14d      	bne.n	8005162 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 ff9e 	bl	800600c <xTaskPriorityDisinherit>
 80050d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	e043      	b.n	8005162 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d119      	bne.n	8005114 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6858      	ldr	r0, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e8:	461a      	mov	r2, r3
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	f002 ffbb 	bl	8008066 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	441a      	add	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d32b      	bcc.n	8005162 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	e026      	b.n	8005162 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68d8      	ldr	r0, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	461a      	mov	r2, r3
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	f002 ffa1 	bl	8008066 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	425b      	negs	r3, r3
 800512e:	441a      	add	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d207      	bcs.n	8005150 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	425b      	negs	r3, r3
 800514a:	441a      	add	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d105      	bne.n	8005162 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3b01      	subs	r3, #1
 8005160:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800516a:	697b      	ldr	r3, [r7, #20]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d018      	beq.n	80051b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	441a      	add	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d303      	bcc.n	80051a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68d9      	ldr	r1, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b0:	461a      	mov	r2, r3
 80051b2:	6838      	ldr	r0, [r7, #0]
 80051b4:	f002 ff57 	bl	8008066 <memcpy>
	}
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051c8:	f001 fc6e 	bl	8006aa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051d4:	e011      	b.n	80051fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d012      	beq.n	8005204 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3324      	adds	r3, #36	@ 0x24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fd34 	bl	8005c50 <xTaskRemoveFromEventList>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051ee:	f000 fe0d 	bl	8005e0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dce9      	bgt.n	80051d6 <prvUnlockQueue+0x16>
 8005202:	e000      	b.n	8005206 <prvUnlockQueue+0x46>
					break;
 8005204:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	22ff      	movs	r2, #255	@ 0xff
 800520a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800520e:	f001 fc7d 	bl	8006b0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005212:	f001 fc49 	bl	8006aa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800521c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800521e:	e011      	b.n	8005244 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d012      	beq.n	800524e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3310      	adds	r3, #16
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fd0f 	bl	8005c50 <xTaskRemoveFromEventList>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005238:	f000 fde8 	bl	8005e0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800523c:	7bbb      	ldrb	r3, [r7, #14]
 800523e:	3b01      	subs	r3, #1
 8005240:	b2db      	uxtb	r3, r3
 8005242:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005248:	2b00      	cmp	r3, #0
 800524a:	dce9      	bgt.n	8005220 <prvUnlockQueue+0x60>
 800524c:	e000      	b.n	8005250 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800524e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	22ff      	movs	r2, #255	@ 0xff
 8005254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005258:	f001 fc58 	bl	8006b0c <vPortExitCritical>
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800526c:	f001 fc1c 	bl	8006aa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005278:	2301      	movs	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e001      	b.n	8005282 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005282:	f001 fc43 	bl	8006b0c <vPortExitCritical>

	return xReturn;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005298:	f001 fc06 	bl	8006aa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d102      	bne.n	80052ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	e001      	b.n	80052b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052b2:	f001 fc2b 	bl	8006b0c <vPortExitCritical>

	return xReturn;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e014      	b.n	80052fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052d0:	4a0f      	ldr	r2, [pc, #60]	@ (8005310 <vQueueAddToRegistry+0x50>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052dc:	490c      	ldr	r1, [pc, #48]	@ (8005310 <vQueueAddToRegistry+0x50>)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005310 <vQueueAddToRegistry+0x50>)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052f2:	e006      	b.n	8005302 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b07      	cmp	r3, #7
 80052fe:	d9e7      	bls.n	80052d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	200009ec 	.word	0x200009ec

08005314 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005324:	f001 fbc0 	bl	8006aa8 <vPortEnterCritical>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800532e:	b25b      	sxtb	r3, r3
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d103      	bne.n	800533e <vQueueWaitForMessageRestricted+0x2a>
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005344:	b25b      	sxtb	r3, r3
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d103      	bne.n	8005354 <vQueueWaitForMessageRestricted+0x40>
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005354:	f001 fbda 	bl	8006b0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	3324      	adds	r3, #36	@ 0x24
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 fc45 	bl	8005bf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800536e:	6978      	ldr	r0, [r7, #20]
 8005370:	f7ff ff26 	bl	80051c0 <prvUnlockQueue>
	}
 8005374:	bf00      	nop
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08e      	sub	sp, #56	@ 0x38
 8005380:	af04      	add	r7, sp, #16
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800538a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	623b      	str	r3, [r7, #32]
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61fb      	str	r3, [r7, #28]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053c6:	235c      	movs	r3, #92	@ 0x5c
 80053c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80053ce:	d00b      	beq.n	80053e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	61bb      	str	r3, [r7, #24]
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01e      	beq.n	800542e <xTaskCreateStatic+0xb2>
 80053f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01b      	beq.n	800542e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005408:	2300      	movs	r3, #0
 800540a:	9303      	str	r3, [sp, #12]
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	9302      	str	r3, [sp, #8]
 8005410:	f107 0314 	add.w	r3, r7, #20
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f850 	bl	80054c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005426:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005428:	f000 f8de 	bl	80055e8 <prvAddNewTaskToReadyList>
 800542c:	e001      	b.n	8005432 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005432:	697b      	ldr	r3, [r7, #20]
	}
 8005434:	4618      	mov	r0, r3
 8005436:	3728      	adds	r7, #40	@ 0x28
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08c      	sub	sp, #48	@ 0x30
 8005440:	af04      	add	r7, sp, #16
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4618      	mov	r0, r3
 8005452:	f001 fc4b 	bl	8006cec <pvPortMalloc>
 8005456:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00e      	beq.n	800547c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800545e:	205c      	movs	r0, #92	@ 0x5c
 8005460:	f001 fc44 	bl	8006cec <pvPortMalloc>
 8005464:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	631a      	str	r2, [r3, #48]	@ 0x30
 8005472:	e005      	b.n	8005480 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005474:	6978      	ldr	r0, [r7, #20]
 8005476:	f001 fd07 	bl	8006e88 <vPortFree>
 800547a:	e001      	b.n	8005480 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d017      	beq.n	80054b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800548e:	88fa      	ldrh	r2, [r7, #6]
 8005490:	2300      	movs	r3, #0
 8005492:	9303      	str	r3, [sp, #12]
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	9302      	str	r3, [sp, #8]
 8005498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f80e 	bl	80054c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054aa:	69f8      	ldr	r0, [r7, #28]
 80054ac:	f000 f89c 	bl	80055e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054b0:	2301      	movs	r3, #1
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	e002      	b.n	80054bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054b6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054bc:	69bb      	ldr	r3, [r7, #24]
	}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b088      	sub	sp, #32
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	461a      	mov	r2, r3
 80054de:	21a5      	movs	r1, #165	@ 0xa5
 80054e0:	f002 fd32 	bl	8007f48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054ee:	3b01      	subs	r3, #1
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f023 0307 	bic.w	r3, r3, #7
 80054fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	617b      	str	r3, [r7, #20]
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	e7fd      	b.n	800551c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01f      	beq.n	8005566 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	e012      	b.n	8005552 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	7819      	ldrb	r1, [r3, #0]
 8005534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	3334      	adds	r3, #52	@ 0x34
 800553c:	460a      	mov	r2, r1
 800553e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d006      	beq.n	800555a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	3301      	adds	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2b0f      	cmp	r3, #15
 8005556:	d9e9      	bls.n	800552c <prvInitialiseNewTask+0x66>
 8005558:	e000      	b.n	800555c <prvInitialiseNewTask+0x96>
			{
				break;
 800555a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005564:	e003      	b.n	800556e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	2b37      	cmp	r3, #55	@ 0x37
 8005572:	d901      	bls.n	8005578 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005574:	2337      	movs	r3, #55	@ 0x37
 8005576:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800557c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005582:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	2200      	movs	r2, #0
 8005588:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	3304      	adds	r3, #4
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff f8a8 	bl	80046e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	3318      	adds	r3, #24
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff f8a3 	bl	80046e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	2200      	movs	r2, #0
 80055b8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68f9      	ldr	r1, [r7, #12]
 80055c6:	69b8      	ldr	r0, [r7, #24]
 80055c8:	f001 f93e 	bl	8006848 <pxPortInitialiseStack>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055de:	bf00      	nop
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055f0:	f001 fa5a 	bl	8006aa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055f4:	4b2d      	ldr	r3, [pc, #180]	@ (80056ac <prvAddNewTaskToReadyList+0xc4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	4a2c      	ldr	r2, [pc, #176]	@ (80056ac <prvAddNewTaskToReadyList+0xc4>)
 80055fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055fe:	4b2c      	ldr	r3, [pc, #176]	@ (80056b0 <prvAddNewTaskToReadyList+0xc8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005606:	4a2a      	ldr	r2, [pc, #168]	@ (80056b0 <prvAddNewTaskToReadyList+0xc8>)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800560c:	4b27      	ldr	r3, [pc, #156]	@ (80056ac <prvAddNewTaskToReadyList+0xc4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d110      	bne.n	8005636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005614:	f000 fc1e 	bl	8005e54 <prvInitialiseTaskLists>
 8005618:	e00d      	b.n	8005636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800561a:	4b26      	ldr	r3, [pc, #152]	@ (80056b4 <prvAddNewTaskToReadyList+0xcc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005622:	4b23      	ldr	r3, [pc, #140]	@ (80056b0 <prvAddNewTaskToReadyList+0xc8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	429a      	cmp	r2, r3
 800562e:	d802      	bhi.n	8005636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005630:	4a1f      	ldr	r2, [pc, #124]	@ (80056b0 <prvAddNewTaskToReadyList+0xc8>)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005636:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <prvAddNewTaskToReadyList+0xd0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3301      	adds	r3, #1
 800563c:	4a1e      	ldr	r2, [pc, #120]	@ (80056b8 <prvAddNewTaskToReadyList+0xd0>)
 800563e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005640:	4b1d      	ldr	r3, [pc, #116]	@ (80056b8 <prvAddNewTaskToReadyList+0xd0>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564c:	4b1b      	ldr	r3, [pc, #108]	@ (80056bc <prvAddNewTaskToReadyList+0xd4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d903      	bls.n	800565c <prvAddNewTaskToReadyList+0x74>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	4a18      	ldr	r2, [pc, #96]	@ (80056bc <prvAddNewTaskToReadyList+0xd4>)
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4a15      	ldr	r2, [pc, #84]	@ (80056c0 <prvAddNewTaskToReadyList+0xd8>)
 800566a:	441a      	add	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3304      	adds	r3, #4
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f7ff f843 	bl	80046fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005678:	f001 fa48 	bl	8006b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800567c:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <prvAddNewTaskToReadyList+0xcc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00e      	beq.n	80056a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005684:	4b0a      	ldr	r3, [pc, #40]	@ (80056b0 <prvAddNewTaskToReadyList+0xc8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	429a      	cmp	r2, r3
 8005690:	d207      	bcs.n	80056a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <prvAddNewTaskToReadyList+0xdc>)
 8005694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000f00 	.word	0x20000f00
 80056b0:	20000a2c 	.word	0x20000a2c
 80056b4:	20000f0c 	.word	0x20000f0c
 80056b8:	20000f1c 	.word	0x20000f1c
 80056bc:	20000f08 	.word	0x20000f08
 80056c0:	20000a30 	.word	0x20000a30
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d018      	beq.n	800570c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056da:	4b14      	ldr	r3, [pc, #80]	@ (800572c <vTaskDelay+0x64>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <vTaskDelay+0x32>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60bb      	str	r3, [r7, #8]
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	e7fd      	b.n	80056f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056fa:	f000 f883 	bl	8005804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056fe:	2100      	movs	r1, #0
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fcf3 	bl	80060ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005706:	f000 f88b 	bl	8005820 <xTaskResumeAll>
 800570a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d107      	bne.n	8005722 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005712:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <vTaskDelay+0x68>)
 8005714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000f28 	.word	0x20000f28
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	@ 0x28
 8005738:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005742:	463a      	mov	r2, r7
 8005744:	1d39      	adds	r1, r7, #4
 8005746:	f107 0308 	add.w	r3, r7, #8
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe ff76 	bl	800463c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	9202      	str	r2, [sp, #8]
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	2300      	movs	r3, #0
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	2300      	movs	r3, #0
 8005760:	460a      	mov	r2, r1
 8005762:	4922      	ldr	r1, [pc, #136]	@ (80057ec <vTaskStartScheduler+0xb8>)
 8005764:	4822      	ldr	r0, [pc, #136]	@ (80057f0 <vTaskStartScheduler+0xbc>)
 8005766:	f7ff fe09 	bl	800537c <xTaskCreateStatic>
 800576a:	4603      	mov	r3, r0
 800576c:	4a21      	ldr	r2, [pc, #132]	@ (80057f4 <vTaskStartScheduler+0xc0>)
 800576e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005770:	4b20      	ldr	r3, [pc, #128]	@ (80057f4 <vTaskStartScheduler+0xc0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005778:	2301      	movs	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e001      	b.n	8005782 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d102      	bne.n	800578e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005788:	f000 fd04 	bl	8006194 <xTimerCreateTimerTask>
 800578c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d116      	bne.n	80057c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	613b      	str	r3, [r7, #16]
}
 80057a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057a8:	4b13      	ldr	r3, [pc, #76]	@ (80057f8 <vTaskStartScheduler+0xc4>)
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057b0:	4b12      	ldr	r3, [pc, #72]	@ (80057fc <vTaskStartScheduler+0xc8>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057b6:	4b12      	ldr	r3, [pc, #72]	@ (8005800 <vTaskStartScheduler+0xcc>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057bc:	f001 f8d0 	bl	8006960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057c0:	e00f      	b.n	80057e2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c8:	d10b      	bne.n	80057e2 <vTaskStartScheduler+0xae>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	60fb      	str	r3, [r7, #12]
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	e7fd      	b.n	80057de <vTaskStartScheduler+0xaa>
}
 80057e2:	bf00      	nop
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0800aea0 	.word	0x0800aea0
 80057f0:	08005e25 	.word	0x08005e25
 80057f4:	20000f24 	.word	0x20000f24
 80057f8:	20000f20 	.word	0x20000f20
 80057fc:	20000f0c 	.word	0x20000f0c
 8005800:	20000f04 	.word	0x20000f04

08005804 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005808:	4b04      	ldr	r3, [pc, #16]	@ (800581c <vTaskSuspendAll+0x18>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	4a03      	ldr	r2, [pc, #12]	@ (800581c <vTaskSuspendAll+0x18>)
 8005810:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005812:	bf00      	nop
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	20000f28 	.word	0x20000f28

08005820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800582e:	4b42      	ldr	r3, [pc, #264]	@ (8005938 <xTaskResumeAll+0x118>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <xTaskResumeAll+0x2e>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	603b      	str	r3, [r7, #0]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800584e:	f001 f92b 	bl	8006aa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005852:	4b39      	ldr	r3, [pc, #228]	@ (8005938 <xTaskResumeAll+0x118>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3b01      	subs	r3, #1
 8005858:	4a37      	ldr	r2, [pc, #220]	@ (8005938 <xTaskResumeAll+0x118>)
 800585a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585c:	4b36      	ldr	r3, [pc, #216]	@ (8005938 <xTaskResumeAll+0x118>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d162      	bne.n	800592a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005864:	4b35      	ldr	r3, [pc, #212]	@ (800593c <xTaskResumeAll+0x11c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d05e      	beq.n	800592a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800586c:	e02f      	b.n	80058ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800586e:	4b34      	ldr	r3, [pc, #208]	@ (8005940 <xTaskResumeAll+0x120>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3318      	adds	r3, #24
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe ff9c 	bl	80047b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3304      	adds	r3, #4
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe ff97 	bl	80047b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588e:	4b2d      	ldr	r3, [pc, #180]	@ (8005944 <xTaskResumeAll+0x124>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d903      	bls.n	800589e <xTaskResumeAll+0x7e>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	4a2a      	ldr	r2, [pc, #168]	@ (8005944 <xTaskResumeAll+0x124>)
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4a27      	ldr	r2, [pc, #156]	@ (8005948 <xTaskResumeAll+0x128>)
 80058ac:	441a      	add	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3304      	adds	r3, #4
 80058b2:	4619      	mov	r1, r3
 80058b4:	4610      	mov	r0, r2
 80058b6:	f7fe ff22 	bl	80046fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058be:	4b23      	ldr	r3, [pc, #140]	@ (800594c <xTaskResumeAll+0x12c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058c8:	4b21      	ldr	r3, [pc, #132]	@ (8005950 <xTaskResumeAll+0x130>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005940 <xTaskResumeAll+0x120>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1cb      	bne.n	800586e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058dc:	f000 fb58 	bl	8005f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005954 <xTaskResumeAll+0x134>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d010      	beq.n	800590e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058ec:	f000 f846 	bl	800597c <xTaskIncrementTick>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80058f6:	4b16      	ldr	r3, [pc, #88]	@ (8005950 <xTaskResumeAll+0x130>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3b01      	subs	r3, #1
 8005900:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f1      	bne.n	80058ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005908:	4b12      	ldr	r3, [pc, #72]	@ (8005954 <xTaskResumeAll+0x134>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800590e:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <xTaskResumeAll+0x130>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005916:	2301      	movs	r3, #1
 8005918:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800591a:	4b0f      	ldr	r3, [pc, #60]	@ (8005958 <xTaskResumeAll+0x138>)
 800591c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800592a:	f001 f8ef 	bl	8006b0c <vPortExitCritical>

	return xAlreadyYielded;
 800592e:	68bb      	ldr	r3, [r7, #8]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20000f28 	.word	0x20000f28
 800593c:	20000f00 	.word	0x20000f00
 8005940:	20000ec0 	.word	0x20000ec0
 8005944:	20000f08 	.word	0x20000f08
 8005948:	20000a30 	.word	0x20000a30
 800594c:	20000a2c 	.word	0x20000a2c
 8005950:	20000f14 	.word	0x20000f14
 8005954:	20000f10 	.word	0x20000f10
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005962:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <xTaskGetTickCount+0x1c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005968:	687b      	ldr	r3, [r7, #4]
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	20000f04 	.word	0x20000f04

0800597c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005986:	4b4f      	ldr	r3, [pc, #316]	@ (8005ac4 <xTaskIncrementTick+0x148>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f040 8090 	bne.w	8005ab0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005990:	4b4d      	ldr	r3, [pc, #308]	@ (8005ac8 <xTaskIncrementTick+0x14c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3301      	adds	r3, #1
 8005996:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005998:	4a4b      	ldr	r2, [pc, #300]	@ (8005ac8 <xTaskIncrementTick+0x14c>)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d121      	bne.n	80059e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059a4:	4b49      	ldr	r3, [pc, #292]	@ (8005acc <xTaskIncrementTick+0x150>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	603b      	str	r3, [r7, #0]
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	e7fd      	b.n	80059c2 <xTaskIncrementTick+0x46>
 80059c6:	4b41      	ldr	r3, [pc, #260]	@ (8005acc <xTaskIncrementTick+0x150>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	4b40      	ldr	r3, [pc, #256]	@ (8005ad0 <xTaskIncrementTick+0x154>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a3e      	ldr	r2, [pc, #248]	@ (8005acc <xTaskIncrementTick+0x150>)
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ad0 <xTaskIncrementTick+0x154>)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad4 <xTaskIncrementTick+0x158>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ad4 <xTaskIncrementTick+0x158>)
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	f000 fad4 	bl	8005f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059e8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ad8 <xTaskIncrementTick+0x15c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d349      	bcc.n	8005a86 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f2:	4b36      	ldr	r3, [pc, #216]	@ (8005acc <xTaskIncrementTick+0x150>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d104      	bne.n	8005a06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059fc:	4b36      	ldr	r3, [pc, #216]	@ (8005ad8 <xTaskIncrementTick+0x15c>)
 80059fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005a02:	601a      	str	r2, [r3, #0]
					break;
 8005a04:	e03f      	b.n	8005a86 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a06:	4b31      	ldr	r3, [pc, #196]	@ (8005acc <xTaskIncrementTick+0x150>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d203      	bcs.n	8005a26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad8 <xTaskIncrementTick+0x15c>)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a24:	e02f      	b.n	8005a86 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe fec4 	bl	80047b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d004      	beq.n	8005a42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	3318      	adds	r3, #24
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe febb 	bl	80047b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a46:	4b25      	ldr	r3, [pc, #148]	@ (8005adc <xTaskIncrementTick+0x160>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d903      	bls.n	8005a56 <xTaskIncrementTick+0xda>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a52:	4a22      	ldr	r2, [pc, #136]	@ (8005adc <xTaskIncrementTick+0x160>)
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae0 <xTaskIncrementTick+0x164>)
 8005a64:	441a      	add	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7fe fe46 	bl	80046fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a76:	4b1b      	ldr	r3, [pc, #108]	@ (8005ae4 <xTaskIncrementTick+0x168>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d3b8      	bcc.n	80059f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a84:	e7b5      	b.n	80059f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a86:	4b17      	ldr	r3, [pc, #92]	@ (8005ae4 <xTaskIncrementTick+0x168>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a8c:	4914      	ldr	r1, [pc, #80]	@ (8005ae0 <xTaskIncrementTick+0x164>)
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d901      	bls.n	8005aa2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005aa2:	4b11      	ldr	r3, [pc, #68]	@ (8005ae8 <xTaskIncrementTick+0x16c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e004      	b.n	8005aba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8005aec <xTaskIncrementTick+0x170>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8005aec <xTaskIncrementTick+0x170>)
 8005ab8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005aba:	697b      	ldr	r3, [r7, #20]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20000f28 	.word	0x20000f28
 8005ac8:	20000f04 	.word	0x20000f04
 8005acc:	20000eb8 	.word	0x20000eb8
 8005ad0:	20000ebc 	.word	0x20000ebc
 8005ad4:	20000f18 	.word	0x20000f18
 8005ad8:	20000f20 	.word	0x20000f20
 8005adc:	20000f08 	.word	0x20000f08
 8005ae0:	20000a30 	.word	0x20000a30
 8005ae4:	20000a2c 	.word	0x20000a2c
 8005ae8:	20000f14 	.word	0x20000f14
 8005aec:	20000f10 	.word	0x20000f10

08005af0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005af6:	4b28      	ldr	r3, [pc, #160]	@ (8005b98 <vTaskSwitchContext+0xa8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005afe:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <vTaskSwitchContext+0xac>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b04:	e042      	b.n	8005b8c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005b06:	4b25      	ldr	r3, [pc, #148]	@ (8005b9c <vTaskSwitchContext+0xac>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0c:	4b24      	ldr	r3, [pc, #144]	@ (8005ba0 <vTaskSwitchContext+0xb0>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e011      	b.n	8005b38 <vTaskSwitchContext+0x48>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10b      	bne.n	8005b32 <vTaskSwitchContext+0x42>
	__asm volatile
 8005b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	607b      	str	r3, [r7, #4]
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	e7fd      	b.n	8005b2e <vTaskSwitchContext+0x3e>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	491a      	ldr	r1, [pc, #104]	@ (8005ba4 <vTaskSwitchContext+0xb4>)
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0e3      	beq.n	8005b14 <vTaskSwitchContext+0x24>
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4a13      	ldr	r2, [pc, #76]	@ (8005ba4 <vTaskSwitchContext+0xb4>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d104      	bne.n	8005b7c <vTaskSwitchContext+0x8c>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	605a      	str	r2, [r3, #4]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4a09      	ldr	r2, [pc, #36]	@ (8005ba8 <vTaskSwitchContext+0xb8>)
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4a06      	ldr	r2, [pc, #24]	@ (8005ba0 <vTaskSwitchContext+0xb0>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6013      	str	r3, [r2, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	20000f28 	.word	0x20000f28
 8005b9c:	20000f14 	.word	0x20000f14
 8005ba0:	20000f08 	.word	0x20000f08
 8005ba4:	20000a30 	.word	0x20000a30
 8005ba8:	20000a2c 	.word	0x20000a2c

08005bac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	60fb      	str	r3, [r7, #12]
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bd4:	4b07      	ldr	r3, [pc, #28]	@ (8005bf4 <vTaskPlaceOnEventList+0x48>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3318      	adds	r3, #24
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7fe fdb2 	bl	8004746 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005be2:	2101      	movs	r1, #1
 8005be4:	6838      	ldr	r0, [r7, #0]
 8005be6:	f000 fa81 	bl	80060ec <prvAddCurrentTaskToDelayedList>
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000a2c 	.word	0x20000a2c

08005bf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	617b      	str	r3, [r7, #20]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c22:	4b0a      	ldr	r3, [pc, #40]	@ (8005c4c <vTaskPlaceOnEventListRestricted+0x54>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3318      	adds	r3, #24
 8005c28:	4619      	mov	r1, r3
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7fe fd67 	bl	80046fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	68b8      	ldr	r0, [r7, #8]
 8005c40:	f000 fa54 	bl	80060ec <prvAddCurrentTaskToDelayedList>
	}
 8005c44:	bf00      	nop
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000a2c 	.word	0x20000a2c

08005c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10b      	bne.n	8005c7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60fb      	str	r3, [r7, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	e7fd      	b.n	8005c7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	3318      	adds	r3, #24
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe fd98 	bl	80047b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c88:	4b1d      	ldr	r3, [pc, #116]	@ (8005d00 <xTaskRemoveFromEventList+0xb0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d11d      	bne.n	8005ccc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe fd8f 	bl	80047b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9e:	4b19      	ldr	r3, [pc, #100]	@ (8005d04 <xTaskRemoveFromEventList+0xb4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d903      	bls.n	8005cae <xTaskRemoveFromEventList+0x5e>
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	4a16      	ldr	r2, [pc, #88]	@ (8005d04 <xTaskRemoveFromEventList+0xb4>)
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4a13      	ldr	r2, [pc, #76]	@ (8005d08 <xTaskRemoveFromEventList+0xb8>)
 8005cbc:	441a      	add	r2, r3
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f7fe fd1a 	bl	80046fe <vListInsertEnd>
 8005cca:	e005      	b.n	8005cd8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	3318      	adds	r3, #24
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	480e      	ldr	r0, [pc, #56]	@ (8005d0c <xTaskRemoveFromEventList+0xbc>)
 8005cd4:	f7fe fd13 	bl	80046fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <xTaskRemoveFromEventList+0xc0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d905      	bls.n	8005cf2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cea:	4b0a      	ldr	r3, [pc, #40]	@ (8005d14 <xTaskRemoveFromEventList+0xc4>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	e001      	b.n	8005cf6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cf6:	697b      	ldr	r3, [r7, #20]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000f28 	.word	0x20000f28
 8005d04:	20000f08 	.word	0x20000f08
 8005d08:	20000a30 	.word	0x20000a30
 8005d0c:	20000ec0 	.word	0x20000ec0
 8005d10:	20000a2c 	.word	0x20000a2c
 8005d14:	20000f14 	.word	0x20000f14

08005d18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <vTaskInternalSetTimeOutState+0x24>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d28:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <vTaskInternalSetTimeOutState+0x28>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	605a      	str	r2, [r3, #4]
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20000f18 	.word	0x20000f18
 8005d40:	20000f04 	.word	0x20000f04

08005d44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	613b      	str	r3, [r7, #16]
}
 8005d66:	bf00      	nop
 8005d68:	bf00      	nop
 8005d6a:	e7fd      	b.n	8005d68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	60fb      	str	r3, [r7, #12]
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	e7fd      	b.n	8005d86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d8a:	f000 fe8d 	bl	8006aa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005e04 <xTaskCheckForTimeOut+0xc0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d102      	bne.n	8005dae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e023      	b.n	8005df6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b15      	ldr	r3, [pc, #84]	@ (8005e08 <xTaskCheckForTimeOut+0xc4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d007      	beq.n	8005dca <xTaskCheckForTimeOut+0x86>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d302      	bcc.n	8005dca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e015      	b.n	8005df6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d20b      	bcs.n	8005dec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff ff99 	bl	8005d18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	e004      	b.n	8005df6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005df2:	2301      	movs	r3, #1
 8005df4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005df6:	f000 fe89 	bl	8006b0c <vPortExitCritical>

	return xReturn;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3720      	adds	r7, #32
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20000f04 	.word	0x20000f04
 8005e08:	20000f18 	.word	0x20000f18

08005e0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e10:	4b03      	ldr	r3, [pc, #12]	@ (8005e20 <vTaskMissedYield+0x14>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
}
 8005e16:	bf00      	nop
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	20000f14 	.word	0x20000f14

08005e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e2c:	f000 f852 	bl	8005ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e30:	4b06      	ldr	r3, [pc, #24]	@ (8005e4c <prvIdleTask+0x28>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d9f9      	bls.n	8005e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e38:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <prvIdleTask+0x2c>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e48:	e7f0      	b.n	8005e2c <prvIdleTask+0x8>
 8005e4a:	bf00      	nop
 8005e4c:	20000a30 	.word	0x20000a30
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	e00c      	b.n	8005e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4a12      	ldr	r2, [pc, #72]	@ (8005eb4 <prvInitialiseTaskLists+0x60>)
 8005e6c:	4413      	add	r3, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe fc18 	bl	80046a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3301      	adds	r3, #1
 8005e78:	607b      	str	r3, [r7, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b37      	cmp	r3, #55	@ 0x37
 8005e7e:	d9ef      	bls.n	8005e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e80:	480d      	ldr	r0, [pc, #52]	@ (8005eb8 <prvInitialiseTaskLists+0x64>)
 8005e82:	f7fe fc0f 	bl	80046a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e86:	480d      	ldr	r0, [pc, #52]	@ (8005ebc <prvInitialiseTaskLists+0x68>)
 8005e88:	f7fe fc0c 	bl	80046a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e8c:	480c      	ldr	r0, [pc, #48]	@ (8005ec0 <prvInitialiseTaskLists+0x6c>)
 8005e8e:	f7fe fc09 	bl	80046a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e92:	480c      	ldr	r0, [pc, #48]	@ (8005ec4 <prvInitialiseTaskLists+0x70>)
 8005e94:	f7fe fc06 	bl	80046a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e98:	480b      	ldr	r0, [pc, #44]	@ (8005ec8 <prvInitialiseTaskLists+0x74>)
 8005e9a:	f7fe fc03 	bl	80046a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ecc <prvInitialiseTaskLists+0x78>)
 8005ea0:	4a05      	ldr	r2, [pc, #20]	@ (8005eb8 <prvInitialiseTaskLists+0x64>)
 8005ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <prvInitialiseTaskLists+0x7c>)
 8005ea6:	4a05      	ldr	r2, [pc, #20]	@ (8005ebc <prvInitialiseTaskLists+0x68>)
 8005ea8:	601a      	str	r2, [r3, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000a30 	.word	0x20000a30
 8005eb8:	20000e90 	.word	0x20000e90
 8005ebc:	20000ea4 	.word	0x20000ea4
 8005ec0:	20000ec0 	.word	0x20000ec0
 8005ec4:	20000ed4 	.word	0x20000ed4
 8005ec8:	20000eec 	.word	0x20000eec
 8005ecc:	20000eb8 	.word	0x20000eb8
 8005ed0:	20000ebc 	.word	0x20000ebc

08005ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eda:	e019      	b.n	8005f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005edc:	f000 fde4 	bl	8006aa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee0:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <prvCheckTasksWaitingTermination+0x50>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fc63 	bl	80047b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <prvCheckTasksWaitingTermination+0x54>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8005f28 <prvCheckTasksWaitingTermination+0x54>)
 8005efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005efc:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <prvCheckTasksWaitingTermination+0x58>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	4a0a      	ldr	r2, [pc, #40]	@ (8005f2c <prvCheckTasksWaitingTermination+0x58>)
 8005f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f06:	f000 fe01 	bl	8006b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f810 	bl	8005f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f10:	4b06      	ldr	r3, [pc, #24]	@ (8005f2c <prvCheckTasksWaitingTermination+0x58>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e1      	bne.n	8005edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000ed4 	.word	0x20000ed4
 8005f28:	20000f00 	.word	0x20000f00
 8005f2c:	20000ee8 	.word	0x20000ee8

08005f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d108      	bne.n	8005f54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 ff9e 	bl	8006e88 <vPortFree>
				vPortFree( pxTCB );
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 ff9b 	bl	8006e88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f52:	e019      	b.n	8005f88 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d103      	bne.n	8005f66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 ff92 	bl	8006e88 <vPortFree>
	}
 8005f64:	e010      	b.n	8005f88 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d00b      	beq.n	8005f88 <prvDeleteTCB+0x58>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <prvDeleteTCB+0x54>
	}
 8005f88:	bf00      	nop
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f96:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <prvResetNextTaskUnblockTime+0x38>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <prvResetNextTaskUnblockTime+0x3c>)
 8005fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fa8:	e008      	b.n	8005fbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005faa:	4b07      	ldr	r3, [pc, #28]	@ (8005fc8 <prvResetNextTaskUnblockTime+0x38>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4a04      	ldr	r2, [pc, #16]	@ (8005fcc <prvResetNextTaskUnblockTime+0x3c>)
 8005fba:	6013      	str	r3, [r2, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	20000eb8 	.word	0x20000eb8
 8005fcc:	20000f20 	.word	0x20000f20

08005fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006004 <xTaskGetSchedulerState+0x34>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d102      	bne.n	8005fe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	e008      	b.n	8005ff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fe4:	4b08      	ldr	r3, [pc, #32]	@ (8006008 <xTaskGetSchedulerState+0x38>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fec:	2302      	movs	r3, #2
 8005fee:	607b      	str	r3, [r7, #4]
 8005ff0:	e001      	b.n	8005ff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ff6:	687b      	ldr	r3, [r7, #4]
	}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	20000f0c 	.word	0x20000f0c
 8006008:	20000f28 	.word	0x20000f28

0800600c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d058      	beq.n	80060d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006022:	4b2f      	ldr	r3, [pc, #188]	@ (80060e0 <xTaskPriorityDisinherit+0xd4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	429a      	cmp	r2, r3
 800602a:	d00b      	beq.n	8006044 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60fb      	str	r3, [r7, #12]
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	e7fd      	b.n	8006040 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	60bb      	str	r3, [r7, #8]
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006068:	1e5a      	subs	r2, r3, #1
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006076:	429a      	cmp	r2, r3
 8006078:	d02c      	beq.n	80060d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800607e:	2b00      	cmp	r3, #0
 8006080:	d128      	bne.n	80060d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	3304      	adds	r3, #4
 8006086:	4618      	mov	r0, r3
 8006088:	f7fe fb96 	bl	80047b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a4:	4b0f      	ldr	r3, [pc, #60]	@ (80060e4 <xTaskPriorityDisinherit+0xd8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d903      	bls.n	80060b4 <xTaskPriorityDisinherit+0xa8>
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	4a0c      	ldr	r2, [pc, #48]	@ (80060e4 <xTaskPriorityDisinherit+0xd8>)
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4a09      	ldr	r2, [pc, #36]	@ (80060e8 <xTaskPriorityDisinherit+0xdc>)
 80060c2:	441a      	add	r2, r3
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7fe fb17 	bl	80046fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060d4:	697b      	ldr	r3, [r7, #20]
	}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000a2c 	.word	0x20000a2c
 80060e4:	20000f08 	.word	0x20000f08
 80060e8:	20000a30 	.word	0x20000a30

080060ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060f6:	4b21      	ldr	r3, [pc, #132]	@ (800617c <prvAddCurrentTaskToDelayedList+0x90>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060fc:	4b20      	ldr	r3, [pc, #128]	@ (8006180 <prvAddCurrentTaskToDelayedList+0x94>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3304      	adds	r3, #4
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe fb58 	bl	80047b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610e:	d10a      	bne.n	8006126 <prvAddCurrentTaskToDelayedList+0x3a>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006116:	4b1a      	ldr	r3, [pc, #104]	@ (8006180 <prvAddCurrentTaskToDelayedList+0x94>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4819      	ldr	r0, [pc, #100]	@ (8006184 <prvAddCurrentTaskToDelayedList+0x98>)
 8006120:	f7fe faed 	bl	80046fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006124:	e026      	b.n	8006174 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4413      	add	r3, r2
 800612c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800612e:	4b14      	ldr	r3, [pc, #80]	@ (8006180 <prvAddCurrentTaskToDelayedList+0x94>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	429a      	cmp	r2, r3
 800613c:	d209      	bcs.n	8006152 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800613e:	4b12      	ldr	r3, [pc, #72]	@ (8006188 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b0f      	ldr	r3, [pc, #60]	@ (8006180 <prvAddCurrentTaskToDelayedList+0x94>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fe fafb 	bl	8004746 <vListInsert>
}
 8006150:	e010      	b.n	8006174 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006152:	4b0e      	ldr	r3, [pc, #56]	@ (800618c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <prvAddCurrentTaskToDelayedList+0x94>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3304      	adds	r3, #4
 800615c:	4619      	mov	r1, r3
 800615e:	4610      	mov	r0, r2
 8006160:	f7fe faf1 	bl	8004746 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006164:	4b0a      	ldr	r3, [pc, #40]	@ (8006190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d202      	bcs.n	8006174 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800616e:	4a08      	ldr	r2, [pc, #32]	@ (8006190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6013      	str	r3, [r2, #0]
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000f04 	.word	0x20000f04
 8006180:	20000a2c 	.word	0x20000a2c
 8006184:	20000eec 	.word	0x20000eec
 8006188:	20000ebc 	.word	0x20000ebc
 800618c:	20000eb8 	.word	0x20000eb8
 8006190:	20000f20 	.word	0x20000f20

08006194 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	@ 0x28
 8006198:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800619e:	f000 fb13 	bl	80067c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006218 <xTimerCreateTimerTask+0x84>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d021      	beq.n	80061ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061b2:	1d3a      	adds	r2, r7, #4
 80061b4:	f107 0108 	add.w	r1, r7, #8
 80061b8:	f107 030c 	add.w	r3, r7, #12
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe fa57 	bl	8004670 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	9202      	str	r2, [sp, #8]
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	2302      	movs	r3, #2
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	2300      	movs	r3, #0
 80061d2:	460a      	mov	r2, r1
 80061d4:	4911      	ldr	r1, [pc, #68]	@ (800621c <xTimerCreateTimerTask+0x88>)
 80061d6:	4812      	ldr	r0, [pc, #72]	@ (8006220 <xTimerCreateTimerTask+0x8c>)
 80061d8:	f7ff f8d0 	bl	800537c <xTaskCreateStatic>
 80061dc:	4603      	mov	r3, r0
 80061de:	4a11      	ldr	r2, [pc, #68]	@ (8006224 <xTimerCreateTimerTask+0x90>)
 80061e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <xTimerCreateTimerTask+0x90>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061ea:	2301      	movs	r3, #1
 80061ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	613b      	str	r3, [r7, #16]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800620c:	697b      	ldr	r3, [r7, #20]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000f5c 	.word	0x20000f5c
 800621c:	0800aea8 	.word	0x0800aea8
 8006220:	08006361 	.word	0x08006361
 8006224:	20000f60 	.word	0x20000f60

08006228 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	@ 0x28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <xTimerGenericCommand+0x30>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	623b      	str	r3, [r7, #32]
}
 8006252:	bf00      	nop
 8006254:	bf00      	nop
 8006256:	e7fd      	b.n	8006254 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006258:	4b19      	ldr	r3, [pc, #100]	@ (80062c0 <xTimerGenericCommand+0x98>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d02a      	beq.n	80062b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b05      	cmp	r3, #5
 8006270:	dc18      	bgt.n	80062a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006272:	f7ff fead 	bl	8005fd0 <xTaskGetSchedulerState>
 8006276:	4603      	mov	r3, r0
 8006278:	2b02      	cmp	r3, #2
 800627a:	d109      	bne.n	8006290 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800627c:	4b10      	ldr	r3, [pc, #64]	@ (80062c0 <xTimerGenericCommand+0x98>)
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	f107 0110 	add.w	r1, r7, #16
 8006284:	2300      	movs	r3, #0
 8006286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006288:	f7fe fc06 	bl	8004a98 <xQueueGenericSend>
 800628c:	6278      	str	r0, [r7, #36]	@ 0x24
 800628e:	e012      	b.n	80062b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006290:	4b0b      	ldr	r3, [pc, #44]	@ (80062c0 <xTimerGenericCommand+0x98>)
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	f107 0110 	add.w	r1, r7, #16
 8006298:	2300      	movs	r3, #0
 800629a:	2200      	movs	r2, #0
 800629c:	f7fe fbfc 	bl	8004a98 <xQueueGenericSend>
 80062a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80062a2:	e008      	b.n	80062b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062a4:	4b06      	ldr	r3, [pc, #24]	@ (80062c0 <xTimerGenericCommand+0x98>)
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	f107 0110 	add.w	r1, r7, #16
 80062ac:	2300      	movs	r3, #0
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	f7fe fcf4 	bl	8004c9c <xQueueGenericSendFromISR>
 80062b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3728      	adds	r7, #40	@ 0x28
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000f5c 	.word	0x20000f5c

080062c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ce:	4b23      	ldr	r3, [pc, #140]	@ (800635c <prvProcessExpiredTimer+0x98>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	3304      	adds	r3, #4
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe fa6b 	bl	80047b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d023      	beq.n	8006338 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	18d1      	adds	r1, r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	6978      	ldr	r0, [r7, #20]
 80062fe:	f000 f8d5 	bl	80064ac <prvInsertTimerInActiveList>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d020      	beq.n	800634a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006308:	2300      	movs	r3, #0
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2300      	movs	r3, #0
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	2100      	movs	r1, #0
 8006312:	6978      	ldr	r0, [r7, #20]
 8006314:	f7ff ff88 	bl	8006228 <xTimerGenericCommand>
 8006318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d114      	bne.n	800634a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	60fb      	str	r3, [r7, #12]
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800633e:	f023 0301 	bic.w	r3, r3, #1
 8006342:	b2da      	uxtb	r2, r3
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	6978      	ldr	r0, [r7, #20]
 8006350:	4798      	blx	r3
}
 8006352:	bf00      	nop
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20000f54 	.word	0x20000f54

08006360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006368:	f107 0308 	add.w	r3, r7, #8
 800636c:	4618      	mov	r0, r3
 800636e:	f000 f859 	bl	8006424 <prvGetNextExpireTime>
 8006372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4619      	mov	r1, r3
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f805 	bl	8006388 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800637e:	f000 f8d7 	bl	8006530 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006382:	bf00      	nop
 8006384:	e7f0      	b.n	8006368 <prvTimerTask+0x8>
	...

08006388 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006392:	f7ff fa37 	bl	8005804 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006396:	f107 0308 	add.w	r3, r7, #8
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f866 	bl	800646c <prvSampleTimeNow>
 80063a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d130      	bne.n	800640a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <prvProcessTimerOrBlockTask+0x3c>
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d806      	bhi.n	80063c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063b6:	f7ff fa33 	bl	8005820 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff ff81 	bl	80062c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063c2:	e024      	b.n	800640e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d008      	beq.n	80063dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063ca:	4b13      	ldr	r3, [pc, #76]	@ (8006418 <prvProcessTimerOrBlockTask+0x90>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <prvProcessTimerOrBlockTask+0x50>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <prvProcessTimerOrBlockTask+0x52>
 80063d8:	2300      	movs	r3, #0
 80063da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063dc:	4b0f      	ldr	r3, [pc, #60]	@ (800641c <prvProcessTimerOrBlockTask+0x94>)
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	4619      	mov	r1, r3
 80063ea:	f7fe ff93 	bl	8005314 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063ee:	f7ff fa17 	bl	8005820 <xTaskResumeAll>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063f8:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <prvProcessTimerOrBlockTask+0x98>)
 80063fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	f3bf 8f6f 	isb	sy
}
 8006408:	e001      	b.n	800640e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800640a:	f7ff fa09 	bl	8005820 <xTaskResumeAll>
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000f58 	.word	0x20000f58
 800641c:	20000f5c 	.word	0x20000f5c
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800642c:	4b0e      	ldr	r3, [pc, #56]	@ (8006468 <prvGetNextExpireTime+0x44>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <prvGetNextExpireTime+0x16>
 8006436:	2201      	movs	r2, #1
 8006438:	e000      	b.n	800643c <prvGetNextExpireTime+0x18>
 800643a:	2200      	movs	r2, #0
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006448:	4b07      	ldr	r3, [pc, #28]	@ (8006468 <prvGetNextExpireTime+0x44>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e001      	b.n	8006458 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006458:	68fb      	ldr	r3, [r7, #12]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000f54 	.word	0x20000f54

0800646c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006474:	f7ff fa72 	bl	800595c <xTaskGetTickCount>
 8006478:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800647a:	4b0b      	ldr	r3, [pc, #44]	@ (80064a8 <prvSampleTimeNow+0x3c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	429a      	cmp	r2, r3
 8006482:	d205      	bcs.n	8006490 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006484:	f000 f93a 	bl	80066fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	e002      	b.n	8006496 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006496:	4a04      	ldr	r2, [pc, #16]	@ (80064a8 <prvSampleTimeNow+0x3c>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800649c:	68fb      	ldr	r3, [r7, #12]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000f64 	.word	0x20000f64

080064ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d812      	bhi.n	80064f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d302      	bcc.n	80064e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064e0:	2301      	movs	r3, #1
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e01b      	b.n	800651e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064e6:	4b10      	ldr	r3, [pc, #64]	@ (8006528 <prvInsertTimerInActiveList+0x7c>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3304      	adds	r3, #4
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f7fe f928 	bl	8004746 <vListInsert>
 80064f6:	e012      	b.n	800651e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d206      	bcs.n	800650e <prvInsertTimerInActiveList+0x62>
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d302      	bcc.n	800650e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006508:	2301      	movs	r3, #1
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e007      	b.n	800651e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800650e:	4b07      	ldr	r3, [pc, #28]	@ (800652c <prvInsertTimerInActiveList+0x80>)
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3304      	adds	r3, #4
 8006516:	4619      	mov	r1, r3
 8006518:	4610      	mov	r0, r2
 800651a:	f7fe f914 	bl	8004746 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800651e:	697b      	ldr	r3, [r7, #20]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20000f58 	.word	0x20000f58
 800652c:	20000f54 	.word	0x20000f54

08006530 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08e      	sub	sp, #56	@ 0x38
 8006534:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006536:	e0ce      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	da19      	bge.n	8006572 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800653e:	1d3b      	adds	r3, r7, #4
 8006540:	3304      	adds	r3, #4
 8006542:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	61fb      	str	r3, [r7, #28]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006568:	6850      	ldr	r0, [r2, #4]
 800656a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800656c:	6892      	ldr	r2, [r2, #8]
 800656e:	4611      	mov	r1, r2
 8006570:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f2c0 80ae 	blt.w	80066d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d004      	beq.n	8006590 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	3304      	adds	r3, #4
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe f914 	bl	80047b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006590:	463b      	mov	r3, r7
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff ff6a 	bl	800646c <prvSampleTimeNow>
 8006598:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b09      	cmp	r3, #9
 800659e:	f200 8097 	bhi.w	80066d0 <prvProcessReceivedCommands+0x1a0>
 80065a2:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <prvProcessReceivedCommands+0x78>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065d1 	.word	0x080065d1
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	080065d1 	.word	0x080065d1
 80065b4:	08006647 	.word	0x08006647
 80065b8:	0800665b 	.word	0x0800665b
 80065bc:	080066a7 	.word	0x080066a7
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	080065d1 	.word	0x080065d1
 80065c8:	08006647 	.word	0x08006647
 80065cc:	0800665b 	.word	0x0800665b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	18d1      	adds	r1, r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065f0:	f7ff ff5c 	bl	80064ac <prvInsertTimerInActiveList>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d06c      	beq.n	80066d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006600:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d061      	beq.n	80066d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	441a      	add	r2, r3
 8006618:	2300      	movs	r3, #0
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	2300      	movs	r3, #0
 800661e:	2100      	movs	r1, #0
 8006620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006622:	f7ff fe01 	bl	8006228 <xTimerGenericCommand>
 8006626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d152      	bne.n	80066d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	61bb      	str	r3, [r7, #24]
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	b2da      	uxtb	r2, r3
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006658:	e03d      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800665a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	b2da      	uxtb	r2, r3
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	617b      	str	r3, [r7, #20]
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	e7fd      	b.n	800668e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	18d1      	adds	r1, r2, r3
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800669e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066a0:	f7ff ff04 	bl	80064ac <prvInsertTimerInActiveList>
					break;
 80066a4:	e017      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d103      	bne.n	80066bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80066b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066b6:	f000 fbe7 	bl	8006e88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066ba:	e00c      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066ce:	e002      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80066d0:	bf00      	nop
 80066d2:	e000      	b.n	80066d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80066d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066d6:	4b08      	ldr	r3, [pc, #32]	@ (80066f8 <prvProcessReceivedCommands+0x1c8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	1d39      	adds	r1, r7, #4
 80066dc:	2200      	movs	r2, #0
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe fb7a 	bl	8004dd8 <xQueueReceive>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f47f af26 	bne.w	8006538 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	3730      	adds	r7, #48	@ 0x30
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000f5c 	.word	0x20000f5c

080066fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006702:	e049      	b.n	8006798 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006704:	4b2e      	ldr	r3, [pc, #184]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800670e:	4b2c      	ldr	r3, [pc, #176]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3304      	adds	r3, #4
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe f84b 	bl	80047b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d02f      	beq.n	8006798 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4413      	add	r3, r2
 8006740:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	429a      	cmp	r2, r3
 8006748:	d90e      	bls.n	8006768 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006756:	4b1a      	ldr	r3, [pc, #104]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3304      	adds	r3, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f7fd fff0 	bl	8004746 <vListInsert>
 8006766:	e017      	b.n	8006798 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006768:	2300      	movs	r3, #0
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2300      	movs	r3, #0
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	2100      	movs	r1, #0
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff fd58 	bl	8006228 <xTimerGenericCommand>
 8006778:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	603b      	str	r3, [r7, #0]
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006798:	4b09      	ldr	r3, [pc, #36]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1b0      	bne.n	8006704 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067a2:	4b07      	ldr	r3, [pc, #28]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067a8:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <prvSwitchTimerLists+0xc8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a04      	ldr	r2, [pc, #16]	@ (80067c0 <prvSwitchTimerLists+0xc4>)
 80067ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067b0:	4a04      	ldr	r2, [pc, #16]	@ (80067c4 <prvSwitchTimerLists+0xc8>)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	6013      	str	r3, [r2, #0]
}
 80067b6:	bf00      	nop
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000f54 	.word	0x20000f54
 80067c4:	20000f58 	.word	0x20000f58

080067c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067ce:	f000 f96b 	bl	8006aa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067d2:	4b15      	ldr	r3, [pc, #84]	@ (8006828 <prvCheckForValidListAndQueue+0x60>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d120      	bne.n	800681c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067da:	4814      	ldr	r0, [pc, #80]	@ (800682c <prvCheckForValidListAndQueue+0x64>)
 80067dc:	f7fd ff62 	bl	80046a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067e0:	4813      	ldr	r0, [pc, #76]	@ (8006830 <prvCheckForValidListAndQueue+0x68>)
 80067e2:	f7fd ff5f 	bl	80046a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067e6:	4b13      	ldr	r3, [pc, #76]	@ (8006834 <prvCheckForValidListAndQueue+0x6c>)
 80067e8:	4a10      	ldr	r2, [pc, #64]	@ (800682c <prvCheckForValidListAndQueue+0x64>)
 80067ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067ec:	4b12      	ldr	r3, [pc, #72]	@ (8006838 <prvCheckForValidListAndQueue+0x70>)
 80067ee:	4a10      	ldr	r2, [pc, #64]	@ (8006830 <prvCheckForValidListAndQueue+0x68>)
 80067f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067f2:	2300      	movs	r3, #0
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	4b11      	ldr	r3, [pc, #68]	@ (800683c <prvCheckForValidListAndQueue+0x74>)
 80067f8:	4a11      	ldr	r2, [pc, #68]	@ (8006840 <prvCheckForValidListAndQueue+0x78>)
 80067fa:	2110      	movs	r1, #16
 80067fc:	200a      	movs	r0, #10
 80067fe:	f7fe f86f 	bl	80048e0 <xQueueGenericCreateStatic>
 8006802:	4603      	mov	r3, r0
 8006804:	4a08      	ldr	r2, [pc, #32]	@ (8006828 <prvCheckForValidListAndQueue+0x60>)
 8006806:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006808:	4b07      	ldr	r3, [pc, #28]	@ (8006828 <prvCheckForValidListAndQueue+0x60>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006810:	4b05      	ldr	r3, [pc, #20]	@ (8006828 <prvCheckForValidListAndQueue+0x60>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	490b      	ldr	r1, [pc, #44]	@ (8006844 <prvCheckForValidListAndQueue+0x7c>)
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fd52 	bl	80052c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800681c:	f000 f976 	bl	8006b0c <vPortExitCritical>
}
 8006820:	bf00      	nop
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000f5c 	.word	0x20000f5c
 800682c:	20000f2c 	.word	0x20000f2c
 8006830:	20000f40 	.word	0x20000f40
 8006834:	20000f54 	.word	0x20000f54
 8006838:	20000f58 	.word	0x20000f58
 800683c:	20001008 	.word	0x20001008
 8006840:	20000f68 	.word	0x20000f68
 8006844:	0800aeb0 	.word	0x0800aeb0

08006848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3b04      	subs	r3, #4
 8006858:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3b04      	subs	r3, #4
 8006866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f023 0201 	bic.w	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3b04      	subs	r3, #4
 8006876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006878:	4a0c      	ldr	r2, [pc, #48]	@ (80068ac <pxPortInitialiseStack+0x64>)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3b14      	subs	r3, #20
 8006882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3b04      	subs	r3, #4
 800688e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f06f 0202 	mvn.w	r2, #2
 8006896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3b20      	subs	r3, #32
 800689c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800689e:	68fb      	ldr	r3, [r7, #12]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	080068b1 	.word	0x080068b1

080068b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068ba:	4b13      	ldr	r3, [pc, #76]	@ (8006908 <prvTaskExitError+0x58>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d00b      	beq.n	80068dc <prvTaskExitError+0x2c>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	60fb      	str	r3, [r7, #12]
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	e7fd      	b.n	80068d8 <prvTaskExitError+0x28>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	60bb      	str	r3, [r7, #8]
}
 80068ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068f0:	bf00      	nop
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0fc      	beq.n	80068f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	20000018 	.word	0x20000018
 800690c:	00000000 	.word	0x00000000

08006910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006910:	4b07      	ldr	r3, [pc, #28]	@ (8006930 <pxCurrentTCBConst2>)
 8006912:	6819      	ldr	r1, [r3, #0]
 8006914:	6808      	ldr	r0, [r1, #0]
 8006916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691a:	f380 8809 	msr	PSP, r0
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8811 	msr	BASEPRI, r0
 800692a:	4770      	bx	lr
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst2>:
 8006930:	20000a2c 	.word	0x20000a2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006938:	4808      	ldr	r0, [pc, #32]	@ (800695c <prvPortStartFirstTask+0x24>)
 800693a:	6800      	ldr	r0, [r0, #0]
 800693c:	6800      	ldr	r0, [r0, #0]
 800693e:	f380 8808 	msr	MSP, r0
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f380 8814 	msr	CONTROL, r0
 800694a:	b662      	cpsie	i
 800694c:	b661      	cpsie	f
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	df00      	svc	0
 8006958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800695a:	bf00      	nop
 800695c:	e000ed08 	.word	0xe000ed08

08006960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006966:	4b47      	ldr	r3, [pc, #284]	@ (8006a84 <xPortStartScheduler+0x124>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a47      	ldr	r2, [pc, #284]	@ (8006a88 <xPortStartScheduler+0x128>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10b      	bne.n	8006988 <xPortStartScheduler+0x28>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	613b      	str	r3, [r7, #16]
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	e7fd      	b.n	8006984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006988:	4b3e      	ldr	r3, [pc, #248]	@ (8006a84 <xPortStartScheduler+0x124>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a3f      	ldr	r2, [pc, #252]	@ (8006a8c <xPortStartScheduler+0x12c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d10b      	bne.n	80069aa <xPortStartScheduler+0x4a>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	60fb      	str	r3, [r7, #12]
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	e7fd      	b.n	80069a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069aa:	4b39      	ldr	r3, [pc, #228]	@ (8006a90 <xPortStartScheduler+0x130>)
 80069ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	22ff      	movs	r2, #255	@ 0xff
 80069ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	4b31      	ldr	r3, [pc, #196]	@ (8006a94 <xPortStartScheduler+0x134>)
 80069d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069d2:	4b31      	ldr	r3, [pc, #196]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069d4:	2207      	movs	r2, #7
 80069d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069d8:	e009      	b.n	80069ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80069da:	4b2f      	ldr	r3, [pc, #188]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3b01      	subs	r3, #1
 80069e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f6:	2b80      	cmp	r3, #128	@ 0x80
 80069f8:	d0ef      	beq.n	80069da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069fa:	4b27      	ldr	r3, [pc, #156]	@ (8006a98 <xPortStartScheduler+0x138>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1c3 0307 	rsb	r3, r3, #7
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d00b      	beq.n	8006a1e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	60bb      	str	r3, [r7, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	e7fd      	b.n	8006a1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	4a1c      	ldr	r2, [pc, #112]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a28:	4b1b      	ldr	r3, [pc, #108]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a30:	4a19      	ldr	r2, [pc, #100]	@ (8006a98 <xPortStartScheduler+0x138>)
 8006a32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a3c:	4b17      	ldr	r3, [pc, #92]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a16      	ldr	r2, [pc, #88]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a48:	4b14      	ldr	r3, [pc, #80]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a13      	ldr	r2, [pc, #76]	@ (8006a9c <xPortStartScheduler+0x13c>)
 8006a4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006a52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a54:	f000 f8da 	bl	8006c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a58:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <xPortStartScheduler+0x140>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a5e:	f000 f8f9 	bl	8006c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a62:	4b10      	ldr	r3, [pc, #64]	@ (8006aa4 <xPortStartScheduler+0x144>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a0f      	ldr	r2, [pc, #60]	@ (8006aa4 <xPortStartScheduler+0x144>)
 8006a68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006a6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a6e:	f7ff ff63 	bl	8006938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a72:	f7ff f83d 	bl	8005af0 <vTaskSwitchContext>
	prvTaskExitError();
 8006a76:	f7ff ff1b 	bl	80068b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	e000ed00 	.word	0xe000ed00
 8006a88:	410fc271 	.word	0x410fc271
 8006a8c:	410fc270 	.word	0x410fc270
 8006a90:	e000e400 	.word	0xe000e400
 8006a94:	20001058 	.word	0x20001058
 8006a98:	2000105c 	.word	0x2000105c
 8006a9c:	e000ed20 	.word	0xe000ed20
 8006aa0:	20000018 	.word	0x20000018
 8006aa4:	e000ef34 	.word	0xe000ef34

08006aa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	607b      	str	r3, [r7, #4]
}
 8006ac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ac2:	4b10      	ldr	r3, [pc, #64]	@ (8006b04 <vPortEnterCritical+0x5c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8006b04 <vPortEnterCritical+0x5c>)
 8006aca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006acc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <vPortEnterCritical+0x5c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d110      	bne.n	8006af6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b08 <vPortEnterCritical+0x60>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	603b      	str	r3, [r7, #0]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <vPortEnterCritical+0x4a>
	}
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000018 	.word	0x20000018
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b12:	4b12      	ldr	r3, [pc, #72]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10b      	bne.n	8006b32 <vPortExitCritical+0x26>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	607b      	str	r3, [r7, #4]
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	e7fd      	b.n	8006b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b32:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	4a08      	ldr	r2, [pc, #32]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b3c:	4b07      	ldr	r3, [pc, #28]	@ (8006b5c <vPortExitCritical+0x50>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d105      	bne.n	8006b50 <vPortExitCritical+0x44>
 8006b44:	2300      	movs	r3, #0
 8006b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f383 8811 	msr	BASEPRI, r3
}
 8006b4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	20000018 	.word	0x20000018

08006b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b60:	f3ef 8009 	mrs	r0, PSP
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	4b15      	ldr	r3, [pc, #84]	@ (8006bc0 <pxCurrentTCBConst>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	f01e 0f10 	tst.w	lr, #16
 8006b70:	bf08      	it	eq
 8006b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7a:	6010      	str	r0, [r2, #0]
 8006b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006b84:	f380 8811 	msr	BASEPRI, r0
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f7fe ffae 	bl	8005af0 <vTaskSwitchContext>
 8006b94:	f04f 0000 	mov.w	r0, #0
 8006b98:	f380 8811 	msr	BASEPRI, r0
 8006b9c:	bc09      	pop	{r0, r3}
 8006b9e:	6819      	ldr	r1, [r3, #0]
 8006ba0:	6808      	ldr	r0, [r1, #0]
 8006ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba6:	f01e 0f10 	tst.w	lr, #16
 8006baa:	bf08      	it	eq
 8006bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bb0:	f380 8809 	msr	PSP, r0
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	f3af 8000 	nop.w

08006bc0 <pxCurrentTCBConst>:
 8006bc0:	20000a2c 	.word	0x20000a2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop

08006bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
}
 8006be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006be2:	f7fe fecb 	bl	800597c <xTaskIncrementTick>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bec:	4b06      	ldr	r3, [pc, #24]	@ (8006c08 <xPortSysTickHandler+0x40>)
 8006bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	f383 8811 	msr	BASEPRI, r3
}
 8006bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	e000ed04 	.word	0xe000ed04

08006c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <vPortSetupTimerInterrupt+0x34>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c16:	4b0b      	ldr	r3, [pc, #44]	@ (8006c44 <vPortSetupTimerInterrupt+0x38>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c48 <vPortSetupTimerInterrupt+0x3c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a0a      	ldr	r2, [pc, #40]	@ (8006c4c <vPortSetupTimerInterrupt+0x40>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	099b      	lsrs	r3, r3, #6
 8006c28:	4a09      	ldr	r2, [pc, #36]	@ (8006c50 <vPortSetupTimerInterrupt+0x44>)
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c2e:	4b04      	ldr	r3, [pc, #16]	@ (8006c40 <vPortSetupTimerInterrupt+0x34>)
 8006c30:	2207      	movs	r2, #7
 8006c32:	601a      	str	r2, [r3, #0]
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	e000e010 	.word	0xe000e010
 8006c44:	e000e018 	.word	0xe000e018
 8006c48:	2000000c 	.word	0x2000000c
 8006c4c:	10624dd3 	.word	0x10624dd3
 8006c50:	e000e014 	.word	0xe000e014

08006c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006c64 <vPortEnableVFP+0x10>
 8006c58:	6801      	ldr	r1, [r0, #0]
 8006c5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c5e:	6001      	str	r1, [r0, #0]
 8006c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c62:	bf00      	nop
 8006c64:	e000ed88 	.word	0xe000ed88

08006c68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c6e:	f3ef 8305 	mrs	r3, IPSR
 8006c72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b0f      	cmp	r3, #15
 8006c78:	d915      	bls.n	8006ca6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c7a:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <vPortValidateInterruptPriority+0x74>)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c84:	4b16      	ldr	r3, [pc, #88]	@ (8006ce0 <vPortValidateInterruptPriority+0x78>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	7afa      	ldrb	r2, [r7, #11]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d20b      	bcs.n	8006ca6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	607b      	str	r3, [r7, #4]
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	e7fd      	b.n	8006ca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce4 <vPortValidateInterruptPriority+0x7c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ce8 <vPortValidateInterruptPriority+0x80>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d90b      	bls.n	8006cce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	603b      	str	r3, [r7, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <vPortValidateInterruptPriority+0x62>
	}
 8006cce:	bf00      	nop
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	e000e3f0 	.word	0xe000e3f0
 8006ce0:	20001058 	.word	0x20001058
 8006ce4:	e000ed0c 	.word	0xe000ed0c
 8006ce8:	2000105c 	.word	0x2000105c

08006cec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	@ 0x28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cf8:	f7fe fd84 	bl	8005804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cfc:	4b5c      	ldr	r3, [pc, #368]	@ (8006e70 <pvPortMalloc+0x184>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d04:	f000 f924 	bl	8006f50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d08:	4b5a      	ldr	r3, [pc, #360]	@ (8006e74 <pvPortMalloc+0x188>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f040 8095 	bne.w	8006e40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01e      	beq.n	8006d5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4413      	add	r3, r2
 8006d22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d015      	beq.n	8006d5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f023 0307 	bic.w	r3, r3, #7
 8006d34:	3308      	adds	r3, #8
 8006d36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <pvPortMalloc+0x6e>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	617b      	str	r3, [r7, #20]
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	e7fd      	b.n	8006d56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d06f      	beq.n	8006e40 <pvPortMalloc+0x154>
 8006d60:	4b45      	ldr	r3, [pc, #276]	@ (8006e78 <pvPortMalloc+0x18c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d86a      	bhi.n	8006e40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d6a:	4b44      	ldr	r3, [pc, #272]	@ (8006e7c <pvPortMalloc+0x190>)
 8006d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d6e:	4b43      	ldr	r3, [pc, #268]	@ (8006e7c <pvPortMalloc+0x190>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d74:	e004      	b.n	8006d80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d903      	bls.n	8006d92 <pvPortMalloc+0xa6>
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1f1      	bne.n	8006d76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d92:	4b37      	ldr	r3, [pc, #220]	@ (8006e70 <pvPortMalloc+0x184>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d051      	beq.n	8006e40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2208      	movs	r2, #8
 8006da2:	4413      	add	r3, r2
 8006da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	1ad2      	subs	r2, r2, r3
 8006db6:	2308      	movs	r3, #8
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d920      	bls.n	8006e00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <pvPortMalloc+0xfc>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	613b      	str	r3, [r7, #16]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	1ad2      	subs	r2, r2, r3
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dfa:	69b8      	ldr	r0, [r7, #24]
 8006dfc:	f000 f90a 	bl	8007014 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e00:	4b1d      	ldr	r3, [pc, #116]	@ (8006e78 <pvPortMalloc+0x18c>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e78 <pvPortMalloc+0x18c>)
 8006e0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e78 <pvPortMalloc+0x18c>)
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b1b      	ldr	r3, [pc, #108]	@ (8006e80 <pvPortMalloc+0x194>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d203      	bcs.n	8006e22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e1a:	4b17      	ldr	r3, [pc, #92]	@ (8006e78 <pvPortMalloc+0x18c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a18      	ldr	r2, [pc, #96]	@ (8006e80 <pvPortMalloc+0x194>)
 8006e20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	4b13      	ldr	r3, [pc, #76]	@ (8006e74 <pvPortMalloc+0x188>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e36:	4b13      	ldr	r3, [pc, #76]	@ (8006e84 <pvPortMalloc+0x198>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	4a11      	ldr	r2, [pc, #68]	@ (8006e84 <pvPortMalloc+0x198>)
 8006e3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e40:	f7fe fcee 	bl	8005820 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00b      	beq.n	8006e66 <pvPortMalloc+0x17a>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	60fb      	str	r3, [r7, #12]
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	e7fd      	b.n	8006e62 <pvPortMalloc+0x176>
	return pvReturn;
 8006e66:	69fb      	ldr	r3, [r7, #28]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3728      	adds	r7, #40	@ 0x28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20004c68 	.word	0x20004c68
 8006e74:	20004c7c 	.word	0x20004c7c
 8006e78:	20004c6c 	.word	0x20004c6c
 8006e7c:	20004c60 	.word	0x20004c60
 8006e80:	20004c70 	.word	0x20004c70
 8006e84:	20004c74 	.word	0x20004c74

08006e88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d04f      	beq.n	8006f3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e9a:	2308      	movs	r3, #8
 8006e9c:	425b      	negs	r3, r3
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	4b25      	ldr	r3, [pc, #148]	@ (8006f44 <vPortFree+0xbc>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10b      	bne.n	8006ece <vPortFree+0x46>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60fb      	str	r3, [r7, #12]
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	e7fd      	b.n	8006eca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <vPortFree+0x66>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	60bb      	str	r3, [r7, #8]
}
 8006ee8:	bf00      	nop
 8006eea:	bf00      	nop
 8006eec:	e7fd      	b.n	8006eea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	4b14      	ldr	r3, [pc, #80]	@ (8006f44 <vPortFree+0xbc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01e      	beq.n	8006f3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d11a      	bne.n	8006f3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	4b0e      	ldr	r3, [pc, #56]	@ (8006f44 <vPortFree+0xbc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	401a      	ands	r2, r3
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f14:	f7fe fc76 	bl	8005804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f48 <vPortFree+0xc0>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4413      	add	r3, r2
 8006f22:	4a09      	ldr	r2, [pc, #36]	@ (8006f48 <vPortFree+0xc0>)
 8006f24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f26:	6938      	ldr	r0, [r7, #16]
 8006f28:	f000 f874 	bl	8007014 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f2c:	4b07      	ldr	r3, [pc, #28]	@ (8006f4c <vPortFree+0xc4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3301      	adds	r3, #1
 8006f32:	4a06      	ldr	r2, [pc, #24]	@ (8006f4c <vPortFree+0xc4>)
 8006f34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f36:	f7fe fc73 	bl	8005820 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f3a:	bf00      	nop
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20004c7c 	.word	0x20004c7c
 8006f48:	20004c6c 	.word	0x20004c6c
 8006f4c:	20004c78 	.word	0x20004c78

08006f50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006f5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f5c:	4b27      	ldr	r3, [pc, #156]	@ (8006ffc <prvHeapInit+0xac>)
 8006f5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00c      	beq.n	8006f84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3307      	adds	r3, #7
 8006f6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 0307 	bic.w	r3, r3, #7
 8006f76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ffc <prvHeapInit+0xac>)
 8006f80:	4413      	add	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f88:	4a1d      	ldr	r2, [pc, #116]	@ (8007000 <prvHeapInit+0xb0>)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8007000 <prvHeapInit+0xb0>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	4413      	add	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f9c:	2208      	movs	r2, #8
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0307 	bic.w	r3, r3, #7
 8006faa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a15      	ldr	r2, [pc, #84]	@ (8007004 <prvHeapInit+0xb4>)
 8006fb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fb2:	4b14      	ldr	r3, [pc, #80]	@ (8007004 <prvHeapInit+0xb4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fba:	4b12      	ldr	r3, [pc, #72]	@ (8007004 <prvHeapInit+0xb4>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	1ad2      	subs	r2, r2, r3
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007004 <prvHeapInit+0xb4>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8007008 <prvHeapInit+0xb8>)
 8006fde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	4a09      	ldr	r2, [pc, #36]	@ (800700c <prvHeapInit+0xbc>)
 8006fe6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fe8:	4b09      	ldr	r3, [pc, #36]	@ (8007010 <prvHeapInit+0xc0>)
 8006fea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006fee:	601a      	str	r2, [r3, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	20001060 	.word	0x20001060
 8007000:	20004c60 	.word	0x20004c60
 8007004:	20004c68 	.word	0x20004c68
 8007008:	20004c70 	.word	0x20004c70
 800700c:	20004c6c 	.word	0x20004c6c
 8007010:	20004c7c 	.word	0x20004c7c

08007014 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800701c:	4b28      	ldr	r3, [pc, #160]	@ (80070c0 <prvInsertBlockIntoFreeList+0xac>)
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e002      	b.n	8007028 <prvInsertBlockIntoFreeList+0x14>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	429a      	cmp	r2, r3
 8007030:	d8f7      	bhi.n	8007022 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	429a      	cmp	r2, r3
 8007042:	d108      	bne.n	8007056 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	441a      	add	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	441a      	add	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d118      	bne.n	800709c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b15      	ldr	r3, [pc, #84]	@ (80070c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d00d      	beq.n	8007092 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	441a      	add	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	e008      	b.n	80070a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007092:	4b0c      	ldr	r3, [pc, #48]	@ (80070c4 <prvInsertBlockIntoFreeList+0xb0>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e003      	b.n	80070a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d002      	beq.n	80070b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070b2:	bf00      	nop
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	20004c60 	.word	0x20004c60
 80070c4:	20004c68 	.word	0x20004c68

080070c8 <malloc>:
 80070c8:	4b02      	ldr	r3, [pc, #8]	@ (80070d4 <malloc+0xc>)
 80070ca:	4601      	mov	r1, r0
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	f000 b82d 	b.w	800712c <_malloc_r>
 80070d2:	bf00      	nop
 80070d4:	20000028 	.word	0x20000028

080070d8 <free>:
 80070d8:	4b02      	ldr	r3, [pc, #8]	@ (80070e4 <free+0xc>)
 80070da:	4601      	mov	r1, r0
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	f001 be1f 	b.w	8008d20 <_free_r>
 80070e2:	bf00      	nop
 80070e4:	20000028 	.word	0x20000028

080070e8 <sbrk_aligned>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007128 <sbrk_aligned+0x40>)
 80070ec:	460c      	mov	r4, r1
 80070ee:	6831      	ldr	r1, [r6, #0]
 80070f0:	4605      	mov	r5, r0
 80070f2:	b911      	cbnz	r1, 80070fa <sbrk_aligned+0x12>
 80070f4:	f000 ff68 	bl	8007fc8 <_sbrk_r>
 80070f8:	6030      	str	r0, [r6, #0]
 80070fa:	4621      	mov	r1, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	f000 ff63 	bl	8007fc8 <_sbrk_r>
 8007102:	1c43      	adds	r3, r0, #1
 8007104:	d103      	bne.n	800710e <sbrk_aligned+0x26>
 8007106:	f04f 34ff 	mov.w	r4, #4294967295
 800710a:	4620      	mov	r0, r4
 800710c:	bd70      	pop	{r4, r5, r6, pc}
 800710e:	1cc4      	adds	r4, r0, #3
 8007110:	f024 0403 	bic.w	r4, r4, #3
 8007114:	42a0      	cmp	r0, r4
 8007116:	d0f8      	beq.n	800710a <sbrk_aligned+0x22>
 8007118:	1a21      	subs	r1, r4, r0
 800711a:	4628      	mov	r0, r5
 800711c:	f000 ff54 	bl	8007fc8 <_sbrk_r>
 8007120:	3001      	adds	r0, #1
 8007122:	d1f2      	bne.n	800710a <sbrk_aligned+0x22>
 8007124:	e7ef      	b.n	8007106 <sbrk_aligned+0x1e>
 8007126:	bf00      	nop
 8007128:	20004c80 	.word	0x20004c80

0800712c <_malloc_r>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	1ccd      	adds	r5, r1, #3
 8007132:	f025 0503 	bic.w	r5, r5, #3
 8007136:	3508      	adds	r5, #8
 8007138:	2d0c      	cmp	r5, #12
 800713a:	bf38      	it	cc
 800713c:	250c      	movcc	r5, #12
 800713e:	2d00      	cmp	r5, #0
 8007140:	4606      	mov	r6, r0
 8007142:	db01      	blt.n	8007148 <_malloc_r+0x1c>
 8007144:	42a9      	cmp	r1, r5
 8007146:	d904      	bls.n	8007152 <_malloc_r+0x26>
 8007148:	230c      	movs	r3, #12
 800714a:	6033      	str	r3, [r6, #0]
 800714c:	2000      	movs	r0, #0
 800714e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007228 <_malloc_r+0xfc>
 8007156:	f000 f869 	bl	800722c <__malloc_lock>
 800715a:	f8d8 3000 	ldr.w	r3, [r8]
 800715e:	461c      	mov	r4, r3
 8007160:	bb44      	cbnz	r4, 80071b4 <_malloc_r+0x88>
 8007162:	4629      	mov	r1, r5
 8007164:	4630      	mov	r0, r6
 8007166:	f7ff ffbf 	bl	80070e8 <sbrk_aligned>
 800716a:	1c43      	adds	r3, r0, #1
 800716c:	4604      	mov	r4, r0
 800716e:	d158      	bne.n	8007222 <_malloc_r+0xf6>
 8007170:	f8d8 4000 	ldr.w	r4, [r8]
 8007174:	4627      	mov	r7, r4
 8007176:	2f00      	cmp	r7, #0
 8007178:	d143      	bne.n	8007202 <_malloc_r+0xd6>
 800717a:	2c00      	cmp	r4, #0
 800717c:	d04b      	beq.n	8007216 <_malloc_r+0xea>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	4639      	mov	r1, r7
 8007182:	4630      	mov	r0, r6
 8007184:	eb04 0903 	add.w	r9, r4, r3
 8007188:	f000 ff1e 	bl	8007fc8 <_sbrk_r>
 800718c:	4581      	cmp	r9, r0
 800718e:	d142      	bne.n	8007216 <_malloc_r+0xea>
 8007190:	6821      	ldr	r1, [r4, #0]
 8007192:	1a6d      	subs	r5, r5, r1
 8007194:	4629      	mov	r1, r5
 8007196:	4630      	mov	r0, r6
 8007198:	f7ff ffa6 	bl	80070e8 <sbrk_aligned>
 800719c:	3001      	adds	r0, #1
 800719e:	d03a      	beq.n	8007216 <_malloc_r+0xea>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	442b      	add	r3, r5
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	f8d8 3000 	ldr.w	r3, [r8]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	bb62      	cbnz	r2, 8007208 <_malloc_r+0xdc>
 80071ae:	f8c8 7000 	str.w	r7, [r8]
 80071b2:	e00f      	b.n	80071d4 <_malloc_r+0xa8>
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	1b52      	subs	r2, r2, r5
 80071b8:	d420      	bmi.n	80071fc <_malloc_r+0xd0>
 80071ba:	2a0b      	cmp	r2, #11
 80071bc:	d917      	bls.n	80071ee <_malloc_r+0xc2>
 80071be:	1961      	adds	r1, r4, r5
 80071c0:	42a3      	cmp	r3, r4
 80071c2:	6025      	str	r5, [r4, #0]
 80071c4:	bf18      	it	ne
 80071c6:	6059      	strne	r1, [r3, #4]
 80071c8:	6863      	ldr	r3, [r4, #4]
 80071ca:	bf08      	it	eq
 80071cc:	f8c8 1000 	streq.w	r1, [r8]
 80071d0:	5162      	str	r2, [r4, r5]
 80071d2:	604b      	str	r3, [r1, #4]
 80071d4:	4630      	mov	r0, r6
 80071d6:	f000 f82f 	bl	8007238 <__malloc_unlock>
 80071da:	f104 000b 	add.w	r0, r4, #11
 80071de:	1d23      	adds	r3, r4, #4
 80071e0:	f020 0007 	bic.w	r0, r0, #7
 80071e4:	1ac2      	subs	r2, r0, r3
 80071e6:	bf1c      	itt	ne
 80071e8:	1a1b      	subne	r3, r3, r0
 80071ea:	50a3      	strne	r3, [r4, r2]
 80071ec:	e7af      	b.n	800714e <_malloc_r+0x22>
 80071ee:	6862      	ldr	r2, [r4, #4]
 80071f0:	42a3      	cmp	r3, r4
 80071f2:	bf0c      	ite	eq
 80071f4:	f8c8 2000 	streq.w	r2, [r8]
 80071f8:	605a      	strne	r2, [r3, #4]
 80071fa:	e7eb      	b.n	80071d4 <_malloc_r+0xa8>
 80071fc:	4623      	mov	r3, r4
 80071fe:	6864      	ldr	r4, [r4, #4]
 8007200:	e7ae      	b.n	8007160 <_malloc_r+0x34>
 8007202:	463c      	mov	r4, r7
 8007204:	687f      	ldr	r7, [r7, #4]
 8007206:	e7b6      	b.n	8007176 <_malloc_r+0x4a>
 8007208:	461a      	mov	r2, r3
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	42a3      	cmp	r3, r4
 800720e:	d1fb      	bne.n	8007208 <_malloc_r+0xdc>
 8007210:	2300      	movs	r3, #0
 8007212:	6053      	str	r3, [r2, #4]
 8007214:	e7de      	b.n	80071d4 <_malloc_r+0xa8>
 8007216:	230c      	movs	r3, #12
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	4630      	mov	r0, r6
 800721c:	f000 f80c 	bl	8007238 <__malloc_unlock>
 8007220:	e794      	b.n	800714c <_malloc_r+0x20>
 8007222:	6005      	str	r5, [r0, #0]
 8007224:	e7d6      	b.n	80071d4 <_malloc_r+0xa8>
 8007226:	bf00      	nop
 8007228:	20004c84 	.word	0x20004c84

0800722c <__malloc_lock>:
 800722c:	4801      	ldr	r0, [pc, #4]	@ (8007234 <__malloc_lock+0x8>)
 800722e:	f000 bf18 	b.w	8008062 <__retarget_lock_acquire_recursive>
 8007232:	bf00      	nop
 8007234:	20004dc8 	.word	0x20004dc8

08007238 <__malloc_unlock>:
 8007238:	4801      	ldr	r0, [pc, #4]	@ (8007240 <__malloc_unlock+0x8>)
 800723a:	f000 bf13 	b.w	8008064 <__retarget_lock_release_recursive>
 800723e:	bf00      	nop
 8007240:	20004dc8 	.word	0x20004dc8

08007244 <__cvt>:
 8007244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007248:	ec57 6b10 	vmov	r6, r7, d0
 800724c:	2f00      	cmp	r7, #0
 800724e:	460c      	mov	r4, r1
 8007250:	4619      	mov	r1, r3
 8007252:	463b      	mov	r3, r7
 8007254:	bfbb      	ittet	lt
 8007256:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800725a:	461f      	movlt	r7, r3
 800725c:	2300      	movge	r3, #0
 800725e:	232d      	movlt	r3, #45	@ 0x2d
 8007260:	700b      	strb	r3, [r1, #0]
 8007262:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007264:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007268:	4691      	mov	r9, r2
 800726a:	f023 0820 	bic.w	r8, r3, #32
 800726e:	bfbc      	itt	lt
 8007270:	4632      	movlt	r2, r6
 8007272:	4616      	movlt	r6, r2
 8007274:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007278:	d005      	beq.n	8007286 <__cvt+0x42>
 800727a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800727e:	d100      	bne.n	8007282 <__cvt+0x3e>
 8007280:	3401      	adds	r4, #1
 8007282:	2102      	movs	r1, #2
 8007284:	e000      	b.n	8007288 <__cvt+0x44>
 8007286:	2103      	movs	r1, #3
 8007288:	ab03      	add	r3, sp, #12
 800728a:	9301      	str	r3, [sp, #4]
 800728c:	ab02      	add	r3, sp, #8
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	ec47 6b10 	vmov	d0, r6, r7
 8007294:	4653      	mov	r3, sl
 8007296:	4622      	mov	r2, r4
 8007298:	f000 ff7e 	bl	8008198 <_dtoa_r>
 800729c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072a0:	4605      	mov	r5, r0
 80072a2:	d119      	bne.n	80072d8 <__cvt+0x94>
 80072a4:	f019 0f01 	tst.w	r9, #1
 80072a8:	d00e      	beq.n	80072c8 <__cvt+0x84>
 80072aa:	eb00 0904 	add.w	r9, r0, r4
 80072ae:	2200      	movs	r2, #0
 80072b0:	2300      	movs	r3, #0
 80072b2:	4630      	mov	r0, r6
 80072b4:	4639      	mov	r1, r7
 80072b6:	f7f9 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ba:	b108      	cbz	r0, 80072c0 <__cvt+0x7c>
 80072bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80072c0:	2230      	movs	r2, #48	@ 0x30
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	454b      	cmp	r3, r9
 80072c6:	d31e      	bcc.n	8007306 <__cvt+0xc2>
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072cc:	1b5b      	subs	r3, r3, r5
 80072ce:	4628      	mov	r0, r5
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	b004      	add	sp, #16
 80072d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072dc:	eb00 0904 	add.w	r9, r0, r4
 80072e0:	d1e5      	bne.n	80072ae <__cvt+0x6a>
 80072e2:	7803      	ldrb	r3, [r0, #0]
 80072e4:	2b30      	cmp	r3, #48	@ 0x30
 80072e6:	d10a      	bne.n	80072fe <__cvt+0xba>
 80072e8:	2200      	movs	r2, #0
 80072ea:	2300      	movs	r3, #0
 80072ec:	4630      	mov	r0, r6
 80072ee:	4639      	mov	r1, r7
 80072f0:	f7f9 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80072f4:	b918      	cbnz	r0, 80072fe <__cvt+0xba>
 80072f6:	f1c4 0401 	rsb	r4, r4, #1
 80072fa:	f8ca 4000 	str.w	r4, [sl]
 80072fe:	f8da 3000 	ldr.w	r3, [sl]
 8007302:	4499      	add	r9, r3
 8007304:	e7d3      	b.n	80072ae <__cvt+0x6a>
 8007306:	1c59      	adds	r1, r3, #1
 8007308:	9103      	str	r1, [sp, #12]
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	e7d9      	b.n	80072c2 <__cvt+0x7e>

0800730e <__exponent>:
 800730e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007310:	2900      	cmp	r1, #0
 8007312:	bfba      	itte	lt
 8007314:	4249      	neglt	r1, r1
 8007316:	232d      	movlt	r3, #45	@ 0x2d
 8007318:	232b      	movge	r3, #43	@ 0x2b
 800731a:	2909      	cmp	r1, #9
 800731c:	7002      	strb	r2, [r0, #0]
 800731e:	7043      	strb	r3, [r0, #1]
 8007320:	dd29      	ble.n	8007376 <__exponent+0x68>
 8007322:	f10d 0307 	add.w	r3, sp, #7
 8007326:	461d      	mov	r5, r3
 8007328:	270a      	movs	r7, #10
 800732a:	461a      	mov	r2, r3
 800732c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007330:	fb07 1416 	mls	r4, r7, r6, r1
 8007334:	3430      	adds	r4, #48	@ 0x30
 8007336:	f802 4c01 	strb.w	r4, [r2, #-1]
 800733a:	460c      	mov	r4, r1
 800733c:	2c63      	cmp	r4, #99	@ 0x63
 800733e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007342:	4631      	mov	r1, r6
 8007344:	dcf1      	bgt.n	800732a <__exponent+0x1c>
 8007346:	3130      	adds	r1, #48	@ 0x30
 8007348:	1e94      	subs	r4, r2, #2
 800734a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800734e:	1c41      	adds	r1, r0, #1
 8007350:	4623      	mov	r3, r4
 8007352:	42ab      	cmp	r3, r5
 8007354:	d30a      	bcc.n	800736c <__exponent+0x5e>
 8007356:	f10d 0309 	add.w	r3, sp, #9
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	42ac      	cmp	r4, r5
 800735e:	bf88      	it	hi
 8007360:	2300      	movhi	r3, #0
 8007362:	3302      	adds	r3, #2
 8007364:	4403      	add	r3, r0
 8007366:	1a18      	subs	r0, r3, r0
 8007368:	b003      	add	sp, #12
 800736a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800736c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007370:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007374:	e7ed      	b.n	8007352 <__exponent+0x44>
 8007376:	2330      	movs	r3, #48	@ 0x30
 8007378:	3130      	adds	r1, #48	@ 0x30
 800737a:	7083      	strb	r3, [r0, #2]
 800737c:	70c1      	strb	r1, [r0, #3]
 800737e:	1d03      	adds	r3, r0, #4
 8007380:	e7f1      	b.n	8007366 <__exponent+0x58>
	...

08007384 <_printf_float>:
 8007384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	b08d      	sub	sp, #52	@ 0x34
 800738a:	460c      	mov	r4, r1
 800738c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007390:	4616      	mov	r6, r2
 8007392:	461f      	mov	r7, r3
 8007394:	4605      	mov	r5, r0
 8007396:	f000 fddf 	bl	8007f58 <_localeconv_r>
 800739a:	6803      	ldr	r3, [r0, #0]
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	4618      	mov	r0, r3
 80073a0:	f7f8 ff66 	bl	8000270 <strlen>
 80073a4:	2300      	movs	r3, #0
 80073a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073a8:	f8d8 3000 	ldr.w	r3, [r8]
 80073ac:	9005      	str	r0, [sp, #20]
 80073ae:	3307      	adds	r3, #7
 80073b0:	f023 0307 	bic.w	r3, r3, #7
 80073b4:	f103 0208 	add.w	r2, r3, #8
 80073b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80073bc:	f8d4 b000 	ldr.w	fp, [r4]
 80073c0:	f8c8 2000 	str.w	r2, [r8]
 80073c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80073cc:	9307      	str	r3, [sp, #28]
 80073ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80073d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80073d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073da:	4b9c      	ldr	r3, [pc, #624]	@ (800764c <_printf_float+0x2c8>)
 80073dc:	f04f 32ff 	mov.w	r2, #4294967295
 80073e0:	f7f9 fba4 	bl	8000b2c <__aeabi_dcmpun>
 80073e4:	bb70      	cbnz	r0, 8007444 <_printf_float+0xc0>
 80073e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ea:	4b98      	ldr	r3, [pc, #608]	@ (800764c <_printf_float+0x2c8>)
 80073ec:	f04f 32ff 	mov.w	r2, #4294967295
 80073f0:	f7f9 fb7e 	bl	8000af0 <__aeabi_dcmple>
 80073f4:	bb30      	cbnz	r0, 8007444 <_printf_float+0xc0>
 80073f6:	2200      	movs	r2, #0
 80073f8:	2300      	movs	r3, #0
 80073fa:	4640      	mov	r0, r8
 80073fc:	4649      	mov	r1, r9
 80073fe:	f7f9 fb6d 	bl	8000adc <__aeabi_dcmplt>
 8007402:	b110      	cbz	r0, 800740a <_printf_float+0x86>
 8007404:	232d      	movs	r3, #45	@ 0x2d
 8007406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800740a:	4a91      	ldr	r2, [pc, #580]	@ (8007650 <_printf_float+0x2cc>)
 800740c:	4b91      	ldr	r3, [pc, #580]	@ (8007654 <_printf_float+0x2d0>)
 800740e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007412:	bf94      	ite	ls
 8007414:	4690      	movls	r8, r2
 8007416:	4698      	movhi	r8, r3
 8007418:	2303      	movs	r3, #3
 800741a:	6123      	str	r3, [r4, #16]
 800741c:	f02b 0304 	bic.w	r3, fp, #4
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	f04f 0900 	mov.w	r9, #0
 8007426:	9700      	str	r7, [sp, #0]
 8007428:	4633      	mov	r3, r6
 800742a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800742c:	4621      	mov	r1, r4
 800742e:	4628      	mov	r0, r5
 8007430:	f000 f9d2 	bl	80077d8 <_printf_common>
 8007434:	3001      	adds	r0, #1
 8007436:	f040 808d 	bne.w	8007554 <_printf_float+0x1d0>
 800743a:	f04f 30ff 	mov.w	r0, #4294967295
 800743e:	b00d      	add	sp, #52	@ 0x34
 8007440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007444:	4642      	mov	r2, r8
 8007446:	464b      	mov	r3, r9
 8007448:	4640      	mov	r0, r8
 800744a:	4649      	mov	r1, r9
 800744c:	f7f9 fb6e 	bl	8000b2c <__aeabi_dcmpun>
 8007450:	b140      	cbz	r0, 8007464 <_printf_float+0xe0>
 8007452:	464b      	mov	r3, r9
 8007454:	2b00      	cmp	r3, #0
 8007456:	bfbc      	itt	lt
 8007458:	232d      	movlt	r3, #45	@ 0x2d
 800745a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800745e:	4a7e      	ldr	r2, [pc, #504]	@ (8007658 <_printf_float+0x2d4>)
 8007460:	4b7e      	ldr	r3, [pc, #504]	@ (800765c <_printf_float+0x2d8>)
 8007462:	e7d4      	b.n	800740e <_printf_float+0x8a>
 8007464:	6863      	ldr	r3, [r4, #4]
 8007466:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800746a:	9206      	str	r2, [sp, #24]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	d13b      	bne.n	80074e8 <_printf_float+0x164>
 8007470:	2306      	movs	r3, #6
 8007472:	6063      	str	r3, [r4, #4]
 8007474:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007478:	2300      	movs	r3, #0
 800747a:	6022      	str	r2, [r4, #0]
 800747c:	9303      	str	r3, [sp, #12]
 800747e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007480:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007484:	ab09      	add	r3, sp, #36	@ 0x24
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	6861      	ldr	r1, [r4, #4]
 800748a:	ec49 8b10 	vmov	d0, r8, r9
 800748e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007492:	4628      	mov	r0, r5
 8007494:	f7ff fed6 	bl	8007244 <__cvt>
 8007498:	9b06      	ldr	r3, [sp, #24]
 800749a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800749c:	2b47      	cmp	r3, #71	@ 0x47
 800749e:	4680      	mov	r8, r0
 80074a0:	d129      	bne.n	80074f6 <_printf_float+0x172>
 80074a2:	1cc8      	adds	r0, r1, #3
 80074a4:	db02      	blt.n	80074ac <_printf_float+0x128>
 80074a6:	6863      	ldr	r3, [r4, #4]
 80074a8:	4299      	cmp	r1, r3
 80074aa:	dd41      	ble.n	8007530 <_printf_float+0x1ac>
 80074ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80074b0:	fa5f fa8a 	uxtb.w	sl, sl
 80074b4:	3901      	subs	r1, #1
 80074b6:	4652      	mov	r2, sl
 80074b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80074bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80074be:	f7ff ff26 	bl	800730e <__exponent>
 80074c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074c4:	1813      	adds	r3, r2, r0
 80074c6:	2a01      	cmp	r2, #1
 80074c8:	4681      	mov	r9, r0
 80074ca:	6123      	str	r3, [r4, #16]
 80074cc:	dc02      	bgt.n	80074d4 <_printf_float+0x150>
 80074ce:	6822      	ldr	r2, [r4, #0]
 80074d0:	07d2      	lsls	r2, r2, #31
 80074d2:	d501      	bpl.n	80074d8 <_printf_float+0x154>
 80074d4:	3301      	adds	r3, #1
 80074d6:	6123      	str	r3, [r4, #16]
 80074d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0a2      	beq.n	8007426 <_printf_float+0xa2>
 80074e0:	232d      	movs	r3, #45	@ 0x2d
 80074e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074e6:	e79e      	b.n	8007426 <_printf_float+0xa2>
 80074e8:	9a06      	ldr	r2, [sp, #24]
 80074ea:	2a47      	cmp	r2, #71	@ 0x47
 80074ec:	d1c2      	bne.n	8007474 <_printf_float+0xf0>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1c0      	bne.n	8007474 <_printf_float+0xf0>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e7bd      	b.n	8007472 <_printf_float+0xee>
 80074f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074fa:	d9db      	bls.n	80074b4 <_printf_float+0x130>
 80074fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007500:	d118      	bne.n	8007534 <_printf_float+0x1b0>
 8007502:	2900      	cmp	r1, #0
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	dd0b      	ble.n	8007520 <_printf_float+0x19c>
 8007508:	6121      	str	r1, [r4, #16]
 800750a:	b913      	cbnz	r3, 8007512 <_printf_float+0x18e>
 800750c:	6822      	ldr	r2, [r4, #0]
 800750e:	07d0      	lsls	r0, r2, #31
 8007510:	d502      	bpl.n	8007518 <_printf_float+0x194>
 8007512:	3301      	adds	r3, #1
 8007514:	440b      	add	r3, r1
 8007516:	6123      	str	r3, [r4, #16]
 8007518:	65a1      	str	r1, [r4, #88]	@ 0x58
 800751a:	f04f 0900 	mov.w	r9, #0
 800751e:	e7db      	b.n	80074d8 <_printf_float+0x154>
 8007520:	b913      	cbnz	r3, 8007528 <_printf_float+0x1a4>
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	07d2      	lsls	r2, r2, #31
 8007526:	d501      	bpl.n	800752c <_printf_float+0x1a8>
 8007528:	3302      	adds	r3, #2
 800752a:	e7f4      	b.n	8007516 <_printf_float+0x192>
 800752c:	2301      	movs	r3, #1
 800752e:	e7f2      	b.n	8007516 <_printf_float+0x192>
 8007530:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007536:	4299      	cmp	r1, r3
 8007538:	db05      	blt.n	8007546 <_printf_float+0x1c2>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	6121      	str	r1, [r4, #16]
 800753e:	07d8      	lsls	r0, r3, #31
 8007540:	d5ea      	bpl.n	8007518 <_printf_float+0x194>
 8007542:	1c4b      	adds	r3, r1, #1
 8007544:	e7e7      	b.n	8007516 <_printf_float+0x192>
 8007546:	2900      	cmp	r1, #0
 8007548:	bfd4      	ite	le
 800754a:	f1c1 0202 	rsble	r2, r1, #2
 800754e:	2201      	movgt	r2, #1
 8007550:	4413      	add	r3, r2
 8007552:	e7e0      	b.n	8007516 <_printf_float+0x192>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	055a      	lsls	r2, r3, #21
 8007558:	d407      	bmi.n	800756a <_printf_float+0x1e6>
 800755a:	6923      	ldr	r3, [r4, #16]
 800755c:	4642      	mov	r2, r8
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	47b8      	blx	r7
 8007564:	3001      	adds	r0, #1
 8007566:	d12b      	bne.n	80075c0 <_printf_float+0x23c>
 8007568:	e767      	b.n	800743a <_printf_float+0xb6>
 800756a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800756e:	f240 80dd 	bls.w	800772c <_printf_float+0x3a8>
 8007572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007576:	2200      	movs	r2, #0
 8007578:	2300      	movs	r3, #0
 800757a:	f7f9 faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800757e:	2800      	cmp	r0, #0
 8007580:	d033      	beq.n	80075ea <_printf_float+0x266>
 8007582:	4a37      	ldr	r2, [pc, #220]	@ (8007660 <_printf_float+0x2dc>)
 8007584:	2301      	movs	r3, #1
 8007586:	4631      	mov	r1, r6
 8007588:	4628      	mov	r0, r5
 800758a:	47b8      	blx	r7
 800758c:	3001      	adds	r0, #1
 800758e:	f43f af54 	beq.w	800743a <_printf_float+0xb6>
 8007592:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007596:	4543      	cmp	r3, r8
 8007598:	db02      	blt.n	80075a0 <_printf_float+0x21c>
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	07d8      	lsls	r0, r3, #31
 800759e:	d50f      	bpl.n	80075c0 <_printf_float+0x23c>
 80075a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f af45 	beq.w	800743a <_printf_float+0xb6>
 80075b0:	f04f 0900 	mov.w	r9, #0
 80075b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80075b8:	f104 0a1a 	add.w	sl, r4, #26
 80075bc:	45c8      	cmp	r8, r9
 80075be:	dc09      	bgt.n	80075d4 <_printf_float+0x250>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	079b      	lsls	r3, r3, #30
 80075c4:	f100 8103 	bmi.w	80077ce <_printf_float+0x44a>
 80075c8:	68e0      	ldr	r0, [r4, #12]
 80075ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075cc:	4298      	cmp	r0, r3
 80075ce:	bfb8      	it	lt
 80075d0:	4618      	movlt	r0, r3
 80075d2:	e734      	b.n	800743e <_printf_float+0xba>
 80075d4:	2301      	movs	r3, #1
 80075d6:	4652      	mov	r2, sl
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	47b8      	blx	r7
 80075de:	3001      	adds	r0, #1
 80075e0:	f43f af2b 	beq.w	800743a <_printf_float+0xb6>
 80075e4:	f109 0901 	add.w	r9, r9, #1
 80075e8:	e7e8      	b.n	80075bc <_printf_float+0x238>
 80075ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	dc39      	bgt.n	8007664 <_printf_float+0x2e0>
 80075f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007660 <_printf_float+0x2dc>)
 80075f2:	2301      	movs	r3, #1
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	f43f af1d 	beq.w	800743a <_printf_float+0xb6>
 8007600:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007604:	ea59 0303 	orrs.w	r3, r9, r3
 8007608:	d102      	bne.n	8007610 <_printf_float+0x28c>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	07d9      	lsls	r1, r3, #31
 800760e:	d5d7      	bpl.n	80075c0 <_printf_float+0x23c>
 8007610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007614:	4631      	mov	r1, r6
 8007616:	4628      	mov	r0, r5
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	f43f af0d 	beq.w	800743a <_printf_float+0xb6>
 8007620:	f04f 0a00 	mov.w	sl, #0
 8007624:	f104 0b1a 	add.w	fp, r4, #26
 8007628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800762a:	425b      	negs	r3, r3
 800762c:	4553      	cmp	r3, sl
 800762e:	dc01      	bgt.n	8007634 <_printf_float+0x2b0>
 8007630:	464b      	mov	r3, r9
 8007632:	e793      	b.n	800755c <_printf_float+0x1d8>
 8007634:	2301      	movs	r3, #1
 8007636:	465a      	mov	r2, fp
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f aefb 	beq.w	800743a <_printf_float+0xb6>
 8007644:	f10a 0a01 	add.w	sl, sl, #1
 8007648:	e7ee      	b.n	8007628 <_printf_float+0x2a4>
 800764a:	bf00      	nop
 800764c:	7fefffff 	.word	0x7fefffff
 8007650:	0800af30 	.word	0x0800af30
 8007654:	0800af34 	.word	0x0800af34
 8007658:	0800af38 	.word	0x0800af38
 800765c:	0800af3c 	.word	0x0800af3c
 8007660:	0800af40 	.word	0x0800af40
 8007664:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007666:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800766a:	4553      	cmp	r3, sl
 800766c:	bfa8      	it	ge
 800766e:	4653      	movge	r3, sl
 8007670:	2b00      	cmp	r3, #0
 8007672:	4699      	mov	r9, r3
 8007674:	dc36      	bgt.n	80076e4 <_printf_float+0x360>
 8007676:	f04f 0b00 	mov.w	fp, #0
 800767a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800767e:	f104 021a 	add.w	r2, r4, #26
 8007682:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007684:	9306      	str	r3, [sp, #24]
 8007686:	eba3 0309 	sub.w	r3, r3, r9
 800768a:	455b      	cmp	r3, fp
 800768c:	dc31      	bgt.n	80076f2 <_printf_float+0x36e>
 800768e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007690:	459a      	cmp	sl, r3
 8007692:	dc3a      	bgt.n	800770a <_printf_float+0x386>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	07da      	lsls	r2, r3, #31
 8007698:	d437      	bmi.n	800770a <_printf_float+0x386>
 800769a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769c:	ebaa 0903 	sub.w	r9, sl, r3
 80076a0:	9b06      	ldr	r3, [sp, #24]
 80076a2:	ebaa 0303 	sub.w	r3, sl, r3
 80076a6:	4599      	cmp	r9, r3
 80076a8:	bfa8      	it	ge
 80076aa:	4699      	movge	r9, r3
 80076ac:	f1b9 0f00 	cmp.w	r9, #0
 80076b0:	dc33      	bgt.n	800771a <_printf_float+0x396>
 80076b2:	f04f 0800 	mov.w	r8, #0
 80076b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076ba:	f104 0b1a 	add.w	fp, r4, #26
 80076be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c0:	ebaa 0303 	sub.w	r3, sl, r3
 80076c4:	eba3 0309 	sub.w	r3, r3, r9
 80076c8:	4543      	cmp	r3, r8
 80076ca:	f77f af79 	ble.w	80075c0 <_printf_float+0x23c>
 80076ce:	2301      	movs	r3, #1
 80076d0:	465a      	mov	r2, fp
 80076d2:	4631      	mov	r1, r6
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b8      	blx	r7
 80076d8:	3001      	adds	r0, #1
 80076da:	f43f aeae 	beq.w	800743a <_printf_float+0xb6>
 80076de:	f108 0801 	add.w	r8, r8, #1
 80076e2:	e7ec      	b.n	80076be <_printf_float+0x33a>
 80076e4:	4642      	mov	r2, r8
 80076e6:	4631      	mov	r1, r6
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b8      	blx	r7
 80076ec:	3001      	adds	r0, #1
 80076ee:	d1c2      	bne.n	8007676 <_printf_float+0x2f2>
 80076f0:	e6a3      	b.n	800743a <_printf_float+0xb6>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	9206      	str	r2, [sp, #24]
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f ae9c 	beq.w	800743a <_printf_float+0xb6>
 8007702:	9a06      	ldr	r2, [sp, #24]
 8007704:	f10b 0b01 	add.w	fp, fp, #1
 8007708:	e7bb      	b.n	8007682 <_printf_float+0x2fe>
 800770a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800770e:	4631      	mov	r1, r6
 8007710:	4628      	mov	r0, r5
 8007712:	47b8      	blx	r7
 8007714:	3001      	adds	r0, #1
 8007716:	d1c0      	bne.n	800769a <_printf_float+0x316>
 8007718:	e68f      	b.n	800743a <_printf_float+0xb6>
 800771a:	9a06      	ldr	r2, [sp, #24]
 800771c:	464b      	mov	r3, r9
 800771e:	4442      	add	r2, r8
 8007720:	4631      	mov	r1, r6
 8007722:	4628      	mov	r0, r5
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	d1c3      	bne.n	80076b2 <_printf_float+0x32e>
 800772a:	e686      	b.n	800743a <_printf_float+0xb6>
 800772c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007730:	f1ba 0f01 	cmp.w	sl, #1
 8007734:	dc01      	bgt.n	800773a <_printf_float+0x3b6>
 8007736:	07db      	lsls	r3, r3, #31
 8007738:	d536      	bpl.n	80077a8 <_printf_float+0x424>
 800773a:	2301      	movs	r3, #1
 800773c:	4642      	mov	r2, r8
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f ae78 	beq.w	800743a <_printf_float+0xb6>
 800774a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800774e:	4631      	mov	r1, r6
 8007750:	4628      	mov	r0, r5
 8007752:	47b8      	blx	r7
 8007754:	3001      	adds	r0, #1
 8007756:	f43f ae70 	beq.w	800743a <_printf_float+0xb6>
 800775a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800775e:	2200      	movs	r2, #0
 8007760:	2300      	movs	r3, #0
 8007762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007766:	f7f9 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800776a:	b9c0      	cbnz	r0, 800779e <_printf_float+0x41a>
 800776c:	4653      	mov	r3, sl
 800776e:	f108 0201 	add.w	r2, r8, #1
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	d10c      	bne.n	8007796 <_printf_float+0x412>
 800777c:	e65d      	b.n	800743a <_printf_float+0xb6>
 800777e:	2301      	movs	r3, #1
 8007780:	465a      	mov	r2, fp
 8007782:	4631      	mov	r1, r6
 8007784:	4628      	mov	r0, r5
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	f43f ae56 	beq.w	800743a <_printf_float+0xb6>
 800778e:	f108 0801 	add.w	r8, r8, #1
 8007792:	45d0      	cmp	r8, sl
 8007794:	dbf3      	blt.n	800777e <_printf_float+0x3fa>
 8007796:	464b      	mov	r3, r9
 8007798:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800779c:	e6df      	b.n	800755e <_printf_float+0x1da>
 800779e:	f04f 0800 	mov.w	r8, #0
 80077a2:	f104 0b1a 	add.w	fp, r4, #26
 80077a6:	e7f4      	b.n	8007792 <_printf_float+0x40e>
 80077a8:	2301      	movs	r3, #1
 80077aa:	4642      	mov	r2, r8
 80077ac:	e7e1      	b.n	8007772 <_printf_float+0x3ee>
 80077ae:	2301      	movs	r3, #1
 80077b0:	464a      	mov	r2, r9
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	f43f ae3e 	beq.w	800743a <_printf_float+0xb6>
 80077be:	f108 0801 	add.w	r8, r8, #1
 80077c2:	68e3      	ldr	r3, [r4, #12]
 80077c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077c6:	1a5b      	subs	r3, r3, r1
 80077c8:	4543      	cmp	r3, r8
 80077ca:	dcf0      	bgt.n	80077ae <_printf_float+0x42a>
 80077cc:	e6fc      	b.n	80075c8 <_printf_float+0x244>
 80077ce:	f04f 0800 	mov.w	r8, #0
 80077d2:	f104 0919 	add.w	r9, r4, #25
 80077d6:	e7f4      	b.n	80077c2 <_printf_float+0x43e>

080077d8 <_printf_common>:
 80077d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077dc:	4616      	mov	r6, r2
 80077de:	4698      	mov	r8, r3
 80077e0:	688a      	ldr	r2, [r1, #8]
 80077e2:	690b      	ldr	r3, [r1, #16]
 80077e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077e8:	4293      	cmp	r3, r2
 80077ea:	bfb8      	it	lt
 80077ec:	4613      	movlt	r3, r2
 80077ee:	6033      	str	r3, [r6, #0]
 80077f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077f4:	4607      	mov	r7, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	b10a      	cbz	r2, 80077fe <_printf_common+0x26>
 80077fa:	3301      	adds	r3, #1
 80077fc:	6033      	str	r3, [r6, #0]
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	0699      	lsls	r1, r3, #26
 8007802:	bf42      	ittt	mi
 8007804:	6833      	ldrmi	r3, [r6, #0]
 8007806:	3302      	addmi	r3, #2
 8007808:	6033      	strmi	r3, [r6, #0]
 800780a:	6825      	ldr	r5, [r4, #0]
 800780c:	f015 0506 	ands.w	r5, r5, #6
 8007810:	d106      	bne.n	8007820 <_printf_common+0x48>
 8007812:	f104 0a19 	add.w	sl, r4, #25
 8007816:	68e3      	ldr	r3, [r4, #12]
 8007818:	6832      	ldr	r2, [r6, #0]
 800781a:	1a9b      	subs	r3, r3, r2
 800781c:	42ab      	cmp	r3, r5
 800781e:	dc26      	bgt.n	800786e <_printf_common+0x96>
 8007820:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007824:	6822      	ldr	r2, [r4, #0]
 8007826:	3b00      	subs	r3, #0
 8007828:	bf18      	it	ne
 800782a:	2301      	movne	r3, #1
 800782c:	0692      	lsls	r2, r2, #26
 800782e:	d42b      	bmi.n	8007888 <_printf_common+0xb0>
 8007830:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007834:	4641      	mov	r1, r8
 8007836:	4638      	mov	r0, r7
 8007838:	47c8      	blx	r9
 800783a:	3001      	adds	r0, #1
 800783c:	d01e      	beq.n	800787c <_printf_common+0xa4>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	6922      	ldr	r2, [r4, #16]
 8007842:	f003 0306 	and.w	r3, r3, #6
 8007846:	2b04      	cmp	r3, #4
 8007848:	bf02      	ittt	eq
 800784a:	68e5      	ldreq	r5, [r4, #12]
 800784c:	6833      	ldreq	r3, [r6, #0]
 800784e:	1aed      	subeq	r5, r5, r3
 8007850:	68a3      	ldr	r3, [r4, #8]
 8007852:	bf0c      	ite	eq
 8007854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007858:	2500      	movne	r5, #0
 800785a:	4293      	cmp	r3, r2
 800785c:	bfc4      	itt	gt
 800785e:	1a9b      	subgt	r3, r3, r2
 8007860:	18ed      	addgt	r5, r5, r3
 8007862:	2600      	movs	r6, #0
 8007864:	341a      	adds	r4, #26
 8007866:	42b5      	cmp	r5, r6
 8007868:	d11a      	bne.n	80078a0 <_printf_common+0xc8>
 800786a:	2000      	movs	r0, #0
 800786c:	e008      	b.n	8007880 <_printf_common+0xa8>
 800786e:	2301      	movs	r3, #1
 8007870:	4652      	mov	r2, sl
 8007872:	4641      	mov	r1, r8
 8007874:	4638      	mov	r0, r7
 8007876:	47c8      	blx	r9
 8007878:	3001      	adds	r0, #1
 800787a:	d103      	bne.n	8007884 <_printf_common+0xac>
 800787c:	f04f 30ff 	mov.w	r0, #4294967295
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	3501      	adds	r5, #1
 8007886:	e7c6      	b.n	8007816 <_printf_common+0x3e>
 8007888:	18e1      	adds	r1, r4, r3
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	2030      	movs	r0, #48	@ 0x30
 800788e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007892:	4422      	add	r2, r4
 8007894:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007898:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800789c:	3302      	adds	r3, #2
 800789e:	e7c7      	b.n	8007830 <_printf_common+0x58>
 80078a0:	2301      	movs	r3, #1
 80078a2:	4622      	mov	r2, r4
 80078a4:	4641      	mov	r1, r8
 80078a6:	4638      	mov	r0, r7
 80078a8:	47c8      	blx	r9
 80078aa:	3001      	adds	r0, #1
 80078ac:	d0e6      	beq.n	800787c <_printf_common+0xa4>
 80078ae:	3601      	adds	r6, #1
 80078b0:	e7d9      	b.n	8007866 <_printf_common+0x8e>
	...

080078b4 <_printf_i>:
 80078b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	7e0f      	ldrb	r7, [r1, #24]
 80078ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078bc:	2f78      	cmp	r7, #120	@ 0x78
 80078be:	4691      	mov	r9, r2
 80078c0:	4680      	mov	r8, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	469a      	mov	sl, r3
 80078c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078ca:	d807      	bhi.n	80078dc <_printf_i+0x28>
 80078cc:	2f62      	cmp	r7, #98	@ 0x62
 80078ce:	d80a      	bhi.n	80078e6 <_printf_i+0x32>
 80078d0:	2f00      	cmp	r7, #0
 80078d2:	f000 80d2 	beq.w	8007a7a <_printf_i+0x1c6>
 80078d6:	2f58      	cmp	r7, #88	@ 0x58
 80078d8:	f000 80b9 	beq.w	8007a4e <_printf_i+0x19a>
 80078dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078e4:	e03a      	b.n	800795c <_printf_i+0xa8>
 80078e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078ea:	2b15      	cmp	r3, #21
 80078ec:	d8f6      	bhi.n	80078dc <_printf_i+0x28>
 80078ee:	a101      	add	r1, pc, #4	@ (adr r1, 80078f4 <_printf_i+0x40>)
 80078f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078f4:	0800794d 	.word	0x0800794d
 80078f8:	08007961 	.word	0x08007961
 80078fc:	080078dd 	.word	0x080078dd
 8007900:	080078dd 	.word	0x080078dd
 8007904:	080078dd 	.word	0x080078dd
 8007908:	080078dd 	.word	0x080078dd
 800790c:	08007961 	.word	0x08007961
 8007910:	080078dd 	.word	0x080078dd
 8007914:	080078dd 	.word	0x080078dd
 8007918:	080078dd 	.word	0x080078dd
 800791c:	080078dd 	.word	0x080078dd
 8007920:	08007a61 	.word	0x08007a61
 8007924:	0800798b 	.word	0x0800798b
 8007928:	08007a1b 	.word	0x08007a1b
 800792c:	080078dd 	.word	0x080078dd
 8007930:	080078dd 	.word	0x080078dd
 8007934:	08007a83 	.word	0x08007a83
 8007938:	080078dd 	.word	0x080078dd
 800793c:	0800798b 	.word	0x0800798b
 8007940:	080078dd 	.word	0x080078dd
 8007944:	080078dd 	.word	0x080078dd
 8007948:	08007a23 	.word	0x08007a23
 800794c:	6833      	ldr	r3, [r6, #0]
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6032      	str	r2, [r6, #0]
 8007954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007958:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800795c:	2301      	movs	r3, #1
 800795e:	e09d      	b.n	8007a9c <_printf_i+0x1e8>
 8007960:	6833      	ldr	r3, [r6, #0]
 8007962:	6820      	ldr	r0, [r4, #0]
 8007964:	1d19      	adds	r1, r3, #4
 8007966:	6031      	str	r1, [r6, #0]
 8007968:	0606      	lsls	r6, r0, #24
 800796a:	d501      	bpl.n	8007970 <_printf_i+0xbc>
 800796c:	681d      	ldr	r5, [r3, #0]
 800796e:	e003      	b.n	8007978 <_printf_i+0xc4>
 8007970:	0645      	lsls	r5, r0, #25
 8007972:	d5fb      	bpl.n	800796c <_printf_i+0xb8>
 8007974:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007978:	2d00      	cmp	r5, #0
 800797a:	da03      	bge.n	8007984 <_printf_i+0xd0>
 800797c:	232d      	movs	r3, #45	@ 0x2d
 800797e:	426d      	negs	r5, r5
 8007980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007984:	4859      	ldr	r0, [pc, #356]	@ (8007aec <_printf_i+0x238>)
 8007986:	230a      	movs	r3, #10
 8007988:	e011      	b.n	80079ae <_printf_i+0xfa>
 800798a:	6821      	ldr	r1, [r4, #0]
 800798c:	6833      	ldr	r3, [r6, #0]
 800798e:	0608      	lsls	r0, r1, #24
 8007990:	f853 5b04 	ldr.w	r5, [r3], #4
 8007994:	d402      	bmi.n	800799c <_printf_i+0xe8>
 8007996:	0649      	lsls	r1, r1, #25
 8007998:	bf48      	it	mi
 800799a:	b2ad      	uxthmi	r5, r5
 800799c:	2f6f      	cmp	r7, #111	@ 0x6f
 800799e:	4853      	ldr	r0, [pc, #332]	@ (8007aec <_printf_i+0x238>)
 80079a0:	6033      	str	r3, [r6, #0]
 80079a2:	bf14      	ite	ne
 80079a4:	230a      	movne	r3, #10
 80079a6:	2308      	moveq	r3, #8
 80079a8:	2100      	movs	r1, #0
 80079aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079ae:	6866      	ldr	r6, [r4, #4]
 80079b0:	60a6      	str	r6, [r4, #8]
 80079b2:	2e00      	cmp	r6, #0
 80079b4:	bfa2      	ittt	ge
 80079b6:	6821      	ldrge	r1, [r4, #0]
 80079b8:	f021 0104 	bicge.w	r1, r1, #4
 80079bc:	6021      	strge	r1, [r4, #0]
 80079be:	b90d      	cbnz	r5, 80079c4 <_printf_i+0x110>
 80079c0:	2e00      	cmp	r6, #0
 80079c2:	d04b      	beq.n	8007a5c <_printf_i+0x1a8>
 80079c4:	4616      	mov	r6, r2
 80079c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80079ca:	fb03 5711 	mls	r7, r3, r1, r5
 80079ce:	5dc7      	ldrb	r7, [r0, r7]
 80079d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079d4:	462f      	mov	r7, r5
 80079d6:	42bb      	cmp	r3, r7
 80079d8:	460d      	mov	r5, r1
 80079da:	d9f4      	bls.n	80079c6 <_printf_i+0x112>
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d10b      	bne.n	80079f8 <_printf_i+0x144>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	07df      	lsls	r7, r3, #31
 80079e4:	d508      	bpl.n	80079f8 <_printf_i+0x144>
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	6861      	ldr	r1, [r4, #4]
 80079ea:	4299      	cmp	r1, r3
 80079ec:	bfde      	ittt	le
 80079ee:	2330      	movle	r3, #48	@ 0x30
 80079f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079f8:	1b92      	subs	r2, r2, r6
 80079fa:	6122      	str	r2, [r4, #16]
 80079fc:	f8cd a000 	str.w	sl, [sp]
 8007a00:	464b      	mov	r3, r9
 8007a02:	aa03      	add	r2, sp, #12
 8007a04:	4621      	mov	r1, r4
 8007a06:	4640      	mov	r0, r8
 8007a08:	f7ff fee6 	bl	80077d8 <_printf_common>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d14a      	bne.n	8007aa6 <_printf_i+0x1f2>
 8007a10:	f04f 30ff 	mov.w	r0, #4294967295
 8007a14:	b004      	add	sp, #16
 8007a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	f043 0320 	orr.w	r3, r3, #32
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	4833      	ldr	r0, [pc, #204]	@ (8007af0 <_printf_i+0x23c>)
 8007a24:	2778      	movs	r7, #120	@ 0x78
 8007a26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	6831      	ldr	r1, [r6, #0]
 8007a2e:	061f      	lsls	r7, r3, #24
 8007a30:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a34:	d402      	bmi.n	8007a3c <_printf_i+0x188>
 8007a36:	065f      	lsls	r7, r3, #25
 8007a38:	bf48      	it	mi
 8007a3a:	b2ad      	uxthmi	r5, r5
 8007a3c:	6031      	str	r1, [r6, #0]
 8007a3e:	07d9      	lsls	r1, r3, #31
 8007a40:	bf44      	itt	mi
 8007a42:	f043 0320 	orrmi.w	r3, r3, #32
 8007a46:	6023      	strmi	r3, [r4, #0]
 8007a48:	b11d      	cbz	r5, 8007a52 <_printf_i+0x19e>
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	e7ac      	b.n	80079a8 <_printf_i+0xf4>
 8007a4e:	4827      	ldr	r0, [pc, #156]	@ (8007aec <_printf_i+0x238>)
 8007a50:	e7e9      	b.n	8007a26 <_printf_i+0x172>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	f023 0320 	bic.w	r3, r3, #32
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	e7f6      	b.n	8007a4a <_printf_i+0x196>
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	e7bd      	b.n	80079dc <_printf_i+0x128>
 8007a60:	6833      	ldr	r3, [r6, #0]
 8007a62:	6825      	ldr	r5, [r4, #0]
 8007a64:	6961      	ldr	r1, [r4, #20]
 8007a66:	1d18      	adds	r0, r3, #4
 8007a68:	6030      	str	r0, [r6, #0]
 8007a6a:	062e      	lsls	r6, r5, #24
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	d501      	bpl.n	8007a74 <_printf_i+0x1c0>
 8007a70:	6019      	str	r1, [r3, #0]
 8007a72:	e002      	b.n	8007a7a <_printf_i+0x1c6>
 8007a74:	0668      	lsls	r0, r5, #25
 8007a76:	d5fb      	bpl.n	8007a70 <_printf_i+0x1bc>
 8007a78:	8019      	strh	r1, [r3, #0]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6123      	str	r3, [r4, #16]
 8007a7e:	4616      	mov	r6, r2
 8007a80:	e7bc      	b.n	80079fc <_printf_i+0x148>
 8007a82:	6833      	ldr	r3, [r6, #0]
 8007a84:	1d1a      	adds	r2, r3, #4
 8007a86:	6032      	str	r2, [r6, #0]
 8007a88:	681e      	ldr	r6, [r3, #0]
 8007a8a:	6862      	ldr	r2, [r4, #4]
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7f8 fb9e 	bl	80001d0 <memchr>
 8007a94:	b108      	cbz	r0, 8007a9a <_printf_i+0x1e6>
 8007a96:	1b80      	subs	r0, r0, r6
 8007a98:	6060      	str	r0, [r4, #4]
 8007a9a:	6863      	ldr	r3, [r4, #4]
 8007a9c:	6123      	str	r3, [r4, #16]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aa4:	e7aa      	b.n	80079fc <_printf_i+0x148>
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	4632      	mov	r2, r6
 8007aaa:	4649      	mov	r1, r9
 8007aac:	4640      	mov	r0, r8
 8007aae:	47d0      	blx	sl
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d0ad      	beq.n	8007a10 <_printf_i+0x15c>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	079b      	lsls	r3, r3, #30
 8007ab8:	d413      	bmi.n	8007ae2 <_printf_i+0x22e>
 8007aba:	68e0      	ldr	r0, [r4, #12]
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	4298      	cmp	r0, r3
 8007ac0:	bfb8      	it	lt
 8007ac2:	4618      	movlt	r0, r3
 8007ac4:	e7a6      	b.n	8007a14 <_printf_i+0x160>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4632      	mov	r2, r6
 8007aca:	4649      	mov	r1, r9
 8007acc:	4640      	mov	r0, r8
 8007ace:	47d0      	blx	sl
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d09d      	beq.n	8007a10 <_printf_i+0x15c>
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	68e3      	ldr	r3, [r4, #12]
 8007ad8:	9903      	ldr	r1, [sp, #12]
 8007ada:	1a5b      	subs	r3, r3, r1
 8007adc:	42ab      	cmp	r3, r5
 8007ade:	dcf2      	bgt.n	8007ac6 <_printf_i+0x212>
 8007ae0:	e7eb      	b.n	8007aba <_printf_i+0x206>
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	f104 0619 	add.w	r6, r4, #25
 8007ae8:	e7f5      	b.n	8007ad6 <_printf_i+0x222>
 8007aea:	bf00      	nop
 8007aec:	0800af42 	.word	0x0800af42
 8007af0:	0800af53 	.word	0x0800af53

08007af4 <std>:
 8007af4:	2300      	movs	r3, #0
 8007af6:	b510      	push	{r4, lr}
 8007af8:	4604      	mov	r4, r0
 8007afa:	e9c0 3300 	strd	r3, r3, [r0]
 8007afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b02:	6083      	str	r3, [r0, #8]
 8007b04:	8181      	strh	r1, [r0, #12]
 8007b06:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b08:	81c2      	strh	r2, [r0, #14]
 8007b0a:	6183      	str	r3, [r0, #24]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	2208      	movs	r2, #8
 8007b10:	305c      	adds	r0, #92	@ 0x5c
 8007b12:	f000 fa19 	bl	8007f48 <memset>
 8007b16:	4b0d      	ldr	r3, [pc, #52]	@ (8007b4c <std+0x58>)
 8007b18:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b50 <std+0x5c>)
 8007b1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b54 <std+0x60>)
 8007b20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b22:	4b0d      	ldr	r3, [pc, #52]	@ (8007b58 <std+0x64>)
 8007b24:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b26:	4b0d      	ldr	r3, [pc, #52]	@ (8007b5c <std+0x68>)
 8007b28:	6224      	str	r4, [r4, #32]
 8007b2a:	429c      	cmp	r4, r3
 8007b2c:	d006      	beq.n	8007b3c <std+0x48>
 8007b2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b32:	4294      	cmp	r4, r2
 8007b34:	d002      	beq.n	8007b3c <std+0x48>
 8007b36:	33d0      	adds	r3, #208	@ 0xd0
 8007b38:	429c      	cmp	r4, r3
 8007b3a:	d105      	bne.n	8007b48 <std+0x54>
 8007b3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b44:	f000 ba8c 	b.w	8008060 <__retarget_lock_init_recursive>
 8007b48:	bd10      	pop	{r4, pc}
 8007b4a:	bf00      	nop
 8007b4c:	08007d99 	.word	0x08007d99
 8007b50:	08007dbb 	.word	0x08007dbb
 8007b54:	08007df3 	.word	0x08007df3
 8007b58:	08007e17 	.word	0x08007e17
 8007b5c:	20004c88 	.word	0x20004c88

08007b60 <stdio_exit_handler>:
 8007b60:	4a02      	ldr	r2, [pc, #8]	@ (8007b6c <stdio_exit_handler+0xc>)
 8007b62:	4903      	ldr	r1, [pc, #12]	@ (8007b70 <stdio_exit_handler+0x10>)
 8007b64:	4803      	ldr	r0, [pc, #12]	@ (8007b74 <stdio_exit_handler+0x14>)
 8007b66:	f000 b869 	b.w	8007c3c <_fwalk_sglue>
 8007b6a:	bf00      	nop
 8007b6c:	2000001c 	.word	0x2000001c
 8007b70:	08009af5 	.word	0x08009af5
 8007b74:	2000002c 	.word	0x2000002c

08007b78 <cleanup_stdio>:
 8007b78:	6841      	ldr	r1, [r0, #4]
 8007b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007bac <cleanup_stdio+0x34>)
 8007b7c:	4299      	cmp	r1, r3
 8007b7e:	b510      	push	{r4, lr}
 8007b80:	4604      	mov	r4, r0
 8007b82:	d001      	beq.n	8007b88 <cleanup_stdio+0x10>
 8007b84:	f001 ffb6 	bl	8009af4 <_fflush_r>
 8007b88:	68a1      	ldr	r1, [r4, #8]
 8007b8a:	4b09      	ldr	r3, [pc, #36]	@ (8007bb0 <cleanup_stdio+0x38>)
 8007b8c:	4299      	cmp	r1, r3
 8007b8e:	d002      	beq.n	8007b96 <cleanup_stdio+0x1e>
 8007b90:	4620      	mov	r0, r4
 8007b92:	f001 ffaf 	bl	8009af4 <_fflush_r>
 8007b96:	68e1      	ldr	r1, [r4, #12]
 8007b98:	4b06      	ldr	r3, [pc, #24]	@ (8007bb4 <cleanup_stdio+0x3c>)
 8007b9a:	4299      	cmp	r1, r3
 8007b9c:	d004      	beq.n	8007ba8 <cleanup_stdio+0x30>
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ba4:	f001 bfa6 	b.w	8009af4 <_fflush_r>
 8007ba8:	bd10      	pop	{r4, pc}
 8007baa:	bf00      	nop
 8007bac:	20004c88 	.word	0x20004c88
 8007bb0:	20004cf0 	.word	0x20004cf0
 8007bb4:	20004d58 	.word	0x20004d58

08007bb8 <global_stdio_init.part.0>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	4b0b      	ldr	r3, [pc, #44]	@ (8007be8 <global_stdio_init.part.0+0x30>)
 8007bbc:	4c0b      	ldr	r4, [pc, #44]	@ (8007bec <global_stdio_init.part.0+0x34>)
 8007bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8007bf0 <global_stdio_init.part.0+0x38>)
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	2104      	movs	r1, #4
 8007bc8:	f7ff ff94 	bl	8007af4 <std>
 8007bcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	2109      	movs	r1, #9
 8007bd4:	f7ff ff8e 	bl	8007af4 <std>
 8007bd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007bdc:	2202      	movs	r2, #2
 8007bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007be2:	2112      	movs	r1, #18
 8007be4:	f7ff bf86 	b.w	8007af4 <std>
 8007be8:	20004dc0 	.word	0x20004dc0
 8007bec:	20004c88 	.word	0x20004c88
 8007bf0:	08007b61 	.word	0x08007b61

08007bf4 <__sfp_lock_acquire>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	@ (8007bfc <__sfp_lock_acquire+0x8>)
 8007bf6:	f000 ba34 	b.w	8008062 <__retarget_lock_acquire_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	20004dc9 	.word	0x20004dc9

08007c00 <__sfp_lock_release>:
 8007c00:	4801      	ldr	r0, [pc, #4]	@ (8007c08 <__sfp_lock_release+0x8>)
 8007c02:	f000 ba2f 	b.w	8008064 <__retarget_lock_release_recursive>
 8007c06:	bf00      	nop
 8007c08:	20004dc9 	.word	0x20004dc9

08007c0c <__sinit>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	4604      	mov	r4, r0
 8007c10:	f7ff fff0 	bl	8007bf4 <__sfp_lock_acquire>
 8007c14:	6a23      	ldr	r3, [r4, #32]
 8007c16:	b11b      	cbz	r3, 8007c20 <__sinit+0x14>
 8007c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1c:	f7ff bff0 	b.w	8007c00 <__sfp_lock_release>
 8007c20:	4b04      	ldr	r3, [pc, #16]	@ (8007c34 <__sinit+0x28>)
 8007c22:	6223      	str	r3, [r4, #32]
 8007c24:	4b04      	ldr	r3, [pc, #16]	@ (8007c38 <__sinit+0x2c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1f5      	bne.n	8007c18 <__sinit+0xc>
 8007c2c:	f7ff ffc4 	bl	8007bb8 <global_stdio_init.part.0>
 8007c30:	e7f2      	b.n	8007c18 <__sinit+0xc>
 8007c32:	bf00      	nop
 8007c34:	08007b79 	.word	0x08007b79
 8007c38:	20004dc0 	.word	0x20004dc0

08007c3c <_fwalk_sglue>:
 8007c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c40:	4607      	mov	r7, r0
 8007c42:	4688      	mov	r8, r1
 8007c44:	4614      	mov	r4, r2
 8007c46:	2600      	movs	r6, #0
 8007c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8007c50:	d505      	bpl.n	8007c5e <_fwalk_sglue+0x22>
 8007c52:	6824      	ldr	r4, [r4, #0]
 8007c54:	2c00      	cmp	r4, #0
 8007c56:	d1f7      	bne.n	8007c48 <_fwalk_sglue+0xc>
 8007c58:	4630      	mov	r0, r6
 8007c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c5e:	89ab      	ldrh	r3, [r5, #12]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d907      	bls.n	8007c74 <_fwalk_sglue+0x38>
 8007c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	d003      	beq.n	8007c74 <_fwalk_sglue+0x38>
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	4638      	mov	r0, r7
 8007c70:	47c0      	blx	r8
 8007c72:	4306      	orrs	r6, r0
 8007c74:	3568      	adds	r5, #104	@ 0x68
 8007c76:	e7e9      	b.n	8007c4c <_fwalk_sglue+0x10>

08007c78 <iprintf>:
 8007c78:	b40f      	push	{r0, r1, r2, r3}
 8007c7a:	b507      	push	{r0, r1, r2, lr}
 8007c7c:	4906      	ldr	r1, [pc, #24]	@ (8007c98 <iprintf+0x20>)
 8007c7e:	ab04      	add	r3, sp, #16
 8007c80:	6808      	ldr	r0, [r1, #0]
 8007c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c86:	6881      	ldr	r1, [r0, #8]
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	f001 fd97 	bl	80097bc <_vfiprintf_r>
 8007c8e:	b003      	add	sp, #12
 8007c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c94:	b004      	add	sp, #16
 8007c96:	4770      	bx	lr
 8007c98:	20000028 	.word	0x20000028

08007c9c <_puts_r>:
 8007c9c:	6a03      	ldr	r3, [r0, #32]
 8007c9e:	b570      	push	{r4, r5, r6, lr}
 8007ca0:	6884      	ldr	r4, [r0, #8]
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	460e      	mov	r6, r1
 8007ca6:	b90b      	cbnz	r3, 8007cac <_puts_r+0x10>
 8007ca8:	f7ff ffb0 	bl	8007c0c <__sinit>
 8007cac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cae:	07db      	lsls	r3, r3, #31
 8007cb0:	d405      	bmi.n	8007cbe <_puts_r+0x22>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	0598      	lsls	r0, r3, #22
 8007cb6:	d402      	bmi.n	8007cbe <_puts_r+0x22>
 8007cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cba:	f000 f9d2 	bl	8008062 <__retarget_lock_acquire_recursive>
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	0719      	lsls	r1, r3, #28
 8007cc2:	d502      	bpl.n	8007cca <_puts_r+0x2e>
 8007cc4:	6923      	ldr	r3, [r4, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d135      	bne.n	8007d36 <_puts_r+0x9a>
 8007cca:	4621      	mov	r1, r4
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f000 f8e5 	bl	8007e9c <__swsetup_r>
 8007cd2:	b380      	cbz	r0, 8007d36 <_puts_r+0x9a>
 8007cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8007cd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cda:	07da      	lsls	r2, r3, #31
 8007cdc:	d405      	bmi.n	8007cea <_puts_r+0x4e>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	059b      	lsls	r3, r3, #22
 8007ce2:	d402      	bmi.n	8007cea <_puts_r+0x4e>
 8007ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce6:	f000 f9bd 	bl	8008064 <__retarget_lock_release_recursive>
 8007cea:	4628      	mov	r0, r5
 8007cec:	bd70      	pop	{r4, r5, r6, pc}
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	da04      	bge.n	8007cfc <_puts_r+0x60>
 8007cf2:	69a2      	ldr	r2, [r4, #24]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	dc17      	bgt.n	8007d28 <_puts_r+0x8c>
 8007cf8:	290a      	cmp	r1, #10
 8007cfa:	d015      	beq.n	8007d28 <_puts_r+0x8c>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	6022      	str	r2, [r4, #0]
 8007d02:	7019      	strb	r1, [r3, #0]
 8007d04:	68a3      	ldr	r3, [r4, #8]
 8007d06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	2900      	cmp	r1, #0
 8007d10:	d1ed      	bne.n	8007cee <_puts_r+0x52>
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da11      	bge.n	8007d3a <_puts_r+0x9e>
 8007d16:	4622      	mov	r2, r4
 8007d18:	210a      	movs	r1, #10
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f000 f87f 	bl	8007e1e <__swbuf_r>
 8007d20:	3001      	adds	r0, #1
 8007d22:	d0d7      	beq.n	8007cd4 <_puts_r+0x38>
 8007d24:	250a      	movs	r5, #10
 8007d26:	e7d7      	b.n	8007cd8 <_puts_r+0x3c>
 8007d28:	4622      	mov	r2, r4
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 f877 	bl	8007e1e <__swbuf_r>
 8007d30:	3001      	adds	r0, #1
 8007d32:	d1e7      	bne.n	8007d04 <_puts_r+0x68>
 8007d34:	e7ce      	b.n	8007cd4 <_puts_r+0x38>
 8007d36:	3e01      	subs	r6, #1
 8007d38:	e7e4      	b.n	8007d04 <_puts_r+0x68>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	6022      	str	r2, [r4, #0]
 8007d40:	220a      	movs	r2, #10
 8007d42:	701a      	strb	r2, [r3, #0]
 8007d44:	e7ee      	b.n	8007d24 <_puts_r+0x88>
	...

08007d48 <puts>:
 8007d48:	4b02      	ldr	r3, [pc, #8]	@ (8007d54 <puts+0xc>)
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	f7ff bfa5 	b.w	8007c9c <_puts_r>
 8007d52:	bf00      	nop
 8007d54:	20000028 	.word	0x20000028

08007d58 <siprintf>:
 8007d58:	b40e      	push	{r1, r2, r3}
 8007d5a:	b500      	push	{lr}
 8007d5c:	b09c      	sub	sp, #112	@ 0x70
 8007d5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d60:	9002      	str	r0, [sp, #8]
 8007d62:	9006      	str	r0, [sp, #24]
 8007d64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d68:	4809      	ldr	r0, [pc, #36]	@ (8007d90 <siprintf+0x38>)
 8007d6a:	9107      	str	r1, [sp, #28]
 8007d6c:	9104      	str	r1, [sp, #16]
 8007d6e:	4909      	ldr	r1, [pc, #36]	@ (8007d94 <siprintf+0x3c>)
 8007d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d74:	9105      	str	r1, [sp, #20]
 8007d76:	6800      	ldr	r0, [r0, #0]
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	a902      	add	r1, sp, #8
 8007d7c:	f001 fbf8 	bl	8009570 <_svfiprintf_r>
 8007d80:	9b02      	ldr	r3, [sp, #8]
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	b01c      	add	sp, #112	@ 0x70
 8007d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d8c:	b003      	add	sp, #12
 8007d8e:	4770      	bx	lr
 8007d90:	20000028 	.word	0x20000028
 8007d94:	ffff0208 	.word	0xffff0208

08007d98 <__sread>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da0:	f000 f900 	bl	8007fa4 <_read_r>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	bfab      	itete	ge
 8007da8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007daa:	89a3      	ldrhlt	r3, [r4, #12]
 8007dac:	181b      	addge	r3, r3, r0
 8007dae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007db2:	bfac      	ite	ge
 8007db4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007db6:	81a3      	strhlt	r3, [r4, #12]
 8007db8:	bd10      	pop	{r4, pc}

08007dba <__swrite>:
 8007dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dbe:	461f      	mov	r7, r3
 8007dc0:	898b      	ldrh	r3, [r1, #12]
 8007dc2:	05db      	lsls	r3, r3, #23
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4616      	mov	r6, r2
 8007dca:	d505      	bpl.n	8007dd8 <__swrite+0x1e>
 8007dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f000 f8d4 	bl	8007f80 <_lseek_r>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	4632      	mov	r2, r6
 8007de6:	463b      	mov	r3, r7
 8007de8:	4628      	mov	r0, r5
 8007dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dee:	f000 b8fb 	b.w	8007fe8 <_write_r>

08007df2 <__sseek>:
 8007df2:	b510      	push	{r4, lr}
 8007df4:	460c      	mov	r4, r1
 8007df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfa:	f000 f8c1 	bl	8007f80 <_lseek_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	bf15      	itete	ne
 8007e04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e0e:	81a3      	strheq	r3, [r4, #12]
 8007e10:	bf18      	it	ne
 8007e12:	81a3      	strhne	r3, [r4, #12]
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <__sclose>:
 8007e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1a:	f000 b8a1 	b.w	8007f60 <_close_r>

08007e1e <__swbuf_r>:
 8007e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e20:	460e      	mov	r6, r1
 8007e22:	4614      	mov	r4, r2
 8007e24:	4605      	mov	r5, r0
 8007e26:	b118      	cbz	r0, 8007e30 <__swbuf_r+0x12>
 8007e28:	6a03      	ldr	r3, [r0, #32]
 8007e2a:	b90b      	cbnz	r3, 8007e30 <__swbuf_r+0x12>
 8007e2c:	f7ff feee 	bl	8007c0c <__sinit>
 8007e30:	69a3      	ldr	r3, [r4, #24]
 8007e32:	60a3      	str	r3, [r4, #8]
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	071a      	lsls	r2, r3, #28
 8007e38:	d501      	bpl.n	8007e3e <__swbuf_r+0x20>
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	b943      	cbnz	r3, 8007e50 <__swbuf_r+0x32>
 8007e3e:	4621      	mov	r1, r4
 8007e40:	4628      	mov	r0, r5
 8007e42:	f000 f82b 	bl	8007e9c <__swsetup_r>
 8007e46:	b118      	cbz	r0, 8007e50 <__swbuf_r+0x32>
 8007e48:	f04f 37ff 	mov.w	r7, #4294967295
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	6922      	ldr	r2, [r4, #16]
 8007e54:	1a98      	subs	r0, r3, r2
 8007e56:	6963      	ldr	r3, [r4, #20]
 8007e58:	b2f6      	uxtb	r6, r6
 8007e5a:	4283      	cmp	r3, r0
 8007e5c:	4637      	mov	r7, r6
 8007e5e:	dc05      	bgt.n	8007e6c <__swbuf_r+0x4e>
 8007e60:	4621      	mov	r1, r4
 8007e62:	4628      	mov	r0, r5
 8007e64:	f001 fe46 	bl	8009af4 <_fflush_r>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d1ed      	bne.n	8007e48 <__swbuf_r+0x2a>
 8007e6c:	68a3      	ldr	r3, [r4, #8]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	60a3      	str	r3, [r4, #8]
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	6022      	str	r2, [r4, #0]
 8007e78:	701e      	strb	r6, [r3, #0]
 8007e7a:	6962      	ldr	r2, [r4, #20]
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d004      	beq.n	8007e8c <__swbuf_r+0x6e>
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	07db      	lsls	r3, r3, #31
 8007e86:	d5e1      	bpl.n	8007e4c <__swbuf_r+0x2e>
 8007e88:	2e0a      	cmp	r6, #10
 8007e8a:	d1df      	bne.n	8007e4c <__swbuf_r+0x2e>
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f001 fe30 	bl	8009af4 <_fflush_r>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d0d9      	beq.n	8007e4c <__swbuf_r+0x2e>
 8007e98:	e7d6      	b.n	8007e48 <__swbuf_r+0x2a>
	...

08007e9c <__swsetup_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4b29      	ldr	r3, [pc, #164]	@ (8007f44 <__swsetup_r+0xa8>)
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	b118      	cbz	r0, 8007eb0 <__swsetup_r+0x14>
 8007ea8:	6a03      	ldr	r3, [r0, #32]
 8007eaa:	b90b      	cbnz	r3, 8007eb0 <__swsetup_r+0x14>
 8007eac:	f7ff feae 	bl	8007c0c <__sinit>
 8007eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eb4:	0719      	lsls	r1, r3, #28
 8007eb6:	d422      	bmi.n	8007efe <__swsetup_r+0x62>
 8007eb8:	06da      	lsls	r2, r3, #27
 8007eba:	d407      	bmi.n	8007ecc <__swsetup_r+0x30>
 8007ebc:	2209      	movs	r2, #9
 8007ebe:	602a      	str	r2, [r5, #0]
 8007ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ec4:	81a3      	strh	r3, [r4, #12]
 8007ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eca:	e033      	b.n	8007f34 <__swsetup_r+0x98>
 8007ecc:	0758      	lsls	r0, r3, #29
 8007ece:	d512      	bpl.n	8007ef6 <__swsetup_r+0x5a>
 8007ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ed2:	b141      	cbz	r1, 8007ee6 <__swsetup_r+0x4a>
 8007ed4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ed8:	4299      	cmp	r1, r3
 8007eda:	d002      	beq.n	8007ee2 <__swsetup_r+0x46>
 8007edc:	4628      	mov	r0, r5
 8007ede:	f000 ff1f 	bl	8008d20 <_free_r>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	6063      	str	r3, [r4, #4]
 8007ef2:	6923      	ldr	r3, [r4, #16]
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	f043 0308 	orr.w	r3, r3, #8
 8007efc:	81a3      	strh	r3, [r4, #12]
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	b94b      	cbnz	r3, 8007f16 <__swsetup_r+0x7a>
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f0c:	d003      	beq.n	8007f16 <__swsetup_r+0x7a>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f001 fe3d 	bl	8009b90 <__smakebuf_r>
 8007f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f1a:	f013 0201 	ands.w	r2, r3, #1
 8007f1e:	d00a      	beq.n	8007f36 <__swsetup_r+0x9a>
 8007f20:	2200      	movs	r2, #0
 8007f22:	60a2      	str	r2, [r4, #8]
 8007f24:	6962      	ldr	r2, [r4, #20]
 8007f26:	4252      	negs	r2, r2
 8007f28:	61a2      	str	r2, [r4, #24]
 8007f2a:	6922      	ldr	r2, [r4, #16]
 8007f2c:	b942      	cbnz	r2, 8007f40 <__swsetup_r+0xa4>
 8007f2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f32:	d1c5      	bne.n	8007ec0 <__swsetup_r+0x24>
 8007f34:	bd38      	pop	{r3, r4, r5, pc}
 8007f36:	0799      	lsls	r1, r3, #30
 8007f38:	bf58      	it	pl
 8007f3a:	6962      	ldrpl	r2, [r4, #20]
 8007f3c:	60a2      	str	r2, [r4, #8]
 8007f3e:	e7f4      	b.n	8007f2a <__swsetup_r+0x8e>
 8007f40:	2000      	movs	r0, #0
 8007f42:	e7f7      	b.n	8007f34 <__swsetup_r+0x98>
 8007f44:	20000028 	.word	0x20000028

08007f48 <memset>:
 8007f48:	4402      	add	r2, r0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d100      	bne.n	8007f52 <memset+0xa>
 8007f50:	4770      	bx	lr
 8007f52:	f803 1b01 	strb.w	r1, [r3], #1
 8007f56:	e7f9      	b.n	8007f4c <memset+0x4>

08007f58 <_localeconv_r>:
 8007f58:	4800      	ldr	r0, [pc, #0]	@ (8007f5c <_localeconv_r+0x4>)
 8007f5a:	4770      	bx	lr
 8007f5c:	20000168 	.word	0x20000168

08007f60 <_close_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d06      	ldr	r5, [pc, #24]	@ (8007f7c <_close_r+0x1c>)
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	602b      	str	r3, [r5, #0]
 8007f6c:	f7f9 fde0 	bl	8001b30 <_close>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d102      	bne.n	8007f7a <_close_r+0x1a>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	b103      	cbz	r3, 8007f7a <_close_r+0x1a>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	20004dc4 	.word	0x20004dc4

08007f80 <_lseek_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d07      	ldr	r5, [pc, #28]	@ (8007fa0 <_lseek_r+0x20>)
 8007f84:	4604      	mov	r4, r0
 8007f86:	4608      	mov	r0, r1
 8007f88:	4611      	mov	r1, r2
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	602a      	str	r2, [r5, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f7f9 fdf5 	bl	8001b7e <_lseek>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_lseek_r+0x1e>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_lseek_r+0x1e>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	20004dc4 	.word	0x20004dc4

08007fa4 <_read_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d07      	ldr	r5, [pc, #28]	@ (8007fc4 <_read_r+0x20>)
 8007fa8:	4604      	mov	r4, r0
 8007faa:	4608      	mov	r0, r1
 8007fac:	4611      	mov	r1, r2
 8007fae:	2200      	movs	r2, #0
 8007fb0:	602a      	str	r2, [r5, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f7f9 fd9f 	bl	8001af6 <_read>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d102      	bne.n	8007fc2 <_read_r+0x1e>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b103      	cbz	r3, 8007fc2 <_read_r+0x1e>
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	20004dc4 	.word	0x20004dc4

08007fc8 <_sbrk_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d06      	ldr	r5, [pc, #24]	@ (8007fe4 <_sbrk_r+0x1c>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	f7f9 fde0 	bl	8001b98 <_sbrk>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_sbrk_r+0x1a>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_sbrk_r+0x1a>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	20004dc4 	.word	0x20004dc4

08007fe8 <_write_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	@ (8008008 <_write_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7f9 fb14 	bl	8001624 <_write>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_write_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_write_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20004dc4 	.word	0x20004dc4

0800800c <__errno>:
 800800c:	4b01      	ldr	r3, [pc, #4]	@ (8008014 <__errno+0x8>)
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000028 	.word	0x20000028

08008018 <__libc_init_array>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	4d0d      	ldr	r5, [pc, #52]	@ (8008050 <__libc_init_array+0x38>)
 800801c:	4c0d      	ldr	r4, [pc, #52]	@ (8008054 <__libc_init_array+0x3c>)
 800801e:	1b64      	subs	r4, r4, r5
 8008020:	10a4      	asrs	r4, r4, #2
 8008022:	2600      	movs	r6, #0
 8008024:	42a6      	cmp	r6, r4
 8008026:	d109      	bne.n	800803c <__libc_init_array+0x24>
 8008028:	4d0b      	ldr	r5, [pc, #44]	@ (8008058 <__libc_init_array+0x40>)
 800802a:	4c0c      	ldr	r4, [pc, #48]	@ (800805c <__libc_init_array+0x44>)
 800802c:	f002 fe6e 	bl	800ad0c <_init>
 8008030:	1b64      	subs	r4, r4, r5
 8008032:	10a4      	asrs	r4, r4, #2
 8008034:	2600      	movs	r6, #0
 8008036:	42a6      	cmp	r6, r4
 8008038:	d105      	bne.n	8008046 <__libc_init_array+0x2e>
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008040:	4798      	blx	r3
 8008042:	3601      	adds	r6, #1
 8008044:	e7ee      	b.n	8008024 <__libc_init_array+0xc>
 8008046:	f855 3b04 	ldr.w	r3, [r5], #4
 800804a:	4798      	blx	r3
 800804c:	3601      	adds	r6, #1
 800804e:	e7f2      	b.n	8008036 <__libc_init_array+0x1e>
 8008050:	0800b2d8 	.word	0x0800b2d8
 8008054:	0800b2d8 	.word	0x0800b2d8
 8008058:	0800b2d8 	.word	0x0800b2d8
 800805c:	0800b2dc 	.word	0x0800b2dc

08008060 <__retarget_lock_init_recursive>:
 8008060:	4770      	bx	lr

08008062 <__retarget_lock_acquire_recursive>:
 8008062:	4770      	bx	lr

08008064 <__retarget_lock_release_recursive>:
 8008064:	4770      	bx	lr

08008066 <memcpy>:
 8008066:	440a      	add	r2, r1
 8008068:	4291      	cmp	r1, r2
 800806a:	f100 33ff 	add.w	r3, r0, #4294967295
 800806e:	d100      	bne.n	8008072 <memcpy+0xc>
 8008070:	4770      	bx	lr
 8008072:	b510      	push	{r4, lr}
 8008074:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800807c:	4291      	cmp	r1, r2
 800807e:	d1f9      	bne.n	8008074 <memcpy+0xe>
 8008080:	bd10      	pop	{r4, pc}

08008082 <quorem>:
 8008082:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008086:	6903      	ldr	r3, [r0, #16]
 8008088:	690c      	ldr	r4, [r1, #16]
 800808a:	42a3      	cmp	r3, r4
 800808c:	4607      	mov	r7, r0
 800808e:	db7e      	blt.n	800818e <quorem+0x10c>
 8008090:	3c01      	subs	r4, #1
 8008092:	f101 0814 	add.w	r8, r1, #20
 8008096:	00a3      	lsls	r3, r4, #2
 8008098:	f100 0514 	add.w	r5, r0, #20
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080a2:	9301      	str	r3, [sp, #4]
 80080a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080ac:	3301      	adds	r3, #1
 80080ae:	429a      	cmp	r2, r3
 80080b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80080b8:	d32e      	bcc.n	8008118 <quorem+0x96>
 80080ba:	f04f 0a00 	mov.w	sl, #0
 80080be:	46c4      	mov	ip, r8
 80080c0:	46ae      	mov	lr, r5
 80080c2:	46d3      	mov	fp, sl
 80080c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080c8:	b298      	uxth	r0, r3
 80080ca:	fb06 a000 	mla	r0, r6, r0, sl
 80080ce:	0c02      	lsrs	r2, r0, #16
 80080d0:	0c1b      	lsrs	r3, r3, #16
 80080d2:	fb06 2303 	mla	r3, r6, r3, r2
 80080d6:	f8de 2000 	ldr.w	r2, [lr]
 80080da:	b280      	uxth	r0, r0
 80080dc:	b292      	uxth	r2, r2
 80080de:	1a12      	subs	r2, r2, r0
 80080e0:	445a      	add	r2, fp
 80080e2:	f8de 0000 	ldr.w	r0, [lr]
 80080e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80080f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80080f4:	b292      	uxth	r2, r2
 80080f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080fa:	45e1      	cmp	r9, ip
 80080fc:	f84e 2b04 	str.w	r2, [lr], #4
 8008100:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008104:	d2de      	bcs.n	80080c4 <quorem+0x42>
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	58eb      	ldr	r3, [r5, r3]
 800810a:	b92b      	cbnz	r3, 8008118 <quorem+0x96>
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	3b04      	subs	r3, #4
 8008110:	429d      	cmp	r5, r3
 8008112:	461a      	mov	r2, r3
 8008114:	d32f      	bcc.n	8008176 <quorem+0xf4>
 8008116:	613c      	str	r4, [r7, #16]
 8008118:	4638      	mov	r0, r7
 800811a:	f001 f8c5 	bl	80092a8 <__mcmp>
 800811e:	2800      	cmp	r0, #0
 8008120:	db25      	blt.n	800816e <quorem+0xec>
 8008122:	4629      	mov	r1, r5
 8008124:	2000      	movs	r0, #0
 8008126:	f858 2b04 	ldr.w	r2, [r8], #4
 800812a:	f8d1 c000 	ldr.w	ip, [r1]
 800812e:	fa1f fe82 	uxth.w	lr, r2
 8008132:	fa1f f38c 	uxth.w	r3, ip
 8008136:	eba3 030e 	sub.w	r3, r3, lr
 800813a:	4403      	add	r3, r0
 800813c:	0c12      	lsrs	r2, r2, #16
 800813e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008142:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008146:	b29b      	uxth	r3, r3
 8008148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800814c:	45c1      	cmp	r9, r8
 800814e:	f841 3b04 	str.w	r3, [r1], #4
 8008152:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008156:	d2e6      	bcs.n	8008126 <quorem+0xa4>
 8008158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800815c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008160:	b922      	cbnz	r2, 800816c <quorem+0xea>
 8008162:	3b04      	subs	r3, #4
 8008164:	429d      	cmp	r5, r3
 8008166:	461a      	mov	r2, r3
 8008168:	d30b      	bcc.n	8008182 <quorem+0x100>
 800816a:	613c      	str	r4, [r7, #16]
 800816c:	3601      	adds	r6, #1
 800816e:	4630      	mov	r0, r6
 8008170:	b003      	add	sp, #12
 8008172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008176:	6812      	ldr	r2, [r2, #0]
 8008178:	3b04      	subs	r3, #4
 800817a:	2a00      	cmp	r2, #0
 800817c:	d1cb      	bne.n	8008116 <quorem+0x94>
 800817e:	3c01      	subs	r4, #1
 8008180:	e7c6      	b.n	8008110 <quorem+0x8e>
 8008182:	6812      	ldr	r2, [r2, #0]
 8008184:	3b04      	subs	r3, #4
 8008186:	2a00      	cmp	r2, #0
 8008188:	d1ef      	bne.n	800816a <quorem+0xe8>
 800818a:	3c01      	subs	r4, #1
 800818c:	e7ea      	b.n	8008164 <quorem+0xe2>
 800818e:	2000      	movs	r0, #0
 8008190:	e7ee      	b.n	8008170 <quorem+0xee>
 8008192:	0000      	movs	r0, r0
 8008194:	0000      	movs	r0, r0
	...

08008198 <_dtoa_r>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	69c7      	ldr	r7, [r0, #28]
 800819e:	b099      	sub	sp, #100	@ 0x64
 80081a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081a4:	ec55 4b10 	vmov	r4, r5, d0
 80081a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80081aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80081ac:	4683      	mov	fp, r0
 80081ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80081b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081b2:	b97f      	cbnz	r7, 80081d4 <_dtoa_r+0x3c>
 80081b4:	2010      	movs	r0, #16
 80081b6:	f7fe ff87 	bl	80070c8 <malloc>
 80081ba:	4602      	mov	r2, r0
 80081bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80081c0:	b920      	cbnz	r0, 80081cc <_dtoa_r+0x34>
 80081c2:	4ba7      	ldr	r3, [pc, #668]	@ (8008460 <_dtoa_r+0x2c8>)
 80081c4:	21ef      	movs	r1, #239	@ 0xef
 80081c6:	48a7      	ldr	r0, [pc, #668]	@ (8008464 <_dtoa_r+0x2cc>)
 80081c8:	f001 fd5a 	bl	8009c80 <__assert_func>
 80081cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80081d0:	6007      	str	r7, [r0, #0]
 80081d2:	60c7      	str	r7, [r0, #12]
 80081d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	b159      	cbz	r1, 80081f4 <_dtoa_r+0x5c>
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	604a      	str	r2, [r1, #4]
 80081e0:	2301      	movs	r3, #1
 80081e2:	4093      	lsls	r3, r2
 80081e4:	608b      	str	r3, [r1, #8]
 80081e6:	4658      	mov	r0, fp
 80081e8:	f000 fe24 	bl	8008e34 <_Bfree>
 80081ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	1e2b      	subs	r3, r5, #0
 80081f6:	bfb9      	ittee	lt
 80081f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80081fc:	9303      	strlt	r3, [sp, #12]
 80081fe:	2300      	movge	r3, #0
 8008200:	6033      	strge	r3, [r6, #0]
 8008202:	9f03      	ldr	r7, [sp, #12]
 8008204:	4b98      	ldr	r3, [pc, #608]	@ (8008468 <_dtoa_r+0x2d0>)
 8008206:	bfbc      	itt	lt
 8008208:	2201      	movlt	r2, #1
 800820a:	6032      	strlt	r2, [r6, #0]
 800820c:	43bb      	bics	r3, r7
 800820e:	d112      	bne.n	8008236 <_dtoa_r+0x9e>
 8008210:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008212:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800821c:	4323      	orrs	r3, r4
 800821e:	f000 854d 	beq.w	8008cbc <_dtoa_r+0xb24>
 8008222:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008224:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800847c <_dtoa_r+0x2e4>
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 854f 	beq.w	8008ccc <_dtoa_r+0xb34>
 800822e:	f10a 0303 	add.w	r3, sl, #3
 8008232:	f000 bd49 	b.w	8008cc8 <_dtoa_r+0xb30>
 8008236:	ed9d 7b02 	vldr	d7, [sp, #8]
 800823a:	2200      	movs	r2, #0
 800823c:	ec51 0b17 	vmov	r0, r1, d7
 8008240:	2300      	movs	r3, #0
 8008242:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008246:	f7f8 fc3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800824a:	4680      	mov	r8, r0
 800824c:	b158      	cbz	r0, 8008266 <_dtoa_r+0xce>
 800824e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008250:	2301      	movs	r3, #1
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008256:	b113      	cbz	r3, 800825e <_dtoa_r+0xc6>
 8008258:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800825a:	4b84      	ldr	r3, [pc, #528]	@ (800846c <_dtoa_r+0x2d4>)
 800825c:	6013      	str	r3, [r2, #0]
 800825e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008480 <_dtoa_r+0x2e8>
 8008262:	f000 bd33 	b.w	8008ccc <_dtoa_r+0xb34>
 8008266:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800826a:	aa16      	add	r2, sp, #88	@ 0x58
 800826c:	a917      	add	r1, sp, #92	@ 0x5c
 800826e:	4658      	mov	r0, fp
 8008270:	f001 f8ca 	bl	8009408 <__d2b>
 8008274:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008278:	4681      	mov	r9, r0
 800827a:	2e00      	cmp	r6, #0
 800827c:	d077      	beq.n	800836e <_dtoa_r+0x1d6>
 800827e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008280:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800828c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008290:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008294:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008298:	4619      	mov	r1, r3
 800829a:	2200      	movs	r2, #0
 800829c:	4b74      	ldr	r3, [pc, #464]	@ (8008470 <_dtoa_r+0x2d8>)
 800829e:	f7f7 fff3 	bl	8000288 <__aeabi_dsub>
 80082a2:	a369      	add	r3, pc, #420	@ (adr r3, 8008448 <_dtoa_r+0x2b0>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 f9a6 	bl	80005f8 <__aeabi_dmul>
 80082ac:	a368      	add	r3, pc, #416	@ (adr r3, 8008450 <_dtoa_r+0x2b8>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f7 ffeb 	bl	800028c <__adddf3>
 80082b6:	4604      	mov	r4, r0
 80082b8:	4630      	mov	r0, r6
 80082ba:	460d      	mov	r5, r1
 80082bc:	f7f8 f932 	bl	8000524 <__aeabi_i2d>
 80082c0:	a365      	add	r3, pc, #404	@ (adr r3, 8008458 <_dtoa_r+0x2c0>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f7f8 f997 	bl	80005f8 <__aeabi_dmul>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4620      	mov	r0, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	f7f7 ffdb 	bl	800028c <__adddf3>
 80082d6:	4604      	mov	r4, r0
 80082d8:	460d      	mov	r5, r1
 80082da:	f7f8 fc3d 	bl	8000b58 <__aeabi_d2iz>
 80082de:	2200      	movs	r2, #0
 80082e0:	4607      	mov	r7, r0
 80082e2:	2300      	movs	r3, #0
 80082e4:	4620      	mov	r0, r4
 80082e6:	4629      	mov	r1, r5
 80082e8:	f7f8 fbf8 	bl	8000adc <__aeabi_dcmplt>
 80082ec:	b140      	cbz	r0, 8008300 <_dtoa_r+0x168>
 80082ee:	4638      	mov	r0, r7
 80082f0:	f7f8 f918 	bl	8000524 <__aeabi_i2d>
 80082f4:	4622      	mov	r2, r4
 80082f6:	462b      	mov	r3, r5
 80082f8:	f7f8 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 80082fc:	b900      	cbnz	r0, 8008300 <_dtoa_r+0x168>
 80082fe:	3f01      	subs	r7, #1
 8008300:	2f16      	cmp	r7, #22
 8008302:	d851      	bhi.n	80083a8 <_dtoa_r+0x210>
 8008304:	4b5b      	ldr	r3, [pc, #364]	@ (8008474 <_dtoa_r+0x2dc>)
 8008306:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008312:	f7f8 fbe3 	bl	8000adc <__aeabi_dcmplt>
 8008316:	2800      	cmp	r0, #0
 8008318:	d048      	beq.n	80083ac <_dtoa_r+0x214>
 800831a:	3f01      	subs	r7, #1
 800831c:	2300      	movs	r3, #0
 800831e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008320:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008322:	1b9b      	subs	r3, r3, r6
 8008324:	1e5a      	subs	r2, r3, #1
 8008326:	bf44      	itt	mi
 8008328:	f1c3 0801 	rsbmi	r8, r3, #1
 800832c:	2300      	movmi	r3, #0
 800832e:	9208      	str	r2, [sp, #32]
 8008330:	bf54      	ite	pl
 8008332:	f04f 0800 	movpl.w	r8, #0
 8008336:	9308      	strmi	r3, [sp, #32]
 8008338:	2f00      	cmp	r7, #0
 800833a:	db39      	blt.n	80083b0 <_dtoa_r+0x218>
 800833c:	9b08      	ldr	r3, [sp, #32]
 800833e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008340:	443b      	add	r3, r7
 8008342:	9308      	str	r3, [sp, #32]
 8008344:	2300      	movs	r3, #0
 8008346:	930a      	str	r3, [sp, #40]	@ 0x28
 8008348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800834a:	2b09      	cmp	r3, #9
 800834c:	d864      	bhi.n	8008418 <_dtoa_r+0x280>
 800834e:	2b05      	cmp	r3, #5
 8008350:	bfc4      	itt	gt
 8008352:	3b04      	subgt	r3, #4
 8008354:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008358:	f1a3 0302 	sub.w	r3, r3, #2
 800835c:	bfcc      	ite	gt
 800835e:	2400      	movgt	r4, #0
 8008360:	2401      	movle	r4, #1
 8008362:	2b03      	cmp	r3, #3
 8008364:	d863      	bhi.n	800842e <_dtoa_r+0x296>
 8008366:	e8df f003 	tbb	[pc, r3]
 800836a:	372a      	.short	0x372a
 800836c:	5535      	.short	0x5535
 800836e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008372:	441e      	add	r6, r3
 8008374:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008378:	2b20      	cmp	r3, #32
 800837a:	bfc1      	itttt	gt
 800837c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008380:	409f      	lslgt	r7, r3
 8008382:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008386:	fa24 f303 	lsrgt.w	r3, r4, r3
 800838a:	bfd6      	itet	le
 800838c:	f1c3 0320 	rsble	r3, r3, #32
 8008390:	ea47 0003 	orrgt.w	r0, r7, r3
 8008394:	fa04 f003 	lslle.w	r0, r4, r3
 8008398:	f7f8 f8b4 	bl	8000504 <__aeabi_ui2d>
 800839c:	2201      	movs	r2, #1
 800839e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80083a2:	3e01      	subs	r6, #1
 80083a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80083a6:	e777      	b.n	8008298 <_dtoa_r+0x100>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e7b8      	b.n	800831e <_dtoa_r+0x186>
 80083ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80083ae:	e7b7      	b.n	8008320 <_dtoa_r+0x188>
 80083b0:	427b      	negs	r3, r7
 80083b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80083b4:	2300      	movs	r3, #0
 80083b6:	eba8 0807 	sub.w	r8, r8, r7
 80083ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083bc:	e7c4      	b.n	8008348 <_dtoa_r+0x1b0>
 80083be:	2300      	movs	r3, #0
 80083c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dc35      	bgt.n	8008434 <_dtoa_r+0x29c>
 80083c8:	2301      	movs	r3, #1
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	9307      	str	r3, [sp, #28]
 80083ce:	461a      	mov	r2, r3
 80083d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083d2:	e00b      	b.n	80083ec <_dtoa_r+0x254>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e7f3      	b.n	80083c0 <_dtoa_r+0x228>
 80083d8:	2300      	movs	r3, #0
 80083da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	3301      	adds	r3, #1
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	9307      	str	r3, [sp, #28]
 80083e8:	bfb8      	it	lt
 80083ea:	2301      	movlt	r3, #1
 80083ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80083f0:	2100      	movs	r1, #0
 80083f2:	2204      	movs	r2, #4
 80083f4:	f102 0514 	add.w	r5, r2, #20
 80083f8:	429d      	cmp	r5, r3
 80083fa:	d91f      	bls.n	800843c <_dtoa_r+0x2a4>
 80083fc:	6041      	str	r1, [r0, #4]
 80083fe:	4658      	mov	r0, fp
 8008400:	f000 fcd8 	bl	8008db4 <_Balloc>
 8008404:	4682      	mov	sl, r0
 8008406:	2800      	cmp	r0, #0
 8008408:	d13c      	bne.n	8008484 <_dtoa_r+0x2ec>
 800840a:	4b1b      	ldr	r3, [pc, #108]	@ (8008478 <_dtoa_r+0x2e0>)
 800840c:	4602      	mov	r2, r0
 800840e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008412:	e6d8      	b.n	80081c6 <_dtoa_r+0x2e>
 8008414:	2301      	movs	r3, #1
 8008416:	e7e0      	b.n	80083da <_dtoa_r+0x242>
 8008418:	2401      	movs	r4, #1
 800841a:	2300      	movs	r3, #0
 800841c:	9309      	str	r3, [sp, #36]	@ 0x24
 800841e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008420:	f04f 33ff 	mov.w	r3, #4294967295
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	9307      	str	r3, [sp, #28]
 8008428:	2200      	movs	r2, #0
 800842a:	2312      	movs	r3, #18
 800842c:	e7d0      	b.n	80083d0 <_dtoa_r+0x238>
 800842e:	2301      	movs	r3, #1
 8008430:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008432:	e7f5      	b.n	8008420 <_dtoa_r+0x288>
 8008434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	9307      	str	r3, [sp, #28]
 800843a:	e7d7      	b.n	80083ec <_dtoa_r+0x254>
 800843c:	3101      	adds	r1, #1
 800843e:	0052      	lsls	r2, r2, #1
 8008440:	e7d8      	b.n	80083f4 <_dtoa_r+0x25c>
 8008442:	bf00      	nop
 8008444:	f3af 8000 	nop.w
 8008448:	636f4361 	.word	0x636f4361
 800844c:	3fd287a7 	.word	0x3fd287a7
 8008450:	8b60c8b3 	.word	0x8b60c8b3
 8008454:	3fc68a28 	.word	0x3fc68a28
 8008458:	509f79fb 	.word	0x509f79fb
 800845c:	3fd34413 	.word	0x3fd34413
 8008460:	0800af71 	.word	0x0800af71
 8008464:	0800af88 	.word	0x0800af88
 8008468:	7ff00000 	.word	0x7ff00000
 800846c:	0800af41 	.word	0x0800af41
 8008470:	3ff80000 	.word	0x3ff80000
 8008474:	0800b080 	.word	0x0800b080
 8008478:	0800afe0 	.word	0x0800afe0
 800847c:	0800af6d 	.word	0x0800af6d
 8008480:	0800af40 	.word	0x0800af40
 8008484:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008488:	6018      	str	r0, [r3, #0]
 800848a:	9b07      	ldr	r3, [sp, #28]
 800848c:	2b0e      	cmp	r3, #14
 800848e:	f200 80a4 	bhi.w	80085da <_dtoa_r+0x442>
 8008492:	2c00      	cmp	r4, #0
 8008494:	f000 80a1 	beq.w	80085da <_dtoa_r+0x442>
 8008498:	2f00      	cmp	r7, #0
 800849a:	dd33      	ble.n	8008504 <_dtoa_r+0x36c>
 800849c:	4bad      	ldr	r3, [pc, #692]	@ (8008754 <_dtoa_r+0x5bc>)
 800849e:	f007 020f 	and.w	r2, r7, #15
 80084a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084a6:	ed93 7b00 	vldr	d7, [r3]
 80084aa:	05f8      	lsls	r0, r7, #23
 80084ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80084b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80084b4:	d516      	bpl.n	80084e4 <_dtoa_r+0x34c>
 80084b6:	4ba8      	ldr	r3, [pc, #672]	@ (8008758 <_dtoa_r+0x5c0>)
 80084b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084c0:	f7f8 f9c4 	bl	800084c <__aeabi_ddiv>
 80084c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c8:	f004 040f 	and.w	r4, r4, #15
 80084cc:	2603      	movs	r6, #3
 80084ce:	4da2      	ldr	r5, [pc, #648]	@ (8008758 <_dtoa_r+0x5c0>)
 80084d0:	b954      	cbnz	r4, 80084e8 <_dtoa_r+0x350>
 80084d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084da:	f7f8 f9b7 	bl	800084c <__aeabi_ddiv>
 80084de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e2:	e028      	b.n	8008536 <_dtoa_r+0x39e>
 80084e4:	2602      	movs	r6, #2
 80084e6:	e7f2      	b.n	80084ce <_dtoa_r+0x336>
 80084e8:	07e1      	lsls	r1, r4, #31
 80084ea:	d508      	bpl.n	80084fe <_dtoa_r+0x366>
 80084ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084f4:	f7f8 f880 	bl	80005f8 <__aeabi_dmul>
 80084f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084fc:	3601      	adds	r6, #1
 80084fe:	1064      	asrs	r4, r4, #1
 8008500:	3508      	adds	r5, #8
 8008502:	e7e5      	b.n	80084d0 <_dtoa_r+0x338>
 8008504:	f000 80d2 	beq.w	80086ac <_dtoa_r+0x514>
 8008508:	427c      	negs	r4, r7
 800850a:	4b92      	ldr	r3, [pc, #584]	@ (8008754 <_dtoa_r+0x5bc>)
 800850c:	4d92      	ldr	r5, [pc, #584]	@ (8008758 <_dtoa_r+0x5c0>)
 800850e:	f004 020f 	and.w	r2, r4, #15
 8008512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800851e:	f7f8 f86b 	bl	80005f8 <__aeabi_dmul>
 8008522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008526:	1124      	asrs	r4, r4, #4
 8008528:	2300      	movs	r3, #0
 800852a:	2602      	movs	r6, #2
 800852c:	2c00      	cmp	r4, #0
 800852e:	f040 80b2 	bne.w	8008696 <_dtoa_r+0x4fe>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1d3      	bne.n	80084de <_dtoa_r+0x346>
 8008536:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008538:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80b7 	beq.w	80086b0 <_dtoa_r+0x518>
 8008542:	4b86      	ldr	r3, [pc, #536]	@ (800875c <_dtoa_r+0x5c4>)
 8008544:	2200      	movs	r2, #0
 8008546:	4620      	mov	r0, r4
 8008548:	4629      	mov	r1, r5
 800854a:	f7f8 fac7 	bl	8000adc <__aeabi_dcmplt>
 800854e:	2800      	cmp	r0, #0
 8008550:	f000 80ae 	beq.w	80086b0 <_dtoa_r+0x518>
 8008554:	9b07      	ldr	r3, [sp, #28]
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 80aa 	beq.w	80086b0 <_dtoa_r+0x518>
 800855c:	9b00      	ldr	r3, [sp, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	dd37      	ble.n	80085d2 <_dtoa_r+0x43a>
 8008562:	1e7b      	subs	r3, r7, #1
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	4620      	mov	r0, r4
 8008568:	4b7d      	ldr	r3, [pc, #500]	@ (8008760 <_dtoa_r+0x5c8>)
 800856a:	2200      	movs	r2, #0
 800856c:	4629      	mov	r1, r5
 800856e:	f7f8 f843 	bl	80005f8 <__aeabi_dmul>
 8008572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008576:	9c00      	ldr	r4, [sp, #0]
 8008578:	3601      	adds	r6, #1
 800857a:	4630      	mov	r0, r6
 800857c:	f7f7 ffd2 	bl	8000524 <__aeabi_i2d>
 8008580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008584:	f7f8 f838 	bl	80005f8 <__aeabi_dmul>
 8008588:	4b76      	ldr	r3, [pc, #472]	@ (8008764 <_dtoa_r+0x5cc>)
 800858a:	2200      	movs	r2, #0
 800858c:	f7f7 fe7e 	bl	800028c <__adddf3>
 8008590:	4605      	mov	r5, r0
 8008592:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008596:	2c00      	cmp	r4, #0
 8008598:	f040 808d 	bne.w	80086b6 <_dtoa_r+0x51e>
 800859c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a0:	4b71      	ldr	r3, [pc, #452]	@ (8008768 <_dtoa_r+0x5d0>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	f7f7 fe70 	bl	8000288 <__aeabi_dsub>
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085b0:	462a      	mov	r2, r5
 80085b2:	4633      	mov	r3, r6
 80085b4:	f7f8 fab0 	bl	8000b18 <__aeabi_dcmpgt>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	f040 828b 	bne.w	8008ad4 <_dtoa_r+0x93c>
 80085be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085c2:	462a      	mov	r2, r5
 80085c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80085c8:	f7f8 fa88 	bl	8000adc <__aeabi_dcmplt>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	f040 8128 	bne.w	8008822 <_dtoa_r+0x68a>
 80085d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80085d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80085da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f2c0 815a 	blt.w	8008896 <_dtoa_r+0x6fe>
 80085e2:	2f0e      	cmp	r7, #14
 80085e4:	f300 8157 	bgt.w	8008896 <_dtoa_r+0x6fe>
 80085e8:	4b5a      	ldr	r3, [pc, #360]	@ (8008754 <_dtoa_r+0x5bc>)
 80085ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085ee:	ed93 7b00 	vldr	d7, [r3]
 80085f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	ed8d 7b00 	vstr	d7, [sp]
 80085fa:	da03      	bge.n	8008604 <_dtoa_r+0x46c>
 80085fc:	9b07      	ldr	r3, [sp, #28]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f340 8101 	ble.w	8008806 <_dtoa_r+0x66e>
 8008604:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008608:	4656      	mov	r6, sl
 800860a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f8 f91b 	bl	800084c <__aeabi_ddiv>
 8008616:	f7f8 fa9f 	bl	8000b58 <__aeabi_d2iz>
 800861a:	4680      	mov	r8, r0
 800861c:	f7f7 ff82 	bl	8000524 <__aeabi_i2d>
 8008620:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008624:	f7f7 ffe8 	bl	80005f8 <__aeabi_dmul>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008634:	f7f7 fe28 	bl	8000288 <__aeabi_dsub>
 8008638:	f806 4b01 	strb.w	r4, [r6], #1
 800863c:	9d07      	ldr	r5, [sp, #28]
 800863e:	eba6 040a 	sub.w	r4, r6, sl
 8008642:	42a5      	cmp	r5, r4
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	f040 8117 	bne.w	800887a <_dtoa_r+0x6e2>
 800864c:	f7f7 fe1e 	bl	800028c <__adddf3>
 8008650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008654:	4604      	mov	r4, r0
 8008656:	460d      	mov	r5, r1
 8008658:	f7f8 fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 800865c:	2800      	cmp	r0, #0
 800865e:	f040 80f9 	bne.w	8008854 <_dtoa_r+0x6bc>
 8008662:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008666:	4620      	mov	r0, r4
 8008668:	4629      	mov	r1, r5
 800866a:	f7f8 fa2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800866e:	b118      	cbz	r0, 8008678 <_dtoa_r+0x4e0>
 8008670:	f018 0f01 	tst.w	r8, #1
 8008674:	f040 80ee 	bne.w	8008854 <_dtoa_r+0x6bc>
 8008678:	4649      	mov	r1, r9
 800867a:	4658      	mov	r0, fp
 800867c:	f000 fbda 	bl	8008e34 <_Bfree>
 8008680:	2300      	movs	r3, #0
 8008682:	7033      	strb	r3, [r6, #0]
 8008684:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008686:	3701      	adds	r7, #1
 8008688:	601f      	str	r7, [r3, #0]
 800868a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 831d 	beq.w	8008ccc <_dtoa_r+0xb34>
 8008692:	601e      	str	r6, [r3, #0]
 8008694:	e31a      	b.n	8008ccc <_dtoa_r+0xb34>
 8008696:	07e2      	lsls	r2, r4, #31
 8008698:	d505      	bpl.n	80086a6 <_dtoa_r+0x50e>
 800869a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800869e:	f7f7 ffab 	bl	80005f8 <__aeabi_dmul>
 80086a2:	3601      	adds	r6, #1
 80086a4:	2301      	movs	r3, #1
 80086a6:	1064      	asrs	r4, r4, #1
 80086a8:	3508      	adds	r5, #8
 80086aa:	e73f      	b.n	800852c <_dtoa_r+0x394>
 80086ac:	2602      	movs	r6, #2
 80086ae:	e742      	b.n	8008536 <_dtoa_r+0x39e>
 80086b0:	9c07      	ldr	r4, [sp, #28]
 80086b2:	9704      	str	r7, [sp, #16]
 80086b4:	e761      	b.n	800857a <_dtoa_r+0x3e2>
 80086b6:	4b27      	ldr	r3, [pc, #156]	@ (8008754 <_dtoa_r+0x5bc>)
 80086b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086c2:	4454      	add	r4, sl
 80086c4:	2900      	cmp	r1, #0
 80086c6:	d053      	beq.n	8008770 <_dtoa_r+0x5d8>
 80086c8:	4928      	ldr	r1, [pc, #160]	@ (800876c <_dtoa_r+0x5d4>)
 80086ca:	2000      	movs	r0, #0
 80086cc:	f7f8 f8be 	bl	800084c <__aeabi_ddiv>
 80086d0:	4633      	mov	r3, r6
 80086d2:	462a      	mov	r2, r5
 80086d4:	f7f7 fdd8 	bl	8000288 <__aeabi_dsub>
 80086d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086dc:	4656      	mov	r6, sl
 80086de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086e2:	f7f8 fa39 	bl	8000b58 <__aeabi_d2iz>
 80086e6:	4605      	mov	r5, r0
 80086e8:	f7f7 ff1c 	bl	8000524 <__aeabi_i2d>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f4:	f7f7 fdc8 	bl	8000288 <__aeabi_dsub>
 80086f8:	3530      	adds	r5, #48	@ 0x30
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008702:	f806 5b01 	strb.w	r5, [r6], #1
 8008706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800870a:	f7f8 f9e7 	bl	8000adc <__aeabi_dcmplt>
 800870e:	2800      	cmp	r0, #0
 8008710:	d171      	bne.n	80087f6 <_dtoa_r+0x65e>
 8008712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008716:	4911      	ldr	r1, [pc, #68]	@ (800875c <_dtoa_r+0x5c4>)
 8008718:	2000      	movs	r0, #0
 800871a:	f7f7 fdb5 	bl	8000288 <__aeabi_dsub>
 800871e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008722:	f7f8 f9db 	bl	8000adc <__aeabi_dcmplt>
 8008726:	2800      	cmp	r0, #0
 8008728:	f040 8095 	bne.w	8008856 <_dtoa_r+0x6be>
 800872c:	42a6      	cmp	r6, r4
 800872e:	f43f af50 	beq.w	80085d2 <_dtoa_r+0x43a>
 8008732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008736:	4b0a      	ldr	r3, [pc, #40]	@ (8008760 <_dtoa_r+0x5c8>)
 8008738:	2200      	movs	r2, #0
 800873a:	f7f7 ff5d 	bl	80005f8 <__aeabi_dmul>
 800873e:	4b08      	ldr	r3, [pc, #32]	@ (8008760 <_dtoa_r+0x5c8>)
 8008740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008744:	2200      	movs	r2, #0
 8008746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800874a:	f7f7 ff55 	bl	80005f8 <__aeabi_dmul>
 800874e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008752:	e7c4      	b.n	80086de <_dtoa_r+0x546>
 8008754:	0800b080 	.word	0x0800b080
 8008758:	0800b058 	.word	0x0800b058
 800875c:	3ff00000 	.word	0x3ff00000
 8008760:	40240000 	.word	0x40240000
 8008764:	401c0000 	.word	0x401c0000
 8008768:	40140000 	.word	0x40140000
 800876c:	3fe00000 	.word	0x3fe00000
 8008770:	4631      	mov	r1, r6
 8008772:	4628      	mov	r0, r5
 8008774:	f7f7 ff40 	bl	80005f8 <__aeabi_dmul>
 8008778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800877c:	9415      	str	r4, [sp, #84]	@ 0x54
 800877e:	4656      	mov	r6, sl
 8008780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008784:	f7f8 f9e8 	bl	8000b58 <__aeabi_d2iz>
 8008788:	4605      	mov	r5, r0
 800878a:	f7f7 fecb 	bl	8000524 <__aeabi_i2d>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008796:	f7f7 fd77 	bl	8000288 <__aeabi_dsub>
 800879a:	3530      	adds	r5, #48	@ 0x30
 800879c:	f806 5b01 	strb.w	r5, [r6], #1
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	42a6      	cmp	r6, r4
 80087a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087aa:	f04f 0200 	mov.w	r2, #0
 80087ae:	d124      	bne.n	80087fa <_dtoa_r+0x662>
 80087b0:	4bac      	ldr	r3, [pc, #688]	@ (8008a64 <_dtoa_r+0x8cc>)
 80087b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087b6:	f7f7 fd69 	bl	800028c <__adddf3>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087c2:	f7f8 f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d145      	bne.n	8008856 <_dtoa_r+0x6be>
 80087ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087ce:	49a5      	ldr	r1, [pc, #660]	@ (8008a64 <_dtoa_r+0x8cc>)
 80087d0:	2000      	movs	r0, #0
 80087d2:	f7f7 fd59 	bl	8000288 <__aeabi_dsub>
 80087d6:	4602      	mov	r2, r0
 80087d8:	460b      	mov	r3, r1
 80087da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087de:	f7f8 f97d 	bl	8000adc <__aeabi_dcmplt>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f43f aef5 	beq.w	80085d2 <_dtoa_r+0x43a>
 80087e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80087ea:	1e73      	subs	r3, r6, #1
 80087ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80087ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087f2:	2b30      	cmp	r3, #48	@ 0x30
 80087f4:	d0f8      	beq.n	80087e8 <_dtoa_r+0x650>
 80087f6:	9f04      	ldr	r7, [sp, #16]
 80087f8:	e73e      	b.n	8008678 <_dtoa_r+0x4e0>
 80087fa:	4b9b      	ldr	r3, [pc, #620]	@ (8008a68 <_dtoa_r+0x8d0>)
 80087fc:	f7f7 fefc 	bl	80005f8 <__aeabi_dmul>
 8008800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008804:	e7bc      	b.n	8008780 <_dtoa_r+0x5e8>
 8008806:	d10c      	bne.n	8008822 <_dtoa_r+0x68a>
 8008808:	4b98      	ldr	r3, [pc, #608]	@ (8008a6c <_dtoa_r+0x8d4>)
 800880a:	2200      	movs	r2, #0
 800880c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008810:	f7f7 fef2 	bl	80005f8 <__aeabi_dmul>
 8008814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008818:	f7f8 f974 	bl	8000b04 <__aeabi_dcmpge>
 800881c:	2800      	cmp	r0, #0
 800881e:	f000 8157 	beq.w	8008ad0 <_dtoa_r+0x938>
 8008822:	2400      	movs	r4, #0
 8008824:	4625      	mov	r5, r4
 8008826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008828:	43db      	mvns	r3, r3
 800882a:	9304      	str	r3, [sp, #16]
 800882c:	4656      	mov	r6, sl
 800882e:	2700      	movs	r7, #0
 8008830:	4621      	mov	r1, r4
 8008832:	4658      	mov	r0, fp
 8008834:	f000 fafe 	bl	8008e34 <_Bfree>
 8008838:	2d00      	cmp	r5, #0
 800883a:	d0dc      	beq.n	80087f6 <_dtoa_r+0x65e>
 800883c:	b12f      	cbz	r7, 800884a <_dtoa_r+0x6b2>
 800883e:	42af      	cmp	r7, r5
 8008840:	d003      	beq.n	800884a <_dtoa_r+0x6b2>
 8008842:	4639      	mov	r1, r7
 8008844:	4658      	mov	r0, fp
 8008846:	f000 faf5 	bl	8008e34 <_Bfree>
 800884a:	4629      	mov	r1, r5
 800884c:	4658      	mov	r0, fp
 800884e:	f000 faf1 	bl	8008e34 <_Bfree>
 8008852:	e7d0      	b.n	80087f6 <_dtoa_r+0x65e>
 8008854:	9704      	str	r7, [sp, #16]
 8008856:	4633      	mov	r3, r6
 8008858:	461e      	mov	r6, r3
 800885a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885e:	2a39      	cmp	r2, #57	@ 0x39
 8008860:	d107      	bne.n	8008872 <_dtoa_r+0x6da>
 8008862:	459a      	cmp	sl, r3
 8008864:	d1f8      	bne.n	8008858 <_dtoa_r+0x6c0>
 8008866:	9a04      	ldr	r2, [sp, #16]
 8008868:	3201      	adds	r2, #1
 800886a:	9204      	str	r2, [sp, #16]
 800886c:	2230      	movs	r2, #48	@ 0x30
 800886e:	f88a 2000 	strb.w	r2, [sl]
 8008872:	781a      	ldrb	r2, [r3, #0]
 8008874:	3201      	adds	r2, #1
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	e7bd      	b.n	80087f6 <_dtoa_r+0x65e>
 800887a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a68 <_dtoa_r+0x8d0>)
 800887c:	2200      	movs	r2, #0
 800887e:	f7f7 febb 	bl	80005f8 <__aeabi_dmul>
 8008882:	2200      	movs	r2, #0
 8008884:	2300      	movs	r3, #0
 8008886:	4604      	mov	r4, r0
 8008888:	460d      	mov	r5, r1
 800888a:	f7f8 f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 800888e:	2800      	cmp	r0, #0
 8008890:	f43f aebb 	beq.w	800860a <_dtoa_r+0x472>
 8008894:	e6f0      	b.n	8008678 <_dtoa_r+0x4e0>
 8008896:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008898:	2a00      	cmp	r2, #0
 800889a:	f000 80db 	beq.w	8008a54 <_dtoa_r+0x8bc>
 800889e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088a0:	2a01      	cmp	r2, #1
 80088a2:	f300 80bf 	bgt.w	8008a24 <_dtoa_r+0x88c>
 80088a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80088a8:	2a00      	cmp	r2, #0
 80088aa:	f000 80b7 	beq.w	8008a1c <_dtoa_r+0x884>
 80088ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80088b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088b4:	4646      	mov	r6, r8
 80088b6:	9a08      	ldr	r2, [sp, #32]
 80088b8:	2101      	movs	r1, #1
 80088ba:	441a      	add	r2, r3
 80088bc:	4658      	mov	r0, fp
 80088be:	4498      	add	r8, r3
 80088c0:	9208      	str	r2, [sp, #32]
 80088c2:	f000 fb6b 	bl	8008f9c <__i2b>
 80088c6:	4605      	mov	r5, r0
 80088c8:	b15e      	cbz	r6, 80088e2 <_dtoa_r+0x74a>
 80088ca:	9b08      	ldr	r3, [sp, #32]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dd08      	ble.n	80088e2 <_dtoa_r+0x74a>
 80088d0:	42b3      	cmp	r3, r6
 80088d2:	9a08      	ldr	r2, [sp, #32]
 80088d4:	bfa8      	it	ge
 80088d6:	4633      	movge	r3, r6
 80088d8:	eba8 0803 	sub.w	r8, r8, r3
 80088dc:	1af6      	subs	r6, r6, r3
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	9308      	str	r3, [sp, #32]
 80088e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088e4:	b1f3      	cbz	r3, 8008924 <_dtoa_r+0x78c>
 80088e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80b7 	beq.w	8008a5c <_dtoa_r+0x8c4>
 80088ee:	b18c      	cbz	r4, 8008914 <_dtoa_r+0x77c>
 80088f0:	4629      	mov	r1, r5
 80088f2:	4622      	mov	r2, r4
 80088f4:	4658      	mov	r0, fp
 80088f6:	f000 fc11 	bl	800911c <__pow5mult>
 80088fa:	464a      	mov	r2, r9
 80088fc:	4601      	mov	r1, r0
 80088fe:	4605      	mov	r5, r0
 8008900:	4658      	mov	r0, fp
 8008902:	f000 fb61 	bl	8008fc8 <__multiply>
 8008906:	4649      	mov	r1, r9
 8008908:	9004      	str	r0, [sp, #16]
 800890a:	4658      	mov	r0, fp
 800890c:	f000 fa92 	bl	8008e34 <_Bfree>
 8008910:	9b04      	ldr	r3, [sp, #16]
 8008912:	4699      	mov	r9, r3
 8008914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008916:	1b1a      	subs	r2, r3, r4
 8008918:	d004      	beq.n	8008924 <_dtoa_r+0x78c>
 800891a:	4649      	mov	r1, r9
 800891c:	4658      	mov	r0, fp
 800891e:	f000 fbfd 	bl	800911c <__pow5mult>
 8008922:	4681      	mov	r9, r0
 8008924:	2101      	movs	r1, #1
 8008926:	4658      	mov	r0, fp
 8008928:	f000 fb38 	bl	8008f9c <__i2b>
 800892c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800892e:	4604      	mov	r4, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 81cf 	beq.w	8008cd4 <_dtoa_r+0xb3c>
 8008936:	461a      	mov	r2, r3
 8008938:	4601      	mov	r1, r0
 800893a:	4658      	mov	r0, fp
 800893c:	f000 fbee 	bl	800911c <__pow5mult>
 8008940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008942:	2b01      	cmp	r3, #1
 8008944:	4604      	mov	r4, r0
 8008946:	f300 8095 	bgt.w	8008a74 <_dtoa_r+0x8dc>
 800894a:	9b02      	ldr	r3, [sp, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f040 8087 	bne.w	8008a60 <_dtoa_r+0x8c8>
 8008952:	9b03      	ldr	r3, [sp, #12]
 8008954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008958:	2b00      	cmp	r3, #0
 800895a:	f040 8089 	bne.w	8008a70 <_dtoa_r+0x8d8>
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008964:	0d1b      	lsrs	r3, r3, #20
 8008966:	051b      	lsls	r3, r3, #20
 8008968:	b12b      	cbz	r3, 8008976 <_dtoa_r+0x7de>
 800896a:	9b08      	ldr	r3, [sp, #32]
 800896c:	3301      	adds	r3, #1
 800896e:	9308      	str	r3, [sp, #32]
 8008970:	f108 0801 	add.w	r8, r8, #1
 8008974:	2301      	movs	r3, #1
 8008976:	930a      	str	r3, [sp, #40]	@ 0x28
 8008978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 81b0 	beq.w	8008ce0 <_dtoa_r+0xb48>
 8008980:	6923      	ldr	r3, [r4, #16]
 8008982:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008986:	6918      	ldr	r0, [r3, #16]
 8008988:	f000 fabc 	bl	8008f04 <__hi0bits>
 800898c:	f1c0 0020 	rsb	r0, r0, #32
 8008990:	9b08      	ldr	r3, [sp, #32]
 8008992:	4418      	add	r0, r3
 8008994:	f010 001f 	ands.w	r0, r0, #31
 8008998:	d077      	beq.n	8008a8a <_dtoa_r+0x8f2>
 800899a:	f1c0 0320 	rsb	r3, r0, #32
 800899e:	2b04      	cmp	r3, #4
 80089a0:	dd6b      	ble.n	8008a7a <_dtoa_r+0x8e2>
 80089a2:	9b08      	ldr	r3, [sp, #32]
 80089a4:	f1c0 001c 	rsb	r0, r0, #28
 80089a8:	4403      	add	r3, r0
 80089aa:	4480      	add	r8, r0
 80089ac:	4406      	add	r6, r0
 80089ae:	9308      	str	r3, [sp, #32]
 80089b0:	f1b8 0f00 	cmp.w	r8, #0
 80089b4:	dd05      	ble.n	80089c2 <_dtoa_r+0x82a>
 80089b6:	4649      	mov	r1, r9
 80089b8:	4642      	mov	r2, r8
 80089ba:	4658      	mov	r0, fp
 80089bc:	f000 fc08 	bl	80091d0 <__lshift>
 80089c0:	4681      	mov	r9, r0
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	dd05      	ble.n	80089d4 <_dtoa_r+0x83c>
 80089c8:	4621      	mov	r1, r4
 80089ca:	461a      	mov	r2, r3
 80089cc:	4658      	mov	r0, fp
 80089ce:	f000 fbff 	bl	80091d0 <__lshift>
 80089d2:	4604      	mov	r4, r0
 80089d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d059      	beq.n	8008a8e <_dtoa_r+0x8f6>
 80089da:	4621      	mov	r1, r4
 80089dc:	4648      	mov	r0, r9
 80089de:	f000 fc63 	bl	80092a8 <__mcmp>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	da53      	bge.n	8008a8e <_dtoa_r+0x8f6>
 80089e6:	1e7b      	subs	r3, r7, #1
 80089e8:	9304      	str	r3, [sp, #16]
 80089ea:	4649      	mov	r1, r9
 80089ec:	2300      	movs	r3, #0
 80089ee:	220a      	movs	r2, #10
 80089f0:	4658      	mov	r0, fp
 80089f2:	f000 fa41 	bl	8008e78 <__multadd>
 80089f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089f8:	4681      	mov	r9, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 8172 	beq.w	8008ce4 <_dtoa_r+0xb4c>
 8008a00:	2300      	movs	r3, #0
 8008a02:	4629      	mov	r1, r5
 8008a04:	220a      	movs	r2, #10
 8008a06:	4658      	mov	r0, fp
 8008a08:	f000 fa36 	bl	8008e78 <__multadd>
 8008a0c:	9b00      	ldr	r3, [sp, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	4605      	mov	r5, r0
 8008a12:	dc67      	bgt.n	8008ae4 <_dtoa_r+0x94c>
 8008a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	dc41      	bgt.n	8008a9e <_dtoa_r+0x906>
 8008a1a:	e063      	b.n	8008ae4 <_dtoa_r+0x94c>
 8008a1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a22:	e746      	b.n	80088b2 <_dtoa_r+0x71a>
 8008a24:	9b07      	ldr	r3, [sp, #28]
 8008a26:	1e5c      	subs	r4, r3, #1
 8008a28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a2a:	42a3      	cmp	r3, r4
 8008a2c:	bfbf      	itttt	lt
 8008a2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008a32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a34:	1ae3      	sublt	r3, r4, r3
 8008a36:	bfb4      	ite	lt
 8008a38:	18d2      	addlt	r2, r2, r3
 8008a3a:	1b1c      	subge	r4, r3, r4
 8008a3c:	9b07      	ldr	r3, [sp, #28]
 8008a3e:	bfbc      	itt	lt
 8008a40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008a42:	2400      	movlt	r4, #0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bfb5      	itete	lt
 8008a48:	eba8 0603 	sublt.w	r6, r8, r3
 8008a4c:	9b07      	ldrge	r3, [sp, #28]
 8008a4e:	2300      	movlt	r3, #0
 8008a50:	4646      	movge	r6, r8
 8008a52:	e730      	b.n	80088b6 <_dtoa_r+0x71e>
 8008a54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a58:	4646      	mov	r6, r8
 8008a5a:	e735      	b.n	80088c8 <_dtoa_r+0x730>
 8008a5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a5e:	e75c      	b.n	800891a <_dtoa_r+0x782>
 8008a60:	2300      	movs	r3, #0
 8008a62:	e788      	b.n	8008976 <_dtoa_r+0x7de>
 8008a64:	3fe00000 	.word	0x3fe00000
 8008a68:	40240000 	.word	0x40240000
 8008a6c:	40140000 	.word	0x40140000
 8008a70:	9b02      	ldr	r3, [sp, #8]
 8008a72:	e780      	b.n	8008976 <_dtoa_r+0x7de>
 8008a74:	2300      	movs	r3, #0
 8008a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a78:	e782      	b.n	8008980 <_dtoa_r+0x7e8>
 8008a7a:	d099      	beq.n	80089b0 <_dtoa_r+0x818>
 8008a7c:	9a08      	ldr	r2, [sp, #32]
 8008a7e:	331c      	adds	r3, #28
 8008a80:	441a      	add	r2, r3
 8008a82:	4498      	add	r8, r3
 8008a84:	441e      	add	r6, r3
 8008a86:	9208      	str	r2, [sp, #32]
 8008a88:	e792      	b.n	80089b0 <_dtoa_r+0x818>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	e7f6      	b.n	8008a7c <_dtoa_r+0x8e4>
 8008a8e:	9b07      	ldr	r3, [sp, #28]
 8008a90:	9704      	str	r7, [sp, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	dc20      	bgt.n	8008ad8 <_dtoa_r+0x940>
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	dd1e      	ble.n	8008adc <_dtoa_r+0x944>
 8008a9e:	9b00      	ldr	r3, [sp, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f47f aec0 	bne.w	8008826 <_dtoa_r+0x68e>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	2205      	movs	r2, #5
 8008aaa:	4658      	mov	r0, fp
 8008aac:	f000 f9e4 	bl	8008e78 <__multadd>
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4648      	mov	r0, r9
 8008ab6:	f000 fbf7 	bl	80092a8 <__mcmp>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	f77f aeb3 	ble.w	8008826 <_dtoa_r+0x68e>
 8008ac0:	4656      	mov	r6, sl
 8008ac2:	2331      	movs	r3, #49	@ 0x31
 8008ac4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ac8:	9b04      	ldr	r3, [sp, #16]
 8008aca:	3301      	adds	r3, #1
 8008acc:	9304      	str	r3, [sp, #16]
 8008ace:	e6ae      	b.n	800882e <_dtoa_r+0x696>
 8008ad0:	9c07      	ldr	r4, [sp, #28]
 8008ad2:	9704      	str	r7, [sp, #16]
 8008ad4:	4625      	mov	r5, r4
 8008ad6:	e7f3      	b.n	8008ac0 <_dtoa_r+0x928>
 8008ad8:	9b07      	ldr	r3, [sp, #28]
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 8104 	beq.w	8008cec <_dtoa_r+0xb54>
 8008ae4:	2e00      	cmp	r6, #0
 8008ae6:	dd05      	ble.n	8008af4 <_dtoa_r+0x95c>
 8008ae8:	4629      	mov	r1, r5
 8008aea:	4632      	mov	r2, r6
 8008aec:	4658      	mov	r0, fp
 8008aee:	f000 fb6f 	bl	80091d0 <__lshift>
 8008af2:	4605      	mov	r5, r0
 8008af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d05a      	beq.n	8008bb0 <_dtoa_r+0xa18>
 8008afa:	6869      	ldr	r1, [r5, #4]
 8008afc:	4658      	mov	r0, fp
 8008afe:	f000 f959 	bl	8008db4 <_Balloc>
 8008b02:	4606      	mov	r6, r0
 8008b04:	b928      	cbnz	r0, 8008b12 <_dtoa_r+0x97a>
 8008b06:	4b84      	ldr	r3, [pc, #528]	@ (8008d18 <_dtoa_r+0xb80>)
 8008b08:	4602      	mov	r2, r0
 8008b0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b0e:	f7ff bb5a 	b.w	80081c6 <_dtoa_r+0x2e>
 8008b12:	692a      	ldr	r2, [r5, #16]
 8008b14:	3202      	adds	r2, #2
 8008b16:	0092      	lsls	r2, r2, #2
 8008b18:	f105 010c 	add.w	r1, r5, #12
 8008b1c:	300c      	adds	r0, #12
 8008b1e:	f7ff faa2 	bl	8008066 <memcpy>
 8008b22:	2201      	movs	r2, #1
 8008b24:	4631      	mov	r1, r6
 8008b26:	4658      	mov	r0, fp
 8008b28:	f000 fb52 	bl	80091d0 <__lshift>
 8008b2c:	f10a 0301 	add.w	r3, sl, #1
 8008b30:	9307      	str	r3, [sp, #28]
 8008b32:	9b00      	ldr	r3, [sp, #0]
 8008b34:	4453      	add	r3, sl
 8008b36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b38:	9b02      	ldr	r3, [sp, #8]
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	462f      	mov	r7, r5
 8008b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b42:	4605      	mov	r5, r0
 8008b44:	9b07      	ldr	r3, [sp, #28]
 8008b46:	4621      	mov	r1, r4
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	4648      	mov	r0, r9
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	f7ff fa98 	bl	8008082 <quorem>
 8008b52:	4639      	mov	r1, r7
 8008b54:	9002      	str	r0, [sp, #8]
 8008b56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b5a:	4648      	mov	r0, r9
 8008b5c:	f000 fba4 	bl	80092a8 <__mcmp>
 8008b60:	462a      	mov	r2, r5
 8008b62:	9008      	str	r0, [sp, #32]
 8008b64:	4621      	mov	r1, r4
 8008b66:	4658      	mov	r0, fp
 8008b68:	f000 fbba 	bl	80092e0 <__mdiff>
 8008b6c:	68c2      	ldr	r2, [r0, #12]
 8008b6e:	4606      	mov	r6, r0
 8008b70:	bb02      	cbnz	r2, 8008bb4 <_dtoa_r+0xa1c>
 8008b72:	4601      	mov	r1, r0
 8008b74:	4648      	mov	r0, r9
 8008b76:	f000 fb97 	bl	80092a8 <__mcmp>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4658      	mov	r0, fp
 8008b80:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b82:	f000 f957 	bl	8008e34 <_Bfree>
 8008b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b8a:	9e07      	ldr	r6, [sp, #28]
 8008b8c:	ea43 0102 	orr.w	r1, r3, r2
 8008b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b92:	4319      	orrs	r1, r3
 8008b94:	d110      	bne.n	8008bb8 <_dtoa_r+0xa20>
 8008b96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b9a:	d029      	beq.n	8008bf0 <_dtoa_r+0xa58>
 8008b9c:	9b08      	ldr	r3, [sp, #32]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dd02      	ble.n	8008ba8 <_dtoa_r+0xa10>
 8008ba2:	9b02      	ldr	r3, [sp, #8]
 8008ba4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ba8:	9b00      	ldr	r3, [sp, #0]
 8008baa:	f883 8000 	strb.w	r8, [r3]
 8008bae:	e63f      	b.n	8008830 <_dtoa_r+0x698>
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	e7bb      	b.n	8008b2c <_dtoa_r+0x994>
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	e7e1      	b.n	8008b7c <_dtoa_r+0x9e4>
 8008bb8:	9b08      	ldr	r3, [sp, #32]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	db04      	blt.n	8008bc8 <_dtoa_r+0xa30>
 8008bbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bc4:	430b      	orrs	r3, r1
 8008bc6:	d120      	bne.n	8008c0a <_dtoa_r+0xa72>
 8008bc8:	2a00      	cmp	r2, #0
 8008bca:	dded      	ble.n	8008ba8 <_dtoa_r+0xa10>
 8008bcc:	4649      	mov	r1, r9
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4658      	mov	r0, fp
 8008bd2:	f000 fafd 	bl	80091d0 <__lshift>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4681      	mov	r9, r0
 8008bda:	f000 fb65 	bl	80092a8 <__mcmp>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	dc03      	bgt.n	8008bea <_dtoa_r+0xa52>
 8008be2:	d1e1      	bne.n	8008ba8 <_dtoa_r+0xa10>
 8008be4:	f018 0f01 	tst.w	r8, #1
 8008be8:	d0de      	beq.n	8008ba8 <_dtoa_r+0xa10>
 8008bea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bee:	d1d8      	bne.n	8008ba2 <_dtoa_r+0xa0a>
 8008bf0:	9a00      	ldr	r2, [sp, #0]
 8008bf2:	2339      	movs	r3, #57	@ 0x39
 8008bf4:	7013      	strb	r3, [r2, #0]
 8008bf6:	4633      	mov	r3, r6
 8008bf8:	461e      	mov	r6, r3
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c00:	2a39      	cmp	r2, #57	@ 0x39
 8008c02:	d052      	beq.n	8008caa <_dtoa_r+0xb12>
 8008c04:	3201      	adds	r2, #1
 8008c06:	701a      	strb	r2, [r3, #0]
 8008c08:	e612      	b.n	8008830 <_dtoa_r+0x698>
 8008c0a:	2a00      	cmp	r2, #0
 8008c0c:	dd07      	ble.n	8008c1e <_dtoa_r+0xa86>
 8008c0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c12:	d0ed      	beq.n	8008bf0 <_dtoa_r+0xa58>
 8008c14:	9a00      	ldr	r2, [sp, #0]
 8008c16:	f108 0301 	add.w	r3, r8, #1
 8008c1a:	7013      	strb	r3, [r2, #0]
 8008c1c:	e608      	b.n	8008830 <_dtoa_r+0x698>
 8008c1e:	9b07      	ldr	r3, [sp, #28]
 8008c20:	9a07      	ldr	r2, [sp, #28]
 8008c22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d028      	beq.n	8008c7e <_dtoa_r+0xae6>
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	2300      	movs	r3, #0
 8008c30:	220a      	movs	r2, #10
 8008c32:	4658      	mov	r0, fp
 8008c34:	f000 f920 	bl	8008e78 <__multadd>
 8008c38:	42af      	cmp	r7, r5
 8008c3a:	4681      	mov	r9, r0
 8008c3c:	f04f 0300 	mov.w	r3, #0
 8008c40:	f04f 020a 	mov.w	r2, #10
 8008c44:	4639      	mov	r1, r7
 8008c46:	4658      	mov	r0, fp
 8008c48:	d107      	bne.n	8008c5a <_dtoa_r+0xac2>
 8008c4a:	f000 f915 	bl	8008e78 <__multadd>
 8008c4e:	4607      	mov	r7, r0
 8008c50:	4605      	mov	r5, r0
 8008c52:	9b07      	ldr	r3, [sp, #28]
 8008c54:	3301      	adds	r3, #1
 8008c56:	9307      	str	r3, [sp, #28]
 8008c58:	e774      	b.n	8008b44 <_dtoa_r+0x9ac>
 8008c5a:	f000 f90d 	bl	8008e78 <__multadd>
 8008c5e:	4629      	mov	r1, r5
 8008c60:	4607      	mov	r7, r0
 8008c62:	2300      	movs	r3, #0
 8008c64:	220a      	movs	r2, #10
 8008c66:	4658      	mov	r0, fp
 8008c68:	f000 f906 	bl	8008e78 <__multadd>
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	e7f0      	b.n	8008c52 <_dtoa_r+0xaba>
 8008c70:	9b00      	ldr	r3, [sp, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bfcc      	ite	gt
 8008c76:	461e      	movgt	r6, r3
 8008c78:	2601      	movle	r6, #1
 8008c7a:	4456      	add	r6, sl
 8008c7c:	2700      	movs	r7, #0
 8008c7e:	4649      	mov	r1, r9
 8008c80:	2201      	movs	r2, #1
 8008c82:	4658      	mov	r0, fp
 8008c84:	f000 faa4 	bl	80091d0 <__lshift>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4681      	mov	r9, r0
 8008c8c:	f000 fb0c 	bl	80092a8 <__mcmp>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	dcb0      	bgt.n	8008bf6 <_dtoa_r+0xa5e>
 8008c94:	d102      	bne.n	8008c9c <_dtoa_r+0xb04>
 8008c96:	f018 0f01 	tst.w	r8, #1
 8008c9a:	d1ac      	bne.n	8008bf6 <_dtoa_r+0xa5e>
 8008c9c:	4633      	mov	r3, r6
 8008c9e:	461e      	mov	r6, r3
 8008ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ca4:	2a30      	cmp	r2, #48	@ 0x30
 8008ca6:	d0fa      	beq.n	8008c9e <_dtoa_r+0xb06>
 8008ca8:	e5c2      	b.n	8008830 <_dtoa_r+0x698>
 8008caa:	459a      	cmp	sl, r3
 8008cac:	d1a4      	bne.n	8008bf8 <_dtoa_r+0xa60>
 8008cae:	9b04      	ldr	r3, [sp, #16]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	9304      	str	r3, [sp, #16]
 8008cb4:	2331      	movs	r3, #49	@ 0x31
 8008cb6:	f88a 3000 	strb.w	r3, [sl]
 8008cba:	e5b9      	b.n	8008830 <_dtoa_r+0x698>
 8008cbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d1c <_dtoa_r+0xb84>
 8008cc2:	b11b      	cbz	r3, 8008ccc <_dtoa_r+0xb34>
 8008cc4:	f10a 0308 	add.w	r3, sl, #8
 8008cc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	4650      	mov	r0, sl
 8008cce:	b019      	add	sp, #100	@ 0x64
 8008cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	f77f ae37 	ble.w	800894a <_dtoa_r+0x7b2>
 8008cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	e655      	b.n	8008990 <_dtoa_r+0x7f8>
 8008ce4:	9b00      	ldr	r3, [sp, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f77f aed6 	ble.w	8008a98 <_dtoa_r+0x900>
 8008cec:	4656      	mov	r6, sl
 8008cee:	4621      	mov	r1, r4
 8008cf0:	4648      	mov	r0, r9
 8008cf2:	f7ff f9c6 	bl	8008082 <quorem>
 8008cf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cfa:	f806 8b01 	strb.w	r8, [r6], #1
 8008cfe:	9b00      	ldr	r3, [sp, #0]
 8008d00:	eba6 020a 	sub.w	r2, r6, sl
 8008d04:	4293      	cmp	r3, r2
 8008d06:	ddb3      	ble.n	8008c70 <_dtoa_r+0xad8>
 8008d08:	4649      	mov	r1, r9
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	4658      	mov	r0, fp
 8008d10:	f000 f8b2 	bl	8008e78 <__multadd>
 8008d14:	4681      	mov	r9, r0
 8008d16:	e7ea      	b.n	8008cee <_dtoa_r+0xb56>
 8008d18:	0800afe0 	.word	0x0800afe0
 8008d1c:	0800af64 	.word	0x0800af64

08008d20 <_free_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4605      	mov	r5, r0
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d041      	beq.n	8008dac <_free_r+0x8c>
 8008d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d2c:	1f0c      	subs	r4, r1, #4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bfb8      	it	lt
 8008d32:	18e4      	addlt	r4, r4, r3
 8008d34:	f7fe fa7a 	bl	800722c <__malloc_lock>
 8008d38:	4a1d      	ldr	r2, [pc, #116]	@ (8008db0 <_free_r+0x90>)
 8008d3a:	6813      	ldr	r3, [r2, #0]
 8008d3c:	b933      	cbnz	r3, 8008d4c <_free_r+0x2c>
 8008d3e:	6063      	str	r3, [r4, #4]
 8008d40:	6014      	str	r4, [r2, #0]
 8008d42:	4628      	mov	r0, r5
 8008d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d48:	f7fe ba76 	b.w	8007238 <__malloc_unlock>
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	d908      	bls.n	8008d62 <_free_r+0x42>
 8008d50:	6820      	ldr	r0, [r4, #0]
 8008d52:	1821      	adds	r1, r4, r0
 8008d54:	428b      	cmp	r3, r1
 8008d56:	bf01      	itttt	eq
 8008d58:	6819      	ldreq	r1, [r3, #0]
 8008d5a:	685b      	ldreq	r3, [r3, #4]
 8008d5c:	1809      	addeq	r1, r1, r0
 8008d5e:	6021      	streq	r1, [r4, #0]
 8008d60:	e7ed      	b.n	8008d3e <_free_r+0x1e>
 8008d62:	461a      	mov	r2, r3
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	b10b      	cbz	r3, 8008d6c <_free_r+0x4c>
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	d9fa      	bls.n	8008d62 <_free_r+0x42>
 8008d6c:	6811      	ldr	r1, [r2, #0]
 8008d6e:	1850      	adds	r0, r2, r1
 8008d70:	42a0      	cmp	r0, r4
 8008d72:	d10b      	bne.n	8008d8c <_free_r+0x6c>
 8008d74:	6820      	ldr	r0, [r4, #0]
 8008d76:	4401      	add	r1, r0
 8008d78:	1850      	adds	r0, r2, r1
 8008d7a:	4283      	cmp	r3, r0
 8008d7c:	6011      	str	r1, [r2, #0]
 8008d7e:	d1e0      	bne.n	8008d42 <_free_r+0x22>
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	6053      	str	r3, [r2, #4]
 8008d86:	4408      	add	r0, r1
 8008d88:	6010      	str	r0, [r2, #0]
 8008d8a:	e7da      	b.n	8008d42 <_free_r+0x22>
 8008d8c:	d902      	bls.n	8008d94 <_free_r+0x74>
 8008d8e:	230c      	movs	r3, #12
 8008d90:	602b      	str	r3, [r5, #0]
 8008d92:	e7d6      	b.n	8008d42 <_free_r+0x22>
 8008d94:	6820      	ldr	r0, [r4, #0]
 8008d96:	1821      	adds	r1, r4, r0
 8008d98:	428b      	cmp	r3, r1
 8008d9a:	bf04      	itt	eq
 8008d9c:	6819      	ldreq	r1, [r3, #0]
 8008d9e:	685b      	ldreq	r3, [r3, #4]
 8008da0:	6063      	str	r3, [r4, #4]
 8008da2:	bf04      	itt	eq
 8008da4:	1809      	addeq	r1, r1, r0
 8008da6:	6021      	streq	r1, [r4, #0]
 8008da8:	6054      	str	r4, [r2, #4]
 8008daa:	e7ca      	b.n	8008d42 <_free_r+0x22>
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
 8008dae:	bf00      	nop
 8008db0:	20004c84 	.word	0x20004c84

08008db4 <_Balloc>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	69c6      	ldr	r6, [r0, #28]
 8008db8:	4604      	mov	r4, r0
 8008dba:	460d      	mov	r5, r1
 8008dbc:	b976      	cbnz	r6, 8008ddc <_Balloc+0x28>
 8008dbe:	2010      	movs	r0, #16
 8008dc0:	f7fe f982 	bl	80070c8 <malloc>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	61e0      	str	r0, [r4, #28]
 8008dc8:	b920      	cbnz	r0, 8008dd4 <_Balloc+0x20>
 8008dca:	4b18      	ldr	r3, [pc, #96]	@ (8008e2c <_Balloc+0x78>)
 8008dcc:	4818      	ldr	r0, [pc, #96]	@ (8008e30 <_Balloc+0x7c>)
 8008dce:	216b      	movs	r1, #107	@ 0x6b
 8008dd0:	f000 ff56 	bl	8009c80 <__assert_func>
 8008dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dd8:	6006      	str	r6, [r0, #0]
 8008dda:	60c6      	str	r6, [r0, #12]
 8008ddc:	69e6      	ldr	r6, [r4, #28]
 8008dde:	68f3      	ldr	r3, [r6, #12]
 8008de0:	b183      	cbz	r3, 8008e04 <_Balloc+0x50>
 8008de2:	69e3      	ldr	r3, [r4, #28]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dea:	b9b8      	cbnz	r0, 8008e1c <_Balloc+0x68>
 8008dec:	2101      	movs	r1, #1
 8008dee:	fa01 f605 	lsl.w	r6, r1, r5
 8008df2:	1d72      	adds	r2, r6, #5
 8008df4:	0092      	lsls	r2, r2, #2
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 ff60 	bl	8009cbc <_calloc_r>
 8008dfc:	b160      	cbz	r0, 8008e18 <_Balloc+0x64>
 8008dfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e02:	e00e      	b.n	8008e22 <_Balloc+0x6e>
 8008e04:	2221      	movs	r2, #33	@ 0x21
 8008e06:	2104      	movs	r1, #4
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 ff57 	bl	8009cbc <_calloc_r>
 8008e0e:	69e3      	ldr	r3, [r4, #28]
 8008e10:	60f0      	str	r0, [r6, #12]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e4      	bne.n	8008de2 <_Balloc+0x2e>
 8008e18:	2000      	movs	r0, #0
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	6802      	ldr	r2, [r0, #0]
 8008e1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e22:	2300      	movs	r3, #0
 8008e24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e28:	e7f7      	b.n	8008e1a <_Balloc+0x66>
 8008e2a:	bf00      	nop
 8008e2c:	0800af71 	.word	0x0800af71
 8008e30:	0800aff1 	.word	0x0800aff1

08008e34 <_Bfree>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	69c6      	ldr	r6, [r0, #28]
 8008e38:	4605      	mov	r5, r0
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	b976      	cbnz	r6, 8008e5c <_Bfree+0x28>
 8008e3e:	2010      	movs	r0, #16
 8008e40:	f7fe f942 	bl	80070c8 <malloc>
 8008e44:	4602      	mov	r2, r0
 8008e46:	61e8      	str	r0, [r5, #28]
 8008e48:	b920      	cbnz	r0, 8008e54 <_Bfree+0x20>
 8008e4a:	4b09      	ldr	r3, [pc, #36]	@ (8008e70 <_Bfree+0x3c>)
 8008e4c:	4809      	ldr	r0, [pc, #36]	@ (8008e74 <_Bfree+0x40>)
 8008e4e:	218f      	movs	r1, #143	@ 0x8f
 8008e50:	f000 ff16 	bl	8009c80 <__assert_func>
 8008e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e58:	6006      	str	r6, [r0, #0]
 8008e5a:	60c6      	str	r6, [r0, #12]
 8008e5c:	b13c      	cbz	r4, 8008e6e <_Bfree+0x3a>
 8008e5e:	69eb      	ldr	r3, [r5, #28]
 8008e60:	6862      	ldr	r2, [r4, #4]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e68:	6021      	str	r1, [r4, #0]
 8008e6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	0800af71 	.word	0x0800af71
 8008e74:	0800aff1 	.word	0x0800aff1

08008e78 <__multadd>:
 8008e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7c:	690d      	ldr	r5, [r1, #16]
 8008e7e:	4607      	mov	r7, r0
 8008e80:	460c      	mov	r4, r1
 8008e82:	461e      	mov	r6, r3
 8008e84:	f101 0c14 	add.w	ip, r1, #20
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f8dc 3000 	ldr.w	r3, [ip]
 8008e8e:	b299      	uxth	r1, r3
 8008e90:	fb02 6101 	mla	r1, r2, r1, r6
 8008e94:	0c1e      	lsrs	r6, r3, #16
 8008e96:	0c0b      	lsrs	r3, r1, #16
 8008e98:	fb02 3306 	mla	r3, r2, r6, r3
 8008e9c:	b289      	uxth	r1, r1
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ea4:	4285      	cmp	r5, r0
 8008ea6:	f84c 1b04 	str.w	r1, [ip], #4
 8008eaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008eae:	dcec      	bgt.n	8008e8a <__multadd+0x12>
 8008eb0:	b30e      	cbz	r6, 8008ef6 <__multadd+0x7e>
 8008eb2:	68a3      	ldr	r3, [r4, #8]
 8008eb4:	42ab      	cmp	r3, r5
 8008eb6:	dc19      	bgt.n	8008eec <__multadd+0x74>
 8008eb8:	6861      	ldr	r1, [r4, #4]
 8008eba:	4638      	mov	r0, r7
 8008ebc:	3101      	adds	r1, #1
 8008ebe:	f7ff ff79 	bl	8008db4 <_Balloc>
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	b928      	cbnz	r0, 8008ed2 <__multadd+0x5a>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8008efc <__multadd+0x84>)
 8008eca:	480d      	ldr	r0, [pc, #52]	@ (8008f00 <__multadd+0x88>)
 8008ecc:	21ba      	movs	r1, #186	@ 0xba
 8008ece:	f000 fed7 	bl	8009c80 <__assert_func>
 8008ed2:	6922      	ldr	r2, [r4, #16]
 8008ed4:	3202      	adds	r2, #2
 8008ed6:	f104 010c 	add.w	r1, r4, #12
 8008eda:	0092      	lsls	r2, r2, #2
 8008edc:	300c      	adds	r0, #12
 8008ede:	f7ff f8c2 	bl	8008066 <memcpy>
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	f7ff ffa5 	bl	8008e34 <_Bfree>
 8008eea:	4644      	mov	r4, r8
 8008eec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ef0:	3501      	adds	r5, #1
 8008ef2:	615e      	str	r6, [r3, #20]
 8008ef4:	6125      	str	r5, [r4, #16]
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008efc:	0800afe0 	.word	0x0800afe0
 8008f00:	0800aff1 	.word	0x0800aff1

08008f04 <__hi0bits>:
 8008f04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f08:	4603      	mov	r3, r0
 8008f0a:	bf36      	itet	cc
 8008f0c:	0403      	lslcc	r3, r0, #16
 8008f0e:	2000      	movcs	r0, #0
 8008f10:	2010      	movcc	r0, #16
 8008f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f16:	bf3c      	itt	cc
 8008f18:	021b      	lslcc	r3, r3, #8
 8008f1a:	3008      	addcc	r0, #8
 8008f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f20:	bf3c      	itt	cc
 8008f22:	011b      	lslcc	r3, r3, #4
 8008f24:	3004      	addcc	r0, #4
 8008f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f2a:	bf3c      	itt	cc
 8008f2c:	009b      	lslcc	r3, r3, #2
 8008f2e:	3002      	addcc	r0, #2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	db05      	blt.n	8008f40 <__hi0bits+0x3c>
 8008f34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f38:	f100 0001 	add.w	r0, r0, #1
 8008f3c:	bf08      	it	eq
 8008f3e:	2020      	moveq	r0, #32
 8008f40:	4770      	bx	lr

08008f42 <__lo0bits>:
 8008f42:	6803      	ldr	r3, [r0, #0]
 8008f44:	4602      	mov	r2, r0
 8008f46:	f013 0007 	ands.w	r0, r3, #7
 8008f4a:	d00b      	beq.n	8008f64 <__lo0bits+0x22>
 8008f4c:	07d9      	lsls	r1, r3, #31
 8008f4e:	d421      	bmi.n	8008f94 <__lo0bits+0x52>
 8008f50:	0798      	lsls	r0, r3, #30
 8008f52:	bf49      	itett	mi
 8008f54:	085b      	lsrmi	r3, r3, #1
 8008f56:	089b      	lsrpl	r3, r3, #2
 8008f58:	2001      	movmi	r0, #1
 8008f5a:	6013      	strmi	r3, [r2, #0]
 8008f5c:	bf5c      	itt	pl
 8008f5e:	6013      	strpl	r3, [r2, #0]
 8008f60:	2002      	movpl	r0, #2
 8008f62:	4770      	bx	lr
 8008f64:	b299      	uxth	r1, r3
 8008f66:	b909      	cbnz	r1, 8008f6c <__lo0bits+0x2a>
 8008f68:	0c1b      	lsrs	r3, r3, #16
 8008f6a:	2010      	movs	r0, #16
 8008f6c:	b2d9      	uxtb	r1, r3
 8008f6e:	b909      	cbnz	r1, 8008f74 <__lo0bits+0x32>
 8008f70:	3008      	adds	r0, #8
 8008f72:	0a1b      	lsrs	r3, r3, #8
 8008f74:	0719      	lsls	r1, r3, #28
 8008f76:	bf04      	itt	eq
 8008f78:	091b      	lsreq	r3, r3, #4
 8008f7a:	3004      	addeq	r0, #4
 8008f7c:	0799      	lsls	r1, r3, #30
 8008f7e:	bf04      	itt	eq
 8008f80:	089b      	lsreq	r3, r3, #2
 8008f82:	3002      	addeq	r0, #2
 8008f84:	07d9      	lsls	r1, r3, #31
 8008f86:	d403      	bmi.n	8008f90 <__lo0bits+0x4e>
 8008f88:	085b      	lsrs	r3, r3, #1
 8008f8a:	f100 0001 	add.w	r0, r0, #1
 8008f8e:	d003      	beq.n	8008f98 <__lo0bits+0x56>
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	4770      	bx	lr
 8008f94:	2000      	movs	r0, #0
 8008f96:	4770      	bx	lr
 8008f98:	2020      	movs	r0, #32
 8008f9a:	4770      	bx	lr

08008f9c <__i2b>:
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	f7ff ff07 	bl	8008db4 <_Balloc>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	b928      	cbnz	r0, 8008fb6 <__i2b+0x1a>
 8008faa:	4b05      	ldr	r3, [pc, #20]	@ (8008fc0 <__i2b+0x24>)
 8008fac:	4805      	ldr	r0, [pc, #20]	@ (8008fc4 <__i2b+0x28>)
 8008fae:	f240 1145 	movw	r1, #325	@ 0x145
 8008fb2:	f000 fe65 	bl	8009c80 <__assert_func>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	6144      	str	r4, [r0, #20]
 8008fba:	6103      	str	r3, [r0, #16]
 8008fbc:	bd10      	pop	{r4, pc}
 8008fbe:	bf00      	nop
 8008fc0:	0800afe0 	.word	0x0800afe0
 8008fc4:	0800aff1 	.word	0x0800aff1

08008fc8 <__multiply>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	4614      	mov	r4, r2
 8008fce:	690a      	ldr	r2, [r1, #16]
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	bfa8      	it	ge
 8008fd6:	4623      	movge	r3, r4
 8008fd8:	460f      	mov	r7, r1
 8008fda:	bfa4      	itt	ge
 8008fdc:	460c      	movge	r4, r1
 8008fde:	461f      	movge	r7, r3
 8008fe0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008fe4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008fe8:	68a3      	ldr	r3, [r4, #8]
 8008fea:	6861      	ldr	r1, [r4, #4]
 8008fec:	eb0a 0609 	add.w	r6, sl, r9
 8008ff0:	42b3      	cmp	r3, r6
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	bfb8      	it	lt
 8008ff6:	3101      	addlt	r1, #1
 8008ff8:	f7ff fedc 	bl	8008db4 <_Balloc>
 8008ffc:	b930      	cbnz	r0, 800900c <__multiply+0x44>
 8008ffe:	4602      	mov	r2, r0
 8009000:	4b44      	ldr	r3, [pc, #272]	@ (8009114 <__multiply+0x14c>)
 8009002:	4845      	ldr	r0, [pc, #276]	@ (8009118 <__multiply+0x150>)
 8009004:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009008:	f000 fe3a 	bl	8009c80 <__assert_func>
 800900c:	f100 0514 	add.w	r5, r0, #20
 8009010:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009014:	462b      	mov	r3, r5
 8009016:	2200      	movs	r2, #0
 8009018:	4543      	cmp	r3, r8
 800901a:	d321      	bcc.n	8009060 <__multiply+0x98>
 800901c:	f107 0114 	add.w	r1, r7, #20
 8009020:	f104 0214 	add.w	r2, r4, #20
 8009024:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009028:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800902c:	9302      	str	r3, [sp, #8]
 800902e:	1b13      	subs	r3, r2, r4
 8009030:	3b15      	subs	r3, #21
 8009032:	f023 0303 	bic.w	r3, r3, #3
 8009036:	3304      	adds	r3, #4
 8009038:	f104 0715 	add.w	r7, r4, #21
 800903c:	42ba      	cmp	r2, r7
 800903e:	bf38      	it	cc
 8009040:	2304      	movcc	r3, #4
 8009042:	9301      	str	r3, [sp, #4]
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	9103      	str	r1, [sp, #12]
 8009048:	428b      	cmp	r3, r1
 800904a:	d80c      	bhi.n	8009066 <__multiply+0x9e>
 800904c:	2e00      	cmp	r6, #0
 800904e:	dd03      	ble.n	8009058 <__multiply+0x90>
 8009050:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009054:	2b00      	cmp	r3, #0
 8009056:	d05b      	beq.n	8009110 <__multiply+0x148>
 8009058:	6106      	str	r6, [r0, #16]
 800905a:	b005      	add	sp, #20
 800905c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009060:	f843 2b04 	str.w	r2, [r3], #4
 8009064:	e7d8      	b.n	8009018 <__multiply+0x50>
 8009066:	f8b1 a000 	ldrh.w	sl, [r1]
 800906a:	f1ba 0f00 	cmp.w	sl, #0
 800906e:	d024      	beq.n	80090ba <__multiply+0xf2>
 8009070:	f104 0e14 	add.w	lr, r4, #20
 8009074:	46a9      	mov	r9, r5
 8009076:	f04f 0c00 	mov.w	ip, #0
 800907a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800907e:	f8d9 3000 	ldr.w	r3, [r9]
 8009082:	fa1f fb87 	uxth.w	fp, r7
 8009086:	b29b      	uxth	r3, r3
 8009088:	fb0a 330b 	mla	r3, sl, fp, r3
 800908c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009090:	f8d9 7000 	ldr.w	r7, [r9]
 8009094:	4463      	add	r3, ip
 8009096:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800909a:	fb0a c70b 	mla	r7, sl, fp, ip
 800909e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80090a8:	4572      	cmp	r2, lr
 80090aa:	f849 3b04 	str.w	r3, [r9], #4
 80090ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80090b2:	d8e2      	bhi.n	800907a <__multiply+0xb2>
 80090b4:	9b01      	ldr	r3, [sp, #4]
 80090b6:	f845 c003 	str.w	ip, [r5, r3]
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090c0:	3104      	adds	r1, #4
 80090c2:	f1b9 0f00 	cmp.w	r9, #0
 80090c6:	d021      	beq.n	800910c <__multiply+0x144>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	f104 0c14 	add.w	ip, r4, #20
 80090ce:	46ae      	mov	lr, r5
 80090d0:	f04f 0a00 	mov.w	sl, #0
 80090d4:	f8bc b000 	ldrh.w	fp, [ip]
 80090d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80090dc:	fb09 770b 	mla	r7, r9, fp, r7
 80090e0:	4457      	add	r7, sl
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80090e8:	f84e 3b04 	str.w	r3, [lr], #4
 80090ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090f4:	f8be 3000 	ldrh.w	r3, [lr]
 80090f8:	fb09 330a 	mla	r3, r9, sl, r3
 80090fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009100:	4562      	cmp	r2, ip
 8009102:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009106:	d8e5      	bhi.n	80090d4 <__multiply+0x10c>
 8009108:	9f01      	ldr	r7, [sp, #4]
 800910a:	51eb      	str	r3, [r5, r7]
 800910c:	3504      	adds	r5, #4
 800910e:	e799      	b.n	8009044 <__multiply+0x7c>
 8009110:	3e01      	subs	r6, #1
 8009112:	e79b      	b.n	800904c <__multiply+0x84>
 8009114:	0800afe0 	.word	0x0800afe0
 8009118:	0800aff1 	.word	0x0800aff1

0800911c <__pow5mult>:
 800911c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009120:	4615      	mov	r5, r2
 8009122:	f012 0203 	ands.w	r2, r2, #3
 8009126:	4607      	mov	r7, r0
 8009128:	460e      	mov	r6, r1
 800912a:	d007      	beq.n	800913c <__pow5mult+0x20>
 800912c:	4c25      	ldr	r4, [pc, #148]	@ (80091c4 <__pow5mult+0xa8>)
 800912e:	3a01      	subs	r2, #1
 8009130:	2300      	movs	r3, #0
 8009132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009136:	f7ff fe9f 	bl	8008e78 <__multadd>
 800913a:	4606      	mov	r6, r0
 800913c:	10ad      	asrs	r5, r5, #2
 800913e:	d03d      	beq.n	80091bc <__pow5mult+0xa0>
 8009140:	69fc      	ldr	r4, [r7, #28]
 8009142:	b97c      	cbnz	r4, 8009164 <__pow5mult+0x48>
 8009144:	2010      	movs	r0, #16
 8009146:	f7fd ffbf 	bl	80070c8 <malloc>
 800914a:	4602      	mov	r2, r0
 800914c:	61f8      	str	r0, [r7, #28]
 800914e:	b928      	cbnz	r0, 800915c <__pow5mult+0x40>
 8009150:	4b1d      	ldr	r3, [pc, #116]	@ (80091c8 <__pow5mult+0xac>)
 8009152:	481e      	ldr	r0, [pc, #120]	@ (80091cc <__pow5mult+0xb0>)
 8009154:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009158:	f000 fd92 	bl	8009c80 <__assert_func>
 800915c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009160:	6004      	str	r4, [r0, #0]
 8009162:	60c4      	str	r4, [r0, #12]
 8009164:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800916c:	b94c      	cbnz	r4, 8009182 <__pow5mult+0x66>
 800916e:	f240 2171 	movw	r1, #625	@ 0x271
 8009172:	4638      	mov	r0, r7
 8009174:	f7ff ff12 	bl	8008f9c <__i2b>
 8009178:	2300      	movs	r3, #0
 800917a:	f8c8 0008 	str.w	r0, [r8, #8]
 800917e:	4604      	mov	r4, r0
 8009180:	6003      	str	r3, [r0, #0]
 8009182:	f04f 0900 	mov.w	r9, #0
 8009186:	07eb      	lsls	r3, r5, #31
 8009188:	d50a      	bpl.n	80091a0 <__pow5mult+0x84>
 800918a:	4631      	mov	r1, r6
 800918c:	4622      	mov	r2, r4
 800918e:	4638      	mov	r0, r7
 8009190:	f7ff ff1a 	bl	8008fc8 <__multiply>
 8009194:	4631      	mov	r1, r6
 8009196:	4680      	mov	r8, r0
 8009198:	4638      	mov	r0, r7
 800919a:	f7ff fe4b 	bl	8008e34 <_Bfree>
 800919e:	4646      	mov	r6, r8
 80091a0:	106d      	asrs	r5, r5, #1
 80091a2:	d00b      	beq.n	80091bc <__pow5mult+0xa0>
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	b938      	cbnz	r0, 80091b8 <__pow5mult+0x9c>
 80091a8:	4622      	mov	r2, r4
 80091aa:	4621      	mov	r1, r4
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7ff ff0b 	bl	8008fc8 <__multiply>
 80091b2:	6020      	str	r0, [r4, #0]
 80091b4:	f8c0 9000 	str.w	r9, [r0]
 80091b8:	4604      	mov	r4, r0
 80091ba:	e7e4      	b.n	8009186 <__pow5mult+0x6a>
 80091bc:	4630      	mov	r0, r6
 80091be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c2:	bf00      	nop
 80091c4:	0800b04c 	.word	0x0800b04c
 80091c8:	0800af71 	.word	0x0800af71
 80091cc:	0800aff1 	.word	0x0800aff1

080091d0 <__lshift>:
 80091d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	460c      	mov	r4, r1
 80091d6:	6849      	ldr	r1, [r1, #4]
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091de:	68a3      	ldr	r3, [r4, #8]
 80091e0:	4607      	mov	r7, r0
 80091e2:	4691      	mov	r9, r2
 80091e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091e8:	f108 0601 	add.w	r6, r8, #1
 80091ec:	42b3      	cmp	r3, r6
 80091ee:	db0b      	blt.n	8009208 <__lshift+0x38>
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff fddf 	bl	8008db4 <_Balloc>
 80091f6:	4605      	mov	r5, r0
 80091f8:	b948      	cbnz	r0, 800920e <__lshift+0x3e>
 80091fa:	4602      	mov	r2, r0
 80091fc:	4b28      	ldr	r3, [pc, #160]	@ (80092a0 <__lshift+0xd0>)
 80091fe:	4829      	ldr	r0, [pc, #164]	@ (80092a4 <__lshift+0xd4>)
 8009200:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009204:	f000 fd3c 	bl	8009c80 <__assert_func>
 8009208:	3101      	adds	r1, #1
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	e7ee      	b.n	80091ec <__lshift+0x1c>
 800920e:	2300      	movs	r3, #0
 8009210:	f100 0114 	add.w	r1, r0, #20
 8009214:	f100 0210 	add.w	r2, r0, #16
 8009218:	4618      	mov	r0, r3
 800921a:	4553      	cmp	r3, sl
 800921c:	db33      	blt.n	8009286 <__lshift+0xb6>
 800921e:	6920      	ldr	r0, [r4, #16]
 8009220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009224:	f104 0314 	add.w	r3, r4, #20
 8009228:	f019 091f 	ands.w	r9, r9, #31
 800922c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009230:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009234:	d02b      	beq.n	800928e <__lshift+0xbe>
 8009236:	f1c9 0e20 	rsb	lr, r9, #32
 800923a:	468a      	mov	sl, r1
 800923c:	2200      	movs	r2, #0
 800923e:	6818      	ldr	r0, [r3, #0]
 8009240:	fa00 f009 	lsl.w	r0, r0, r9
 8009244:	4310      	orrs	r0, r2
 8009246:	f84a 0b04 	str.w	r0, [sl], #4
 800924a:	f853 2b04 	ldr.w	r2, [r3], #4
 800924e:	459c      	cmp	ip, r3
 8009250:	fa22 f20e 	lsr.w	r2, r2, lr
 8009254:	d8f3      	bhi.n	800923e <__lshift+0x6e>
 8009256:	ebac 0304 	sub.w	r3, ip, r4
 800925a:	3b15      	subs	r3, #21
 800925c:	f023 0303 	bic.w	r3, r3, #3
 8009260:	3304      	adds	r3, #4
 8009262:	f104 0015 	add.w	r0, r4, #21
 8009266:	4584      	cmp	ip, r0
 8009268:	bf38      	it	cc
 800926a:	2304      	movcc	r3, #4
 800926c:	50ca      	str	r2, [r1, r3]
 800926e:	b10a      	cbz	r2, 8009274 <__lshift+0xa4>
 8009270:	f108 0602 	add.w	r6, r8, #2
 8009274:	3e01      	subs	r6, #1
 8009276:	4638      	mov	r0, r7
 8009278:	612e      	str	r6, [r5, #16]
 800927a:	4621      	mov	r1, r4
 800927c:	f7ff fdda 	bl	8008e34 <_Bfree>
 8009280:	4628      	mov	r0, r5
 8009282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009286:	f842 0f04 	str.w	r0, [r2, #4]!
 800928a:	3301      	adds	r3, #1
 800928c:	e7c5      	b.n	800921a <__lshift+0x4a>
 800928e:	3904      	subs	r1, #4
 8009290:	f853 2b04 	ldr.w	r2, [r3], #4
 8009294:	f841 2f04 	str.w	r2, [r1, #4]!
 8009298:	459c      	cmp	ip, r3
 800929a:	d8f9      	bhi.n	8009290 <__lshift+0xc0>
 800929c:	e7ea      	b.n	8009274 <__lshift+0xa4>
 800929e:	bf00      	nop
 80092a0:	0800afe0 	.word	0x0800afe0
 80092a4:	0800aff1 	.word	0x0800aff1

080092a8 <__mcmp>:
 80092a8:	690a      	ldr	r2, [r1, #16]
 80092aa:	4603      	mov	r3, r0
 80092ac:	6900      	ldr	r0, [r0, #16]
 80092ae:	1a80      	subs	r0, r0, r2
 80092b0:	b530      	push	{r4, r5, lr}
 80092b2:	d10e      	bne.n	80092d2 <__mcmp+0x2a>
 80092b4:	3314      	adds	r3, #20
 80092b6:	3114      	adds	r1, #20
 80092b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092c8:	4295      	cmp	r5, r2
 80092ca:	d003      	beq.n	80092d4 <__mcmp+0x2c>
 80092cc:	d205      	bcs.n	80092da <__mcmp+0x32>
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295
 80092d2:	bd30      	pop	{r4, r5, pc}
 80092d4:	42a3      	cmp	r3, r4
 80092d6:	d3f3      	bcc.n	80092c0 <__mcmp+0x18>
 80092d8:	e7fb      	b.n	80092d2 <__mcmp+0x2a>
 80092da:	2001      	movs	r0, #1
 80092dc:	e7f9      	b.n	80092d2 <__mcmp+0x2a>
	...

080092e0 <__mdiff>:
 80092e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	4689      	mov	r9, r1
 80092e6:	4606      	mov	r6, r0
 80092e8:	4611      	mov	r1, r2
 80092ea:	4648      	mov	r0, r9
 80092ec:	4614      	mov	r4, r2
 80092ee:	f7ff ffdb 	bl	80092a8 <__mcmp>
 80092f2:	1e05      	subs	r5, r0, #0
 80092f4:	d112      	bne.n	800931c <__mdiff+0x3c>
 80092f6:	4629      	mov	r1, r5
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7ff fd5b 	bl	8008db4 <_Balloc>
 80092fe:	4602      	mov	r2, r0
 8009300:	b928      	cbnz	r0, 800930e <__mdiff+0x2e>
 8009302:	4b3f      	ldr	r3, [pc, #252]	@ (8009400 <__mdiff+0x120>)
 8009304:	f240 2137 	movw	r1, #567	@ 0x237
 8009308:	483e      	ldr	r0, [pc, #248]	@ (8009404 <__mdiff+0x124>)
 800930a:	f000 fcb9 	bl	8009c80 <__assert_func>
 800930e:	2301      	movs	r3, #1
 8009310:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009314:	4610      	mov	r0, r2
 8009316:	b003      	add	sp, #12
 8009318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931c:	bfbc      	itt	lt
 800931e:	464b      	movlt	r3, r9
 8009320:	46a1      	movlt	r9, r4
 8009322:	4630      	mov	r0, r6
 8009324:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009328:	bfba      	itte	lt
 800932a:	461c      	movlt	r4, r3
 800932c:	2501      	movlt	r5, #1
 800932e:	2500      	movge	r5, #0
 8009330:	f7ff fd40 	bl	8008db4 <_Balloc>
 8009334:	4602      	mov	r2, r0
 8009336:	b918      	cbnz	r0, 8009340 <__mdiff+0x60>
 8009338:	4b31      	ldr	r3, [pc, #196]	@ (8009400 <__mdiff+0x120>)
 800933a:	f240 2145 	movw	r1, #581	@ 0x245
 800933e:	e7e3      	b.n	8009308 <__mdiff+0x28>
 8009340:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009344:	6926      	ldr	r6, [r4, #16]
 8009346:	60c5      	str	r5, [r0, #12]
 8009348:	f109 0310 	add.w	r3, r9, #16
 800934c:	f109 0514 	add.w	r5, r9, #20
 8009350:	f104 0e14 	add.w	lr, r4, #20
 8009354:	f100 0b14 	add.w	fp, r0, #20
 8009358:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800935c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	46d9      	mov	r9, fp
 8009364:	f04f 0c00 	mov.w	ip, #0
 8009368:	9b01      	ldr	r3, [sp, #4]
 800936a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800936e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	fa1f f38a 	uxth.w	r3, sl
 8009378:	4619      	mov	r1, r3
 800937a:	b283      	uxth	r3, r0
 800937c:	1acb      	subs	r3, r1, r3
 800937e:	0c00      	lsrs	r0, r0, #16
 8009380:	4463      	add	r3, ip
 8009382:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009386:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800938a:	b29b      	uxth	r3, r3
 800938c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009390:	4576      	cmp	r6, lr
 8009392:	f849 3b04 	str.w	r3, [r9], #4
 8009396:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800939a:	d8e5      	bhi.n	8009368 <__mdiff+0x88>
 800939c:	1b33      	subs	r3, r6, r4
 800939e:	3b15      	subs	r3, #21
 80093a0:	f023 0303 	bic.w	r3, r3, #3
 80093a4:	3415      	adds	r4, #21
 80093a6:	3304      	adds	r3, #4
 80093a8:	42a6      	cmp	r6, r4
 80093aa:	bf38      	it	cc
 80093ac:	2304      	movcc	r3, #4
 80093ae:	441d      	add	r5, r3
 80093b0:	445b      	add	r3, fp
 80093b2:	461e      	mov	r6, r3
 80093b4:	462c      	mov	r4, r5
 80093b6:	4544      	cmp	r4, r8
 80093b8:	d30e      	bcc.n	80093d8 <__mdiff+0xf8>
 80093ba:	f108 0103 	add.w	r1, r8, #3
 80093be:	1b49      	subs	r1, r1, r5
 80093c0:	f021 0103 	bic.w	r1, r1, #3
 80093c4:	3d03      	subs	r5, #3
 80093c6:	45a8      	cmp	r8, r5
 80093c8:	bf38      	it	cc
 80093ca:	2100      	movcc	r1, #0
 80093cc:	440b      	add	r3, r1
 80093ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093d2:	b191      	cbz	r1, 80093fa <__mdiff+0x11a>
 80093d4:	6117      	str	r7, [r2, #16]
 80093d6:	e79d      	b.n	8009314 <__mdiff+0x34>
 80093d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80093dc:	46e6      	mov	lr, ip
 80093de:	0c08      	lsrs	r0, r1, #16
 80093e0:	fa1c fc81 	uxtah	ip, ip, r1
 80093e4:	4471      	add	r1, lr
 80093e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80093ea:	b289      	uxth	r1, r1
 80093ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093f0:	f846 1b04 	str.w	r1, [r6], #4
 80093f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093f8:	e7dd      	b.n	80093b6 <__mdiff+0xd6>
 80093fa:	3f01      	subs	r7, #1
 80093fc:	e7e7      	b.n	80093ce <__mdiff+0xee>
 80093fe:	bf00      	nop
 8009400:	0800afe0 	.word	0x0800afe0
 8009404:	0800aff1 	.word	0x0800aff1

08009408 <__d2b>:
 8009408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800940c:	460f      	mov	r7, r1
 800940e:	2101      	movs	r1, #1
 8009410:	ec59 8b10 	vmov	r8, r9, d0
 8009414:	4616      	mov	r6, r2
 8009416:	f7ff fccd 	bl	8008db4 <_Balloc>
 800941a:	4604      	mov	r4, r0
 800941c:	b930      	cbnz	r0, 800942c <__d2b+0x24>
 800941e:	4602      	mov	r2, r0
 8009420:	4b23      	ldr	r3, [pc, #140]	@ (80094b0 <__d2b+0xa8>)
 8009422:	4824      	ldr	r0, [pc, #144]	@ (80094b4 <__d2b+0xac>)
 8009424:	f240 310f 	movw	r1, #783	@ 0x30f
 8009428:	f000 fc2a 	bl	8009c80 <__assert_func>
 800942c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009430:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009434:	b10d      	cbz	r5, 800943a <__d2b+0x32>
 8009436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	f1b8 0300 	subs.w	r3, r8, #0
 8009440:	d023      	beq.n	800948a <__d2b+0x82>
 8009442:	4668      	mov	r0, sp
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	f7ff fd7c 	bl	8008f42 <__lo0bits>
 800944a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800944e:	b1d0      	cbz	r0, 8009486 <__d2b+0x7e>
 8009450:	f1c0 0320 	rsb	r3, r0, #32
 8009454:	fa02 f303 	lsl.w	r3, r2, r3
 8009458:	430b      	orrs	r3, r1
 800945a:	40c2      	lsrs	r2, r0
 800945c:	6163      	str	r3, [r4, #20]
 800945e:	9201      	str	r2, [sp, #4]
 8009460:	9b01      	ldr	r3, [sp, #4]
 8009462:	61a3      	str	r3, [r4, #24]
 8009464:	2b00      	cmp	r3, #0
 8009466:	bf0c      	ite	eq
 8009468:	2201      	moveq	r2, #1
 800946a:	2202      	movne	r2, #2
 800946c:	6122      	str	r2, [r4, #16]
 800946e:	b1a5      	cbz	r5, 800949a <__d2b+0x92>
 8009470:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009474:	4405      	add	r5, r0
 8009476:	603d      	str	r5, [r7, #0]
 8009478:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800947c:	6030      	str	r0, [r6, #0]
 800947e:	4620      	mov	r0, r4
 8009480:	b003      	add	sp, #12
 8009482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009486:	6161      	str	r1, [r4, #20]
 8009488:	e7ea      	b.n	8009460 <__d2b+0x58>
 800948a:	a801      	add	r0, sp, #4
 800948c:	f7ff fd59 	bl	8008f42 <__lo0bits>
 8009490:	9b01      	ldr	r3, [sp, #4]
 8009492:	6163      	str	r3, [r4, #20]
 8009494:	3020      	adds	r0, #32
 8009496:	2201      	movs	r2, #1
 8009498:	e7e8      	b.n	800946c <__d2b+0x64>
 800949a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800949e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80094a2:	6038      	str	r0, [r7, #0]
 80094a4:	6918      	ldr	r0, [r3, #16]
 80094a6:	f7ff fd2d 	bl	8008f04 <__hi0bits>
 80094aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094ae:	e7e5      	b.n	800947c <__d2b+0x74>
 80094b0:	0800afe0 	.word	0x0800afe0
 80094b4:	0800aff1 	.word	0x0800aff1

080094b8 <__ssputs_r>:
 80094b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094bc:	688e      	ldr	r6, [r1, #8]
 80094be:	461f      	mov	r7, r3
 80094c0:	42be      	cmp	r6, r7
 80094c2:	680b      	ldr	r3, [r1, #0]
 80094c4:	4682      	mov	sl, r0
 80094c6:	460c      	mov	r4, r1
 80094c8:	4690      	mov	r8, r2
 80094ca:	d82d      	bhi.n	8009528 <__ssputs_r+0x70>
 80094cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094d4:	d026      	beq.n	8009524 <__ssputs_r+0x6c>
 80094d6:	6965      	ldr	r5, [r4, #20]
 80094d8:	6909      	ldr	r1, [r1, #16]
 80094da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094de:	eba3 0901 	sub.w	r9, r3, r1
 80094e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094e6:	1c7b      	adds	r3, r7, #1
 80094e8:	444b      	add	r3, r9
 80094ea:	106d      	asrs	r5, r5, #1
 80094ec:	429d      	cmp	r5, r3
 80094ee:	bf38      	it	cc
 80094f0:	461d      	movcc	r5, r3
 80094f2:	0553      	lsls	r3, r2, #21
 80094f4:	d527      	bpl.n	8009546 <__ssputs_r+0x8e>
 80094f6:	4629      	mov	r1, r5
 80094f8:	f7fd fe18 	bl	800712c <_malloc_r>
 80094fc:	4606      	mov	r6, r0
 80094fe:	b360      	cbz	r0, 800955a <__ssputs_r+0xa2>
 8009500:	6921      	ldr	r1, [r4, #16]
 8009502:	464a      	mov	r2, r9
 8009504:	f7fe fdaf 	bl	8008066 <memcpy>
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800950e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009512:	81a3      	strh	r3, [r4, #12]
 8009514:	6126      	str	r6, [r4, #16]
 8009516:	6165      	str	r5, [r4, #20]
 8009518:	444e      	add	r6, r9
 800951a:	eba5 0509 	sub.w	r5, r5, r9
 800951e:	6026      	str	r6, [r4, #0]
 8009520:	60a5      	str	r5, [r4, #8]
 8009522:	463e      	mov	r6, r7
 8009524:	42be      	cmp	r6, r7
 8009526:	d900      	bls.n	800952a <__ssputs_r+0x72>
 8009528:	463e      	mov	r6, r7
 800952a:	6820      	ldr	r0, [r4, #0]
 800952c:	4632      	mov	r2, r6
 800952e:	4641      	mov	r1, r8
 8009530:	f000 fb6a 	bl	8009c08 <memmove>
 8009534:	68a3      	ldr	r3, [r4, #8]
 8009536:	1b9b      	subs	r3, r3, r6
 8009538:	60a3      	str	r3, [r4, #8]
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	4433      	add	r3, r6
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	2000      	movs	r0, #0
 8009542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009546:	462a      	mov	r2, r5
 8009548:	f000 fbde 	bl	8009d08 <_realloc_r>
 800954c:	4606      	mov	r6, r0
 800954e:	2800      	cmp	r0, #0
 8009550:	d1e0      	bne.n	8009514 <__ssputs_r+0x5c>
 8009552:	6921      	ldr	r1, [r4, #16]
 8009554:	4650      	mov	r0, sl
 8009556:	f7ff fbe3 	bl	8008d20 <_free_r>
 800955a:	230c      	movs	r3, #12
 800955c:	f8ca 3000 	str.w	r3, [sl]
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	e7e9      	b.n	8009542 <__ssputs_r+0x8a>
	...

08009570 <_svfiprintf_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	4698      	mov	r8, r3
 8009576:	898b      	ldrh	r3, [r1, #12]
 8009578:	061b      	lsls	r3, r3, #24
 800957a:	b09d      	sub	sp, #116	@ 0x74
 800957c:	4607      	mov	r7, r0
 800957e:	460d      	mov	r5, r1
 8009580:	4614      	mov	r4, r2
 8009582:	d510      	bpl.n	80095a6 <_svfiprintf_r+0x36>
 8009584:	690b      	ldr	r3, [r1, #16]
 8009586:	b973      	cbnz	r3, 80095a6 <_svfiprintf_r+0x36>
 8009588:	2140      	movs	r1, #64	@ 0x40
 800958a:	f7fd fdcf 	bl	800712c <_malloc_r>
 800958e:	6028      	str	r0, [r5, #0]
 8009590:	6128      	str	r0, [r5, #16]
 8009592:	b930      	cbnz	r0, 80095a2 <_svfiprintf_r+0x32>
 8009594:	230c      	movs	r3, #12
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	f04f 30ff 	mov.w	r0, #4294967295
 800959c:	b01d      	add	sp, #116	@ 0x74
 800959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a2:	2340      	movs	r3, #64	@ 0x40
 80095a4:	616b      	str	r3, [r5, #20]
 80095a6:	2300      	movs	r3, #0
 80095a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095aa:	2320      	movs	r3, #32
 80095ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095b4:	2330      	movs	r3, #48	@ 0x30
 80095b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009754 <_svfiprintf_r+0x1e4>
 80095ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095be:	f04f 0901 	mov.w	r9, #1
 80095c2:	4623      	mov	r3, r4
 80095c4:	469a      	mov	sl, r3
 80095c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ca:	b10a      	cbz	r2, 80095d0 <_svfiprintf_r+0x60>
 80095cc:	2a25      	cmp	r2, #37	@ 0x25
 80095ce:	d1f9      	bne.n	80095c4 <_svfiprintf_r+0x54>
 80095d0:	ebba 0b04 	subs.w	fp, sl, r4
 80095d4:	d00b      	beq.n	80095ee <_svfiprintf_r+0x7e>
 80095d6:	465b      	mov	r3, fp
 80095d8:	4622      	mov	r2, r4
 80095da:	4629      	mov	r1, r5
 80095dc:	4638      	mov	r0, r7
 80095de:	f7ff ff6b 	bl	80094b8 <__ssputs_r>
 80095e2:	3001      	adds	r0, #1
 80095e4:	f000 80a7 	beq.w	8009736 <_svfiprintf_r+0x1c6>
 80095e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095ea:	445a      	add	r2, fp
 80095ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80095ee:	f89a 3000 	ldrb.w	r3, [sl]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 809f 	beq.w	8009736 <_svfiprintf_r+0x1c6>
 80095f8:	2300      	movs	r3, #0
 80095fa:	f04f 32ff 	mov.w	r2, #4294967295
 80095fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009602:	f10a 0a01 	add.w	sl, sl, #1
 8009606:	9304      	str	r3, [sp, #16]
 8009608:	9307      	str	r3, [sp, #28]
 800960a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800960e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009610:	4654      	mov	r4, sl
 8009612:	2205      	movs	r2, #5
 8009614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009618:	484e      	ldr	r0, [pc, #312]	@ (8009754 <_svfiprintf_r+0x1e4>)
 800961a:	f7f6 fdd9 	bl	80001d0 <memchr>
 800961e:	9a04      	ldr	r2, [sp, #16]
 8009620:	b9d8      	cbnz	r0, 800965a <_svfiprintf_r+0xea>
 8009622:	06d0      	lsls	r0, r2, #27
 8009624:	bf44      	itt	mi
 8009626:	2320      	movmi	r3, #32
 8009628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800962c:	0711      	lsls	r1, r2, #28
 800962e:	bf44      	itt	mi
 8009630:	232b      	movmi	r3, #43	@ 0x2b
 8009632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009636:	f89a 3000 	ldrb.w	r3, [sl]
 800963a:	2b2a      	cmp	r3, #42	@ 0x2a
 800963c:	d015      	beq.n	800966a <_svfiprintf_r+0xfa>
 800963e:	9a07      	ldr	r2, [sp, #28]
 8009640:	4654      	mov	r4, sl
 8009642:	2000      	movs	r0, #0
 8009644:	f04f 0c0a 	mov.w	ip, #10
 8009648:	4621      	mov	r1, r4
 800964a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800964e:	3b30      	subs	r3, #48	@ 0x30
 8009650:	2b09      	cmp	r3, #9
 8009652:	d94b      	bls.n	80096ec <_svfiprintf_r+0x17c>
 8009654:	b1b0      	cbz	r0, 8009684 <_svfiprintf_r+0x114>
 8009656:	9207      	str	r2, [sp, #28]
 8009658:	e014      	b.n	8009684 <_svfiprintf_r+0x114>
 800965a:	eba0 0308 	sub.w	r3, r0, r8
 800965e:	fa09 f303 	lsl.w	r3, r9, r3
 8009662:	4313      	orrs	r3, r2
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	46a2      	mov	sl, r4
 8009668:	e7d2      	b.n	8009610 <_svfiprintf_r+0xa0>
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	1d19      	adds	r1, r3, #4
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	9103      	str	r1, [sp, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	bfbb      	ittet	lt
 8009676:	425b      	neglt	r3, r3
 8009678:	f042 0202 	orrlt.w	r2, r2, #2
 800967c:	9307      	strge	r3, [sp, #28]
 800967e:	9307      	strlt	r3, [sp, #28]
 8009680:	bfb8      	it	lt
 8009682:	9204      	strlt	r2, [sp, #16]
 8009684:	7823      	ldrb	r3, [r4, #0]
 8009686:	2b2e      	cmp	r3, #46	@ 0x2e
 8009688:	d10a      	bne.n	80096a0 <_svfiprintf_r+0x130>
 800968a:	7863      	ldrb	r3, [r4, #1]
 800968c:	2b2a      	cmp	r3, #42	@ 0x2a
 800968e:	d132      	bne.n	80096f6 <_svfiprintf_r+0x186>
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	9203      	str	r2, [sp, #12]
 8009698:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800969c:	3402      	adds	r4, #2
 800969e:	9305      	str	r3, [sp, #20]
 80096a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009764 <_svfiprintf_r+0x1f4>
 80096a4:	7821      	ldrb	r1, [r4, #0]
 80096a6:	2203      	movs	r2, #3
 80096a8:	4650      	mov	r0, sl
 80096aa:	f7f6 fd91 	bl	80001d0 <memchr>
 80096ae:	b138      	cbz	r0, 80096c0 <_svfiprintf_r+0x150>
 80096b0:	9b04      	ldr	r3, [sp, #16]
 80096b2:	eba0 000a 	sub.w	r0, r0, sl
 80096b6:	2240      	movs	r2, #64	@ 0x40
 80096b8:	4082      	lsls	r2, r0
 80096ba:	4313      	orrs	r3, r2
 80096bc:	3401      	adds	r4, #1
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c4:	4824      	ldr	r0, [pc, #144]	@ (8009758 <_svfiprintf_r+0x1e8>)
 80096c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096ca:	2206      	movs	r2, #6
 80096cc:	f7f6 fd80 	bl	80001d0 <memchr>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d036      	beq.n	8009742 <_svfiprintf_r+0x1d2>
 80096d4:	4b21      	ldr	r3, [pc, #132]	@ (800975c <_svfiprintf_r+0x1ec>)
 80096d6:	bb1b      	cbnz	r3, 8009720 <_svfiprintf_r+0x1b0>
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	3307      	adds	r3, #7
 80096dc:	f023 0307 	bic.w	r3, r3, #7
 80096e0:	3308      	adds	r3, #8
 80096e2:	9303      	str	r3, [sp, #12]
 80096e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e6:	4433      	add	r3, r6
 80096e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ea:	e76a      	b.n	80095c2 <_svfiprintf_r+0x52>
 80096ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80096f0:	460c      	mov	r4, r1
 80096f2:	2001      	movs	r0, #1
 80096f4:	e7a8      	b.n	8009648 <_svfiprintf_r+0xd8>
 80096f6:	2300      	movs	r3, #0
 80096f8:	3401      	adds	r4, #1
 80096fa:	9305      	str	r3, [sp, #20]
 80096fc:	4619      	mov	r1, r3
 80096fe:	f04f 0c0a 	mov.w	ip, #10
 8009702:	4620      	mov	r0, r4
 8009704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009708:	3a30      	subs	r2, #48	@ 0x30
 800970a:	2a09      	cmp	r2, #9
 800970c:	d903      	bls.n	8009716 <_svfiprintf_r+0x1a6>
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0c6      	beq.n	80096a0 <_svfiprintf_r+0x130>
 8009712:	9105      	str	r1, [sp, #20]
 8009714:	e7c4      	b.n	80096a0 <_svfiprintf_r+0x130>
 8009716:	fb0c 2101 	mla	r1, ip, r1, r2
 800971a:	4604      	mov	r4, r0
 800971c:	2301      	movs	r3, #1
 800971e:	e7f0      	b.n	8009702 <_svfiprintf_r+0x192>
 8009720:	ab03      	add	r3, sp, #12
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	462a      	mov	r2, r5
 8009726:	4b0e      	ldr	r3, [pc, #56]	@ (8009760 <_svfiprintf_r+0x1f0>)
 8009728:	a904      	add	r1, sp, #16
 800972a:	4638      	mov	r0, r7
 800972c:	f7fd fe2a 	bl	8007384 <_printf_float>
 8009730:	1c42      	adds	r2, r0, #1
 8009732:	4606      	mov	r6, r0
 8009734:	d1d6      	bne.n	80096e4 <_svfiprintf_r+0x174>
 8009736:	89ab      	ldrh	r3, [r5, #12]
 8009738:	065b      	lsls	r3, r3, #25
 800973a:	f53f af2d 	bmi.w	8009598 <_svfiprintf_r+0x28>
 800973e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009740:	e72c      	b.n	800959c <_svfiprintf_r+0x2c>
 8009742:	ab03      	add	r3, sp, #12
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	462a      	mov	r2, r5
 8009748:	4b05      	ldr	r3, [pc, #20]	@ (8009760 <_svfiprintf_r+0x1f0>)
 800974a:	a904      	add	r1, sp, #16
 800974c:	4638      	mov	r0, r7
 800974e:	f7fe f8b1 	bl	80078b4 <_printf_i>
 8009752:	e7ed      	b.n	8009730 <_svfiprintf_r+0x1c0>
 8009754:	0800b148 	.word	0x0800b148
 8009758:	0800b152 	.word	0x0800b152
 800975c:	08007385 	.word	0x08007385
 8009760:	080094b9 	.word	0x080094b9
 8009764:	0800b14e 	.word	0x0800b14e

08009768 <__sfputc_r>:
 8009768:	6893      	ldr	r3, [r2, #8]
 800976a:	3b01      	subs	r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	b410      	push	{r4}
 8009770:	6093      	str	r3, [r2, #8]
 8009772:	da08      	bge.n	8009786 <__sfputc_r+0x1e>
 8009774:	6994      	ldr	r4, [r2, #24]
 8009776:	42a3      	cmp	r3, r4
 8009778:	db01      	blt.n	800977e <__sfputc_r+0x16>
 800977a:	290a      	cmp	r1, #10
 800977c:	d103      	bne.n	8009786 <__sfputc_r+0x1e>
 800977e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009782:	f7fe bb4c 	b.w	8007e1e <__swbuf_r>
 8009786:	6813      	ldr	r3, [r2, #0]
 8009788:	1c58      	adds	r0, r3, #1
 800978a:	6010      	str	r0, [r2, #0]
 800978c:	7019      	strb	r1, [r3, #0]
 800978e:	4608      	mov	r0, r1
 8009790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009794:	4770      	bx	lr

08009796 <__sfputs_r>:
 8009796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009798:	4606      	mov	r6, r0
 800979a:	460f      	mov	r7, r1
 800979c:	4614      	mov	r4, r2
 800979e:	18d5      	adds	r5, r2, r3
 80097a0:	42ac      	cmp	r4, r5
 80097a2:	d101      	bne.n	80097a8 <__sfputs_r+0x12>
 80097a4:	2000      	movs	r0, #0
 80097a6:	e007      	b.n	80097b8 <__sfputs_r+0x22>
 80097a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ac:	463a      	mov	r2, r7
 80097ae:	4630      	mov	r0, r6
 80097b0:	f7ff ffda 	bl	8009768 <__sfputc_r>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d1f3      	bne.n	80097a0 <__sfputs_r+0xa>
 80097b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097bc <_vfiprintf_r>:
 80097bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c0:	460d      	mov	r5, r1
 80097c2:	b09d      	sub	sp, #116	@ 0x74
 80097c4:	4614      	mov	r4, r2
 80097c6:	4698      	mov	r8, r3
 80097c8:	4606      	mov	r6, r0
 80097ca:	b118      	cbz	r0, 80097d4 <_vfiprintf_r+0x18>
 80097cc:	6a03      	ldr	r3, [r0, #32]
 80097ce:	b90b      	cbnz	r3, 80097d4 <_vfiprintf_r+0x18>
 80097d0:	f7fe fa1c 	bl	8007c0c <__sinit>
 80097d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097d6:	07d9      	lsls	r1, r3, #31
 80097d8:	d405      	bmi.n	80097e6 <_vfiprintf_r+0x2a>
 80097da:	89ab      	ldrh	r3, [r5, #12]
 80097dc:	059a      	lsls	r2, r3, #22
 80097de:	d402      	bmi.n	80097e6 <_vfiprintf_r+0x2a>
 80097e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097e2:	f7fe fc3e 	bl	8008062 <__retarget_lock_acquire_recursive>
 80097e6:	89ab      	ldrh	r3, [r5, #12]
 80097e8:	071b      	lsls	r3, r3, #28
 80097ea:	d501      	bpl.n	80097f0 <_vfiprintf_r+0x34>
 80097ec:	692b      	ldr	r3, [r5, #16]
 80097ee:	b99b      	cbnz	r3, 8009818 <_vfiprintf_r+0x5c>
 80097f0:	4629      	mov	r1, r5
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7fe fb52 	bl	8007e9c <__swsetup_r>
 80097f8:	b170      	cbz	r0, 8009818 <_vfiprintf_r+0x5c>
 80097fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097fc:	07dc      	lsls	r4, r3, #31
 80097fe:	d504      	bpl.n	800980a <_vfiprintf_r+0x4e>
 8009800:	f04f 30ff 	mov.w	r0, #4294967295
 8009804:	b01d      	add	sp, #116	@ 0x74
 8009806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	0598      	lsls	r0, r3, #22
 800980e:	d4f7      	bmi.n	8009800 <_vfiprintf_r+0x44>
 8009810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009812:	f7fe fc27 	bl	8008064 <__retarget_lock_release_recursive>
 8009816:	e7f3      	b.n	8009800 <_vfiprintf_r+0x44>
 8009818:	2300      	movs	r3, #0
 800981a:	9309      	str	r3, [sp, #36]	@ 0x24
 800981c:	2320      	movs	r3, #32
 800981e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009822:	f8cd 800c 	str.w	r8, [sp, #12]
 8009826:	2330      	movs	r3, #48	@ 0x30
 8009828:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80099d8 <_vfiprintf_r+0x21c>
 800982c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009830:	f04f 0901 	mov.w	r9, #1
 8009834:	4623      	mov	r3, r4
 8009836:	469a      	mov	sl, r3
 8009838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800983c:	b10a      	cbz	r2, 8009842 <_vfiprintf_r+0x86>
 800983e:	2a25      	cmp	r2, #37	@ 0x25
 8009840:	d1f9      	bne.n	8009836 <_vfiprintf_r+0x7a>
 8009842:	ebba 0b04 	subs.w	fp, sl, r4
 8009846:	d00b      	beq.n	8009860 <_vfiprintf_r+0xa4>
 8009848:	465b      	mov	r3, fp
 800984a:	4622      	mov	r2, r4
 800984c:	4629      	mov	r1, r5
 800984e:	4630      	mov	r0, r6
 8009850:	f7ff ffa1 	bl	8009796 <__sfputs_r>
 8009854:	3001      	adds	r0, #1
 8009856:	f000 80a7 	beq.w	80099a8 <_vfiprintf_r+0x1ec>
 800985a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800985c:	445a      	add	r2, fp
 800985e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009860:	f89a 3000 	ldrb.w	r3, [sl]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 809f 	beq.w	80099a8 <_vfiprintf_r+0x1ec>
 800986a:	2300      	movs	r3, #0
 800986c:	f04f 32ff 	mov.w	r2, #4294967295
 8009870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009874:	f10a 0a01 	add.w	sl, sl, #1
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	9307      	str	r3, [sp, #28]
 800987c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009880:	931a      	str	r3, [sp, #104]	@ 0x68
 8009882:	4654      	mov	r4, sl
 8009884:	2205      	movs	r2, #5
 8009886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988a:	4853      	ldr	r0, [pc, #332]	@ (80099d8 <_vfiprintf_r+0x21c>)
 800988c:	f7f6 fca0 	bl	80001d0 <memchr>
 8009890:	9a04      	ldr	r2, [sp, #16]
 8009892:	b9d8      	cbnz	r0, 80098cc <_vfiprintf_r+0x110>
 8009894:	06d1      	lsls	r1, r2, #27
 8009896:	bf44      	itt	mi
 8009898:	2320      	movmi	r3, #32
 800989a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800989e:	0713      	lsls	r3, r2, #28
 80098a0:	bf44      	itt	mi
 80098a2:	232b      	movmi	r3, #43	@ 0x2b
 80098a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098a8:	f89a 3000 	ldrb.w	r3, [sl]
 80098ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ae:	d015      	beq.n	80098dc <_vfiprintf_r+0x120>
 80098b0:	9a07      	ldr	r2, [sp, #28]
 80098b2:	4654      	mov	r4, sl
 80098b4:	2000      	movs	r0, #0
 80098b6:	f04f 0c0a 	mov.w	ip, #10
 80098ba:	4621      	mov	r1, r4
 80098bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098c0:	3b30      	subs	r3, #48	@ 0x30
 80098c2:	2b09      	cmp	r3, #9
 80098c4:	d94b      	bls.n	800995e <_vfiprintf_r+0x1a2>
 80098c6:	b1b0      	cbz	r0, 80098f6 <_vfiprintf_r+0x13a>
 80098c8:	9207      	str	r2, [sp, #28]
 80098ca:	e014      	b.n	80098f6 <_vfiprintf_r+0x13a>
 80098cc:	eba0 0308 	sub.w	r3, r0, r8
 80098d0:	fa09 f303 	lsl.w	r3, r9, r3
 80098d4:	4313      	orrs	r3, r2
 80098d6:	9304      	str	r3, [sp, #16]
 80098d8:	46a2      	mov	sl, r4
 80098da:	e7d2      	b.n	8009882 <_vfiprintf_r+0xc6>
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	1d19      	adds	r1, r3, #4
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	9103      	str	r1, [sp, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bfbb      	ittet	lt
 80098e8:	425b      	neglt	r3, r3
 80098ea:	f042 0202 	orrlt.w	r2, r2, #2
 80098ee:	9307      	strge	r3, [sp, #28]
 80098f0:	9307      	strlt	r3, [sp, #28]
 80098f2:	bfb8      	it	lt
 80098f4:	9204      	strlt	r2, [sp, #16]
 80098f6:	7823      	ldrb	r3, [r4, #0]
 80098f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80098fa:	d10a      	bne.n	8009912 <_vfiprintf_r+0x156>
 80098fc:	7863      	ldrb	r3, [r4, #1]
 80098fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009900:	d132      	bne.n	8009968 <_vfiprintf_r+0x1ac>
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	1d1a      	adds	r2, r3, #4
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	9203      	str	r2, [sp, #12]
 800990a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800990e:	3402      	adds	r4, #2
 8009910:	9305      	str	r3, [sp, #20]
 8009912:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80099e8 <_vfiprintf_r+0x22c>
 8009916:	7821      	ldrb	r1, [r4, #0]
 8009918:	2203      	movs	r2, #3
 800991a:	4650      	mov	r0, sl
 800991c:	f7f6 fc58 	bl	80001d0 <memchr>
 8009920:	b138      	cbz	r0, 8009932 <_vfiprintf_r+0x176>
 8009922:	9b04      	ldr	r3, [sp, #16]
 8009924:	eba0 000a 	sub.w	r0, r0, sl
 8009928:	2240      	movs	r2, #64	@ 0x40
 800992a:	4082      	lsls	r2, r0
 800992c:	4313      	orrs	r3, r2
 800992e:	3401      	adds	r4, #1
 8009930:	9304      	str	r3, [sp, #16]
 8009932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009936:	4829      	ldr	r0, [pc, #164]	@ (80099dc <_vfiprintf_r+0x220>)
 8009938:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800993c:	2206      	movs	r2, #6
 800993e:	f7f6 fc47 	bl	80001d0 <memchr>
 8009942:	2800      	cmp	r0, #0
 8009944:	d03f      	beq.n	80099c6 <_vfiprintf_r+0x20a>
 8009946:	4b26      	ldr	r3, [pc, #152]	@ (80099e0 <_vfiprintf_r+0x224>)
 8009948:	bb1b      	cbnz	r3, 8009992 <_vfiprintf_r+0x1d6>
 800994a:	9b03      	ldr	r3, [sp, #12]
 800994c:	3307      	adds	r3, #7
 800994e:	f023 0307 	bic.w	r3, r3, #7
 8009952:	3308      	adds	r3, #8
 8009954:	9303      	str	r3, [sp, #12]
 8009956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009958:	443b      	add	r3, r7
 800995a:	9309      	str	r3, [sp, #36]	@ 0x24
 800995c:	e76a      	b.n	8009834 <_vfiprintf_r+0x78>
 800995e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009962:	460c      	mov	r4, r1
 8009964:	2001      	movs	r0, #1
 8009966:	e7a8      	b.n	80098ba <_vfiprintf_r+0xfe>
 8009968:	2300      	movs	r3, #0
 800996a:	3401      	adds	r4, #1
 800996c:	9305      	str	r3, [sp, #20]
 800996e:	4619      	mov	r1, r3
 8009970:	f04f 0c0a 	mov.w	ip, #10
 8009974:	4620      	mov	r0, r4
 8009976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800997a:	3a30      	subs	r2, #48	@ 0x30
 800997c:	2a09      	cmp	r2, #9
 800997e:	d903      	bls.n	8009988 <_vfiprintf_r+0x1cc>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0c6      	beq.n	8009912 <_vfiprintf_r+0x156>
 8009984:	9105      	str	r1, [sp, #20]
 8009986:	e7c4      	b.n	8009912 <_vfiprintf_r+0x156>
 8009988:	fb0c 2101 	mla	r1, ip, r1, r2
 800998c:	4604      	mov	r4, r0
 800998e:	2301      	movs	r3, #1
 8009990:	e7f0      	b.n	8009974 <_vfiprintf_r+0x1b8>
 8009992:	ab03      	add	r3, sp, #12
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	462a      	mov	r2, r5
 8009998:	4b12      	ldr	r3, [pc, #72]	@ (80099e4 <_vfiprintf_r+0x228>)
 800999a:	a904      	add	r1, sp, #16
 800999c:	4630      	mov	r0, r6
 800999e:	f7fd fcf1 	bl	8007384 <_printf_float>
 80099a2:	4607      	mov	r7, r0
 80099a4:	1c78      	adds	r0, r7, #1
 80099a6:	d1d6      	bne.n	8009956 <_vfiprintf_r+0x19a>
 80099a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099aa:	07d9      	lsls	r1, r3, #31
 80099ac:	d405      	bmi.n	80099ba <_vfiprintf_r+0x1fe>
 80099ae:	89ab      	ldrh	r3, [r5, #12]
 80099b0:	059a      	lsls	r2, r3, #22
 80099b2:	d402      	bmi.n	80099ba <_vfiprintf_r+0x1fe>
 80099b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099b6:	f7fe fb55 	bl	8008064 <__retarget_lock_release_recursive>
 80099ba:	89ab      	ldrh	r3, [r5, #12]
 80099bc:	065b      	lsls	r3, r3, #25
 80099be:	f53f af1f 	bmi.w	8009800 <_vfiprintf_r+0x44>
 80099c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099c4:	e71e      	b.n	8009804 <_vfiprintf_r+0x48>
 80099c6:	ab03      	add	r3, sp, #12
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	462a      	mov	r2, r5
 80099cc:	4b05      	ldr	r3, [pc, #20]	@ (80099e4 <_vfiprintf_r+0x228>)
 80099ce:	a904      	add	r1, sp, #16
 80099d0:	4630      	mov	r0, r6
 80099d2:	f7fd ff6f 	bl	80078b4 <_printf_i>
 80099d6:	e7e4      	b.n	80099a2 <_vfiprintf_r+0x1e6>
 80099d8:	0800b148 	.word	0x0800b148
 80099dc:	0800b152 	.word	0x0800b152
 80099e0:	08007385 	.word	0x08007385
 80099e4:	08009797 	.word	0x08009797
 80099e8:	0800b14e 	.word	0x0800b14e

080099ec <__sflush_r>:
 80099ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f4:	0716      	lsls	r6, r2, #28
 80099f6:	4605      	mov	r5, r0
 80099f8:	460c      	mov	r4, r1
 80099fa:	d454      	bmi.n	8009aa6 <__sflush_r+0xba>
 80099fc:	684b      	ldr	r3, [r1, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	dc02      	bgt.n	8009a08 <__sflush_r+0x1c>
 8009a02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	dd48      	ble.n	8009a9a <__sflush_r+0xae>
 8009a08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a0a:	2e00      	cmp	r6, #0
 8009a0c:	d045      	beq.n	8009a9a <__sflush_r+0xae>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a14:	682f      	ldr	r7, [r5, #0]
 8009a16:	6a21      	ldr	r1, [r4, #32]
 8009a18:	602b      	str	r3, [r5, #0]
 8009a1a:	d030      	beq.n	8009a7e <__sflush_r+0x92>
 8009a1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	0759      	lsls	r1, r3, #29
 8009a22:	d505      	bpl.n	8009a30 <__sflush_r+0x44>
 8009a24:	6863      	ldr	r3, [r4, #4]
 8009a26:	1ad2      	subs	r2, r2, r3
 8009a28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a2a:	b10b      	cbz	r3, 8009a30 <__sflush_r+0x44>
 8009a2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a2e:	1ad2      	subs	r2, r2, r3
 8009a30:	2300      	movs	r3, #0
 8009a32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a34:	6a21      	ldr	r1, [r4, #32]
 8009a36:	4628      	mov	r0, r5
 8009a38:	47b0      	blx	r6
 8009a3a:	1c43      	adds	r3, r0, #1
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	d106      	bne.n	8009a4e <__sflush_r+0x62>
 8009a40:	6829      	ldr	r1, [r5, #0]
 8009a42:	291d      	cmp	r1, #29
 8009a44:	d82b      	bhi.n	8009a9e <__sflush_r+0xb2>
 8009a46:	4a2a      	ldr	r2, [pc, #168]	@ (8009af0 <__sflush_r+0x104>)
 8009a48:	410a      	asrs	r2, r1
 8009a4a:	07d6      	lsls	r6, r2, #31
 8009a4c:	d427      	bmi.n	8009a9e <__sflush_r+0xb2>
 8009a4e:	2200      	movs	r2, #0
 8009a50:	6062      	str	r2, [r4, #4]
 8009a52:	04d9      	lsls	r1, r3, #19
 8009a54:	6922      	ldr	r2, [r4, #16]
 8009a56:	6022      	str	r2, [r4, #0]
 8009a58:	d504      	bpl.n	8009a64 <__sflush_r+0x78>
 8009a5a:	1c42      	adds	r2, r0, #1
 8009a5c:	d101      	bne.n	8009a62 <__sflush_r+0x76>
 8009a5e:	682b      	ldr	r3, [r5, #0]
 8009a60:	b903      	cbnz	r3, 8009a64 <__sflush_r+0x78>
 8009a62:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a66:	602f      	str	r7, [r5, #0]
 8009a68:	b1b9      	cbz	r1, 8009a9a <__sflush_r+0xae>
 8009a6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a6e:	4299      	cmp	r1, r3
 8009a70:	d002      	beq.n	8009a78 <__sflush_r+0x8c>
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7ff f954 	bl	8008d20 <_free_r>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a7c:	e00d      	b.n	8009a9a <__sflush_r+0xae>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4628      	mov	r0, r5
 8009a82:	47b0      	blx	r6
 8009a84:	4602      	mov	r2, r0
 8009a86:	1c50      	adds	r0, r2, #1
 8009a88:	d1c9      	bne.n	8009a1e <__sflush_r+0x32>
 8009a8a:	682b      	ldr	r3, [r5, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d0c6      	beq.n	8009a1e <__sflush_r+0x32>
 8009a90:	2b1d      	cmp	r3, #29
 8009a92:	d001      	beq.n	8009a98 <__sflush_r+0xac>
 8009a94:	2b16      	cmp	r3, #22
 8009a96:	d11e      	bne.n	8009ad6 <__sflush_r+0xea>
 8009a98:	602f      	str	r7, [r5, #0]
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	e022      	b.n	8009ae4 <__sflush_r+0xf8>
 8009a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aa2:	b21b      	sxth	r3, r3
 8009aa4:	e01b      	b.n	8009ade <__sflush_r+0xf2>
 8009aa6:	690f      	ldr	r7, [r1, #16]
 8009aa8:	2f00      	cmp	r7, #0
 8009aaa:	d0f6      	beq.n	8009a9a <__sflush_r+0xae>
 8009aac:	0793      	lsls	r3, r2, #30
 8009aae:	680e      	ldr	r6, [r1, #0]
 8009ab0:	bf08      	it	eq
 8009ab2:	694b      	ldreq	r3, [r1, #20]
 8009ab4:	600f      	str	r7, [r1, #0]
 8009ab6:	bf18      	it	ne
 8009ab8:	2300      	movne	r3, #0
 8009aba:	eba6 0807 	sub.w	r8, r6, r7
 8009abe:	608b      	str	r3, [r1, #8]
 8009ac0:	f1b8 0f00 	cmp.w	r8, #0
 8009ac4:	dde9      	ble.n	8009a9a <__sflush_r+0xae>
 8009ac6:	6a21      	ldr	r1, [r4, #32]
 8009ac8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009aca:	4643      	mov	r3, r8
 8009acc:	463a      	mov	r2, r7
 8009ace:	4628      	mov	r0, r5
 8009ad0:	47b0      	blx	r6
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	dc08      	bgt.n	8009ae8 <__sflush_r+0xfc>
 8009ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ade:	81a3      	strh	r3, [r4, #12]
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae8:	4407      	add	r7, r0
 8009aea:	eba8 0800 	sub.w	r8, r8, r0
 8009aee:	e7e7      	b.n	8009ac0 <__sflush_r+0xd4>
 8009af0:	dfbffffe 	.word	0xdfbffffe

08009af4 <_fflush_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	690b      	ldr	r3, [r1, #16]
 8009af8:	4605      	mov	r5, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	b913      	cbnz	r3, 8009b04 <_fflush_r+0x10>
 8009afe:	2500      	movs	r5, #0
 8009b00:	4628      	mov	r0, r5
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	b118      	cbz	r0, 8009b0e <_fflush_r+0x1a>
 8009b06:	6a03      	ldr	r3, [r0, #32]
 8009b08:	b90b      	cbnz	r3, 8009b0e <_fflush_r+0x1a>
 8009b0a:	f7fe f87f 	bl	8007c0c <__sinit>
 8009b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0f3      	beq.n	8009afe <_fflush_r+0xa>
 8009b16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b18:	07d0      	lsls	r0, r2, #31
 8009b1a:	d404      	bmi.n	8009b26 <_fflush_r+0x32>
 8009b1c:	0599      	lsls	r1, r3, #22
 8009b1e:	d402      	bmi.n	8009b26 <_fflush_r+0x32>
 8009b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b22:	f7fe fa9e 	bl	8008062 <__retarget_lock_acquire_recursive>
 8009b26:	4628      	mov	r0, r5
 8009b28:	4621      	mov	r1, r4
 8009b2a:	f7ff ff5f 	bl	80099ec <__sflush_r>
 8009b2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b30:	07da      	lsls	r2, r3, #31
 8009b32:	4605      	mov	r5, r0
 8009b34:	d4e4      	bmi.n	8009b00 <_fflush_r+0xc>
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	059b      	lsls	r3, r3, #22
 8009b3a:	d4e1      	bmi.n	8009b00 <_fflush_r+0xc>
 8009b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b3e:	f7fe fa91 	bl	8008064 <__retarget_lock_release_recursive>
 8009b42:	e7dd      	b.n	8009b00 <_fflush_r+0xc>

08009b44 <__swhatbuf_r>:
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	460c      	mov	r4, r1
 8009b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4c:	2900      	cmp	r1, #0
 8009b4e:	b096      	sub	sp, #88	@ 0x58
 8009b50:	4615      	mov	r5, r2
 8009b52:	461e      	mov	r6, r3
 8009b54:	da0d      	bge.n	8009b72 <__swhatbuf_r+0x2e>
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b5c:	f04f 0100 	mov.w	r1, #0
 8009b60:	bf14      	ite	ne
 8009b62:	2340      	movne	r3, #64	@ 0x40
 8009b64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b68:	2000      	movs	r0, #0
 8009b6a:	6031      	str	r1, [r6, #0]
 8009b6c:	602b      	str	r3, [r5, #0]
 8009b6e:	b016      	add	sp, #88	@ 0x58
 8009b70:	bd70      	pop	{r4, r5, r6, pc}
 8009b72:	466a      	mov	r2, sp
 8009b74:	f000 f862 	bl	8009c3c <_fstat_r>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	dbec      	blt.n	8009b56 <__swhatbuf_r+0x12>
 8009b7c:	9901      	ldr	r1, [sp, #4]
 8009b7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b86:	4259      	negs	r1, r3
 8009b88:	4159      	adcs	r1, r3
 8009b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b8e:	e7eb      	b.n	8009b68 <__swhatbuf_r+0x24>

08009b90 <__smakebuf_r>:
 8009b90:	898b      	ldrh	r3, [r1, #12]
 8009b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b94:	079d      	lsls	r5, r3, #30
 8009b96:	4606      	mov	r6, r0
 8009b98:	460c      	mov	r4, r1
 8009b9a:	d507      	bpl.n	8009bac <__smakebuf_r+0x1c>
 8009b9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	6123      	str	r3, [r4, #16]
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	6163      	str	r3, [r4, #20]
 8009ba8:	b003      	add	sp, #12
 8009baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bac:	ab01      	add	r3, sp, #4
 8009bae:	466a      	mov	r2, sp
 8009bb0:	f7ff ffc8 	bl	8009b44 <__swhatbuf_r>
 8009bb4:	9f00      	ldr	r7, [sp, #0]
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	4639      	mov	r1, r7
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7fd fab6 	bl	800712c <_malloc_r>
 8009bc0:	b948      	cbnz	r0, 8009bd6 <__smakebuf_r+0x46>
 8009bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc6:	059a      	lsls	r2, r3, #22
 8009bc8:	d4ee      	bmi.n	8009ba8 <__smakebuf_r+0x18>
 8009bca:	f023 0303 	bic.w	r3, r3, #3
 8009bce:	f043 0302 	orr.w	r3, r3, #2
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	e7e2      	b.n	8009b9c <__smakebuf_r+0xc>
 8009bd6:	89a3      	ldrh	r3, [r4, #12]
 8009bd8:	6020      	str	r0, [r4, #0]
 8009bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bde:	81a3      	strh	r3, [r4, #12]
 8009be0:	9b01      	ldr	r3, [sp, #4]
 8009be2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009be6:	b15b      	cbz	r3, 8009c00 <__smakebuf_r+0x70>
 8009be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bec:	4630      	mov	r0, r6
 8009bee:	f000 f837 	bl	8009c60 <_isatty_r>
 8009bf2:	b128      	cbz	r0, 8009c00 <__smakebuf_r+0x70>
 8009bf4:	89a3      	ldrh	r3, [r4, #12]
 8009bf6:	f023 0303 	bic.w	r3, r3, #3
 8009bfa:	f043 0301 	orr.w	r3, r3, #1
 8009bfe:	81a3      	strh	r3, [r4, #12]
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	431d      	orrs	r5, r3
 8009c04:	81a5      	strh	r5, [r4, #12]
 8009c06:	e7cf      	b.n	8009ba8 <__smakebuf_r+0x18>

08009c08 <memmove>:
 8009c08:	4288      	cmp	r0, r1
 8009c0a:	b510      	push	{r4, lr}
 8009c0c:	eb01 0402 	add.w	r4, r1, r2
 8009c10:	d902      	bls.n	8009c18 <memmove+0x10>
 8009c12:	4284      	cmp	r4, r0
 8009c14:	4623      	mov	r3, r4
 8009c16:	d807      	bhi.n	8009c28 <memmove+0x20>
 8009c18:	1e43      	subs	r3, r0, #1
 8009c1a:	42a1      	cmp	r1, r4
 8009c1c:	d008      	beq.n	8009c30 <memmove+0x28>
 8009c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c26:	e7f8      	b.n	8009c1a <memmove+0x12>
 8009c28:	4402      	add	r2, r0
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	428a      	cmp	r2, r1
 8009c2e:	d100      	bne.n	8009c32 <memmove+0x2a>
 8009c30:	bd10      	pop	{r4, pc}
 8009c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c3a:	e7f7      	b.n	8009c2c <memmove+0x24>

08009c3c <_fstat_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d07      	ldr	r5, [pc, #28]	@ (8009c5c <_fstat_r+0x20>)
 8009c40:	2300      	movs	r3, #0
 8009c42:	4604      	mov	r4, r0
 8009c44:	4608      	mov	r0, r1
 8009c46:	4611      	mov	r1, r2
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	f7f7 ff7d 	bl	8001b48 <_fstat>
 8009c4e:	1c43      	adds	r3, r0, #1
 8009c50:	d102      	bne.n	8009c58 <_fstat_r+0x1c>
 8009c52:	682b      	ldr	r3, [r5, #0]
 8009c54:	b103      	cbz	r3, 8009c58 <_fstat_r+0x1c>
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	bd38      	pop	{r3, r4, r5, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20004dc4 	.word	0x20004dc4

08009c60 <_isatty_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d06      	ldr	r5, [pc, #24]	@ (8009c7c <_isatty_r+0x1c>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	f7f7 ff7c 	bl	8001b68 <_isatty>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_isatty_r+0x1a>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_isatty_r+0x1a>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	20004dc4 	.word	0x20004dc4

08009c80 <__assert_func>:
 8009c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c82:	4614      	mov	r4, r2
 8009c84:	461a      	mov	r2, r3
 8009c86:	4b09      	ldr	r3, [pc, #36]	@ (8009cac <__assert_func+0x2c>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	68d8      	ldr	r0, [r3, #12]
 8009c8e:	b954      	cbnz	r4, 8009ca6 <__assert_func+0x26>
 8009c90:	4b07      	ldr	r3, [pc, #28]	@ (8009cb0 <__assert_func+0x30>)
 8009c92:	461c      	mov	r4, r3
 8009c94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c98:	9100      	str	r1, [sp, #0]
 8009c9a:	462b      	mov	r3, r5
 8009c9c:	4905      	ldr	r1, [pc, #20]	@ (8009cb4 <__assert_func+0x34>)
 8009c9e:	f000 f86f 	bl	8009d80 <fiprintf>
 8009ca2:	f000 f87f 	bl	8009da4 <abort>
 8009ca6:	4b04      	ldr	r3, [pc, #16]	@ (8009cb8 <__assert_func+0x38>)
 8009ca8:	e7f4      	b.n	8009c94 <__assert_func+0x14>
 8009caa:	bf00      	nop
 8009cac:	20000028 	.word	0x20000028
 8009cb0:	0800b19e 	.word	0x0800b19e
 8009cb4:	0800b170 	.word	0x0800b170
 8009cb8:	0800b163 	.word	0x0800b163

08009cbc <_calloc_r>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	fba1 5402 	umull	r5, r4, r1, r2
 8009cc2:	b93c      	cbnz	r4, 8009cd4 <_calloc_r+0x18>
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	f7fd fa31 	bl	800712c <_malloc_r>
 8009cca:	4606      	mov	r6, r0
 8009ccc:	b928      	cbnz	r0, 8009cda <_calloc_r+0x1e>
 8009cce:	2600      	movs	r6, #0
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}
 8009cd4:	220c      	movs	r2, #12
 8009cd6:	6002      	str	r2, [r0, #0]
 8009cd8:	e7f9      	b.n	8009cce <_calloc_r+0x12>
 8009cda:	462a      	mov	r2, r5
 8009cdc:	4621      	mov	r1, r4
 8009cde:	f7fe f933 	bl	8007f48 <memset>
 8009ce2:	e7f5      	b.n	8009cd0 <_calloc_r+0x14>

08009ce4 <__ascii_mbtowc>:
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	b901      	cbnz	r1, 8009cea <__ascii_mbtowc+0x6>
 8009ce8:	a901      	add	r1, sp, #4
 8009cea:	b142      	cbz	r2, 8009cfe <__ascii_mbtowc+0x1a>
 8009cec:	b14b      	cbz	r3, 8009d02 <__ascii_mbtowc+0x1e>
 8009cee:	7813      	ldrb	r3, [r2, #0]
 8009cf0:	600b      	str	r3, [r1, #0]
 8009cf2:	7812      	ldrb	r2, [r2, #0]
 8009cf4:	1e10      	subs	r0, r2, #0
 8009cf6:	bf18      	it	ne
 8009cf8:	2001      	movne	r0, #1
 8009cfa:	b002      	add	sp, #8
 8009cfc:	4770      	bx	lr
 8009cfe:	4610      	mov	r0, r2
 8009d00:	e7fb      	b.n	8009cfa <__ascii_mbtowc+0x16>
 8009d02:	f06f 0001 	mvn.w	r0, #1
 8009d06:	e7f8      	b.n	8009cfa <__ascii_mbtowc+0x16>

08009d08 <_realloc_r>:
 8009d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	4615      	mov	r5, r2
 8009d10:	460c      	mov	r4, r1
 8009d12:	b921      	cbnz	r1, 8009d1e <_realloc_r+0x16>
 8009d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d18:	4611      	mov	r1, r2
 8009d1a:	f7fd ba07 	b.w	800712c <_malloc_r>
 8009d1e:	b92a      	cbnz	r2, 8009d2c <_realloc_r+0x24>
 8009d20:	f7fe fffe 	bl	8008d20 <_free_r>
 8009d24:	2400      	movs	r4, #0
 8009d26:	4620      	mov	r0, r4
 8009d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d2c:	f000 f841 	bl	8009db2 <_malloc_usable_size_r>
 8009d30:	4285      	cmp	r5, r0
 8009d32:	4606      	mov	r6, r0
 8009d34:	d802      	bhi.n	8009d3c <_realloc_r+0x34>
 8009d36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d3a:	d8f4      	bhi.n	8009d26 <_realloc_r+0x1e>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4640      	mov	r0, r8
 8009d40:	f7fd f9f4 	bl	800712c <_malloc_r>
 8009d44:	4607      	mov	r7, r0
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d0ec      	beq.n	8009d24 <_realloc_r+0x1c>
 8009d4a:	42b5      	cmp	r5, r6
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	4621      	mov	r1, r4
 8009d50:	bf28      	it	cs
 8009d52:	4632      	movcs	r2, r6
 8009d54:	f7fe f987 	bl	8008066 <memcpy>
 8009d58:	4621      	mov	r1, r4
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	f7fe ffe0 	bl	8008d20 <_free_r>
 8009d60:	463c      	mov	r4, r7
 8009d62:	e7e0      	b.n	8009d26 <_realloc_r+0x1e>

08009d64 <__ascii_wctomb>:
 8009d64:	4603      	mov	r3, r0
 8009d66:	4608      	mov	r0, r1
 8009d68:	b141      	cbz	r1, 8009d7c <__ascii_wctomb+0x18>
 8009d6a:	2aff      	cmp	r2, #255	@ 0xff
 8009d6c:	d904      	bls.n	8009d78 <__ascii_wctomb+0x14>
 8009d6e:	228a      	movs	r2, #138	@ 0x8a
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	f04f 30ff 	mov.w	r0, #4294967295
 8009d76:	4770      	bx	lr
 8009d78:	700a      	strb	r2, [r1, #0]
 8009d7a:	2001      	movs	r0, #1
 8009d7c:	4770      	bx	lr
	...

08009d80 <fiprintf>:
 8009d80:	b40e      	push	{r1, r2, r3}
 8009d82:	b503      	push	{r0, r1, lr}
 8009d84:	4601      	mov	r1, r0
 8009d86:	ab03      	add	r3, sp, #12
 8009d88:	4805      	ldr	r0, [pc, #20]	@ (8009da0 <fiprintf+0x20>)
 8009d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8e:	6800      	ldr	r0, [r0, #0]
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	f7ff fd13 	bl	80097bc <_vfiprintf_r>
 8009d96:	b002      	add	sp, #8
 8009d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d9c:	b003      	add	sp, #12
 8009d9e:	4770      	bx	lr
 8009da0:	20000028 	.word	0x20000028

08009da4 <abort>:
 8009da4:	b508      	push	{r3, lr}
 8009da6:	2006      	movs	r0, #6
 8009da8:	f000 f834 	bl	8009e14 <raise>
 8009dac:	2001      	movs	r0, #1
 8009dae:	f7f7 fe97 	bl	8001ae0 <_exit>

08009db2 <_malloc_usable_size_r>:
 8009db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db6:	1f18      	subs	r0, r3, #4
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	bfbc      	itt	lt
 8009dbc:	580b      	ldrlt	r3, [r1, r0]
 8009dbe:	18c0      	addlt	r0, r0, r3
 8009dc0:	4770      	bx	lr

08009dc2 <_raise_r>:
 8009dc2:	291f      	cmp	r1, #31
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	460c      	mov	r4, r1
 8009dca:	d904      	bls.n	8009dd6 <_raise_r+0x14>
 8009dcc:	2316      	movs	r3, #22
 8009dce:	6003      	str	r3, [r0, #0]
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	bd38      	pop	{r3, r4, r5, pc}
 8009dd6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dd8:	b112      	cbz	r2, 8009de0 <_raise_r+0x1e>
 8009dda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dde:	b94b      	cbnz	r3, 8009df4 <_raise_r+0x32>
 8009de0:	4628      	mov	r0, r5
 8009de2:	f000 f831 	bl	8009e48 <_getpid_r>
 8009de6:	4622      	mov	r2, r4
 8009de8:	4601      	mov	r1, r0
 8009dea:	4628      	mov	r0, r5
 8009dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009df0:	f000 b818 	b.w	8009e24 <_kill_r>
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d00a      	beq.n	8009e0e <_raise_r+0x4c>
 8009df8:	1c59      	adds	r1, r3, #1
 8009dfa:	d103      	bne.n	8009e04 <_raise_r+0x42>
 8009dfc:	2316      	movs	r3, #22
 8009dfe:	6003      	str	r3, [r0, #0]
 8009e00:	2001      	movs	r0, #1
 8009e02:	e7e7      	b.n	8009dd4 <_raise_r+0x12>
 8009e04:	2100      	movs	r1, #0
 8009e06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	4798      	blx	r3
 8009e0e:	2000      	movs	r0, #0
 8009e10:	e7e0      	b.n	8009dd4 <_raise_r+0x12>
	...

08009e14 <raise>:
 8009e14:	4b02      	ldr	r3, [pc, #8]	@ (8009e20 <raise+0xc>)
 8009e16:	4601      	mov	r1, r0
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	f7ff bfd2 	b.w	8009dc2 <_raise_r>
 8009e1e:	bf00      	nop
 8009e20:	20000028 	.word	0x20000028

08009e24 <_kill_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d07      	ldr	r5, [pc, #28]	@ (8009e44 <_kill_r+0x20>)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	4611      	mov	r1, r2
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	f7f7 fe45 	bl	8001ac0 <_kill>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	d102      	bne.n	8009e40 <_kill_r+0x1c>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	b103      	cbz	r3, 8009e40 <_kill_r+0x1c>
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	bd38      	pop	{r3, r4, r5, pc}
 8009e42:	bf00      	nop
 8009e44:	20004dc4 	.word	0x20004dc4

08009e48 <_getpid_r>:
 8009e48:	f7f7 be32 	b.w	8001ab0 <_getpid>

08009e4c <pow>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	ed2d 8b02 	vpush	{d8}
 8009e52:	eeb0 8a40 	vmov.f32	s16, s0
 8009e56:	eef0 8a60 	vmov.f32	s17, s1
 8009e5a:	ec55 4b11 	vmov	r4, r5, d1
 8009e5e:	f000 f873 	bl	8009f48 <__ieee754_pow>
 8009e62:	4622      	mov	r2, r4
 8009e64:	462b      	mov	r3, r5
 8009e66:	4620      	mov	r0, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	ec57 6b10 	vmov	r6, r7, d0
 8009e6e:	f7f6 fe5d 	bl	8000b2c <__aeabi_dcmpun>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d13b      	bne.n	8009eee <pow+0xa2>
 8009e76:	ec51 0b18 	vmov	r0, r1, d8
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f7f6 fe23 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e82:	b1b8      	cbz	r0, 8009eb4 <pow+0x68>
 8009e84:	2200      	movs	r2, #0
 8009e86:	2300      	movs	r3, #0
 8009e88:	4620      	mov	r0, r4
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	f7f6 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d146      	bne.n	8009f22 <pow+0xd6>
 8009e94:	ec45 4b10 	vmov	d0, r4, r5
 8009e98:	f000 f848 	bl	8009f2c <finite>
 8009e9c:	b338      	cbz	r0, 8009eee <pow+0xa2>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	f7f6 fe19 	bl	8000adc <__aeabi_dcmplt>
 8009eaa:	b300      	cbz	r0, 8009eee <pow+0xa2>
 8009eac:	f7fe f8ae 	bl	800800c <__errno>
 8009eb0:	2322      	movs	r3, #34	@ 0x22
 8009eb2:	e01b      	b.n	8009eec <pow+0xa0>
 8009eb4:	ec47 6b10 	vmov	d0, r6, r7
 8009eb8:	f000 f838 	bl	8009f2c <finite>
 8009ebc:	b9e0      	cbnz	r0, 8009ef8 <pow+0xac>
 8009ebe:	eeb0 0a48 	vmov.f32	s0, s16
 8009ec2:	eef0 0a68 	vmov.f32	s1, s17
 8009ec6:	f000 f831 	bl	8009f2c <finite>
 8009eca:	b1a8      	cbz	r0, 8009ef8 <pow+0xac>
 8009ecc:	ec45 4b10 	vmov	d0, r4, r5
 8009ed0:	f000 f82c 	bl	8009f2c <finite>
 8009ed4:	b180      	cbz	r0, 8009ef8 <pow+0xac>
 8009ed6:	4632      	mov	r2, r6
 8009ed8:	463b      	mov	r3, r7
 8009eda:	4630      	mov	r0, r6
 8009edc:	4639      	mov	r1, r7
 8009ede:	f7f6 fe25 	bl	8000b2c <__aeabi_dcmpun>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d0e2      	beq.n	8009eac <pow+0x60>
 8009ee6:	f7fe f891 	bl	800800c <__errno>
 8009eea:	2321      	movs	r3, #33	@ 0x21
 8009eec:	6003      	str	r3, [r0, #0]
 8009eee:	ecbd 8b02 	vpop	{d8}
 8009ef2:	ec47 6b10 	vmov	d0, r6, r7
 8009ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ef8:	2200      	movs	r2, #0
 8009efa:	2300      	movs	r3, #0
 8009efc:	4630      	mov	r0, r6
 8009efe:	4639      	mov	r1, r7
 8009f00:	f7f6 fde2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d0f2      	beq.n	8009eee <pow+0xa2>
 8009f08:	eeb0 0a48 	vmov.f32	s0, s16
 8009f0c:	eef0 0a68 	vmov.f32	s1, s17
 8009f10:	f000 f80c 	bl	8009f2c <finite>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d0ea      	beq.n	8009eee <pow+0xa2>
 8009f18:	ec45 4b10 	vmov	d0, r4, r5
 8009f1c:	f000 f806 	bl	8009f2c <finite>
 8009f20:	e7c3      	b.n	8009eaa <pow+0x5e>
 8009f22:	4f01      	ldr	r7, [pc, #4]	@ (8009f28 <pow+0xdc>)
 8009f24:	2600      	movs	r6, #0
 8009f26:	e7e2      	b.n	8009eee <pow+0xa2>
 8009f28:	3ff00000 	.word	0x3ff00000

08009f2c <finite>:
 8009f2c:	b082      	sub	sp, #8
 8009f2e:	ed8d 0b00 	vstr	d0, [sp]
 8009f32:	9801      	ldr	r0, [sp, #4]
 8009f34:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009f38:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009f3c:	0fc0      	lsrs	r0, r0, #31
 8009f3e:	b002      	add	sp, #8
 8009f40:	4770      	bx	lr
 8009f42:	0000      	movs	r0, r0
 8009f44:	0000      	movs	r0, r0
	...

08009f48 <__ieee754_pow>:
 8009f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4c:	b091      	sub	sp, #68	@ 0x44
 8009f4e:	ed8d 1b00 	vstr	d1, [sp]
 8009f52:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009f56:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009f5a:	ea5a 0001 	orrs.w	r0, sl, r1
 8009f5e:	ec57 6b10 	vmov	r6, r7, d0
 8009f62:	d113      	bne.n	8009f8c <__ieee754_pow+0x44>
 8009f64:	19b3      	adds	r3, r6, r6
 8009f66:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009f6a:	4152      	adcs	r2, r2
 8009f6c:	4298      	cmp	r0, r3
 8009f6e:	4b98      	ldr	r3, [pc, #608]	@ (800a1d0 <__ieee754_pow+0x288>)
 8009f70:	4193      	sbcs	r3, r2
 8009f72:	f080 84ea 	bcs.w	800a94a <__ieee754_pow+0xa02>
 8009f76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	f7f6 f985 	bl	800028c <__adddf3>
 8009f82:	ec41 0b10 	vmov	d0, r0, r1
 8009f86:	b011      	add	sp, #68	@ 0x44
 8009f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8c:	4a91      	ldr	r2, [pc, #580]	@ (800a1d4 <__ieee754_pow+0x28c>)
 8009f8e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009f92:	4590      	cmp	r8, r2
 8009f94:	463d      	mov	r5, r7
 8009f96:	4633      	mov	r3, r6
 8009f98:	d806      	bhi.n	8009fa8 <__ieee754_pow+0x60>
 8009f9a:	d101      	bne.n	8009fa0 <__ieee754_pow+0x58>
 8009f9c:	2e00      	cmp	r6, #0
 8009f9e:	d1ea      	bne.n	8009f76 <__ieee754_pow+0x2e>
 8009fa0:	4592      	cmp	sl, r2
 8009fa2:	d801      	bhi.n	8009fa8 <__ieee754_pow+0x60>
 8009fa4:	d10e      	bne.n	8009fc4 <__ieee754_pow+0x7c>
 8009fa6:	b169      	cbz	r1, 8009fc4 <__ieee754_pow+0x7c>
 8009fa8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009fac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009fb0:	431d      	orrs	r5, r3
 8009fb2:	d1e0      	bne.n	8009f76 <__ieee754_pow+0x2e>
 8009fb4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fb8:	18db      	adds	r3, r3, r3
 8009fba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009fbe:	4152      	adcs	r2, r2
 8009fc0:	429d      	cmp	r5, r3
 8009fc2:	e7d4      	b.n	8009f6e <__ieee754_pow+0x26>
 8009fc4:	2d00      	cmp	r5, #0
 8009fc6:	46c3      	mov	fp, r8
 8009fc8:	da3a      	bge.n	800a040 <__ieee754_pow+0xf8>
 8009fca:	4a83      	ldr	r2, [pc, #524]	@ (800a1d8 <__ieee754_pow+0x290>)
 8009fcc:	4592      	cmp	sl, r2
 8009fce:	d84d      	bhi.n	800a06c <__ieee754_pow+0x124>
 8009fd0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009fd4:	4592      	cmp	sl, r2
 8009fd6:	f240 84c7 	bls.w	800a968 <__ieee754_pow+0xa20>
 8009fda:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009fde:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009fe2:	2a14      	cmp	r2, #20
 8009fe4:	dd0f      	ble.n	800a006 <__ieee754_pow+0xbe>
 8009fe6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009fea:	fa21 f402 	lsr.w	r4, r1, r2
 8009fee:	fa04 f202 	lsl.w	r2, r4, r2
 8009ff2:	428a      	cmp	r2, r1
 8009ff4:	f040 84b8 	bne.w	800a968 <__ieee754_pow+0xa20>
 8009ff8:	f004 0401 	and.w	r4, r4, #1
 8009ffc:	f1c4 0402 	rsb	r4, r4, #2
 800a000:	2900      	cmp	r1, #0
 800a002:	d158      	bne.n	800a0b6 <__ieee754_pow+0x16e>
 800a004:	e00e      	b.n	800a024 <__ieee754_pow+0xdc>
 800a006:	2900      	cmp	r1, #0
 800a008:	d154      	bne.n	800a0b4 <__ieee754_pow+0x16c>
 800a00a:	f1c2 0214 	rsb	r2, r2, #20
 800a00e:	fa4a f402 	asr.w	r4, sl, r2
 800a012:	fa04 f202 	lsl.w	r2, r4, r2
 800a016:	4552      	cmp	r2, sl
 800a018:	f040 84a3 	bne.w	800a962 <__ieee754_pow+0xa1a>
 800a01c:	f004 0401 	and.w	r4, r4, #1
 800a020:	f1c4 0402 	rsb	r4, r4, #2
 800a024:	4a6d      	ldr	r2, [pc, #436]	@ (800a1dc <__ieee754_pow+0x294>)
 800a026:	4592      	cmp	sl, r2
 800a028:	d12e      	bne.n	800a088 <__ieee754_pow+0x140>
 800a02a:	f1b9 0f00 	cmp.w	r9, #0
 800a02e:	f280 8494 	bge.w	800a95a <__ieee754_pow+0xa12>
 800a032:	496a      	ldr	r1, [pc, #424]	@ (800a1dc <__ieee754_pow+0x294>)
 800a034:	4632      	mov	r2, r6
 800a036:	463b      	mov	r3, r7
 800a038:	2000      	movs	r0, #0
 800a03a:	f7f6 fc07 	bl	800084c <__aeabi_ddiv>
 800a03e:	e7a0      	b.n	8009f82 <__ieee754_pow+0x3a>
 800a040:	2400      	movs	r4, #0
 800a042:	bbc1      	cbnz	r1, 800a0b6 <__ieee754_pow+0x16e>
 800a044:	4a63      	ldr	r2, [pc, #396]	@ (800a1d4 <__ieee754_pow+0x28c>)
 800a046:	4592      	cmp	sl, r2
 800a048:	d1ec      	bne.n	800a024 <__ieee754_pow+0xdc>
 800a04a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a04e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a052:	431a      	orrs	r2, r3
 800a054:	f000 8479 	beq.w	800a94a <__ieee754_pow+0xa02>
 800a058:	4b61      	ldr	r3, [pc, #388]	@ (800a1e0 <__ieee754_pow+0x298>)
 800a05a:	4598      	cmp	r8, r3
 800a05c:	d908      	bls.n	800a070 <__ieee754_pow+0x128>
 800a05e:	f1b9 0f00 	cmp.w	r9, #0
 800a062:	f2c0 8476 	blt.w	800a952 <__ieee754_pow+0xa0a>
 800a066:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a06a:	e78a      	b.n	8009f82 <__ieee754_pow+0x3a>
 800a06c:	2402      	movs	r4, #2
 800a06e:	e7e8      	b.n	800a042 <__ieee754_pow+0xfa>
 800a070:	f1b9 0f00 	cmp.w	r9, #0
 800a074:	f04f 0000 	mov.w	r0, #0
 800a078:	f04f 0100 	mov.w	r1, #0
 800a07c:	da81      	bge.n	8009f82 <__ieee754_pow+0x3a>
 800a07e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a082:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a086:	e77c      	b.n	8009f82 <__ieee754_pow+0x3a>
 800a088:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a08c:	d106      	bne.n	800a09c <__ieee754_pow+0x154>
 800a08e:	4632      	mov	r2, r6
 800a090:	463b      	mov	r3, r7
 800a092:	4630      	mov	r0, r6
 800a094:	4639      	mov	r1, r7
 800a096:	f7f6 faaf 	bl	80005f8 <__aeabi_dmul>
 800a09a:	e772      	b.n	8009f82 <__ieee754_pow+0x3a>
 800a09c:	4a51      	ldr	r2, [pc, #324]	@ (800a1e4 <__ieee754_pow+0x29c>)
 800a09e:	4591      	cmp	r9, r2
 800a0a0:	d109      	bne.n	800a0b6 <__ieee754_pow+0x16e>
 800a0a2:	2d00      	cmp	r5, #0
 800a0a4:	db07      	blt.n	800a0b6 <__ieee754_pow+0x16e>
 800a0a6:	ec47 6b10 	vmov	d0, r6, r7
 800a0aa:	b011      	add	sp, #68	@ 0x44
 800a0ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	f000 bd52 	b.w	800ab58 <__ieee754_sqrt>
 800a0b4:	2400      	movs	r4, #0
 800a0b6:	ec47 6b10 	vmov	d0, r6, r7
 800a0ba:	9302      	str	r3, [sp, #8]
 800a0bc:	f000 fc88 	bl	800a9d0 <fabs>
 800a0c0:	9b02      	ldr	r3, [sp, #8]
 800a0c2:	ec51 0b10 	vmov	r0, r1, d0
 800a0c6:	bb53      	cbnz	r3, 800a11e <__ieee754_pow+0x1d6>
 800a0c8:	4b44      	ldr	r3, [pc, #272]	@ (800a1dc <__ieee754_pow+0x294>)
 800a0ca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d002      	beq.n	800a0d8 <__ieee754_pow+0x190>
 800a0d2:	f1b8 0f00 	cmp.w	r8, #0
 800a0d6:	d122      	bne.n	800a11e <__ieee754_pow+0x1d6>
 800a0d8:	f1b9 0f00 	cmp.w	r9, #0
 800a0dc:	da05      	bge.n	800a0ea <__ieee754_pow+0x1a2>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	493d      	ldr	r1, [pc, #244]	@ (800a1dc <__ieee754_pow+0x294>)
 800a0e6:	f7f6 fbb1 	bl	800084c <__aeabi_ddiv>
 800a0ea:	2d00      	cmp	r5, #0
 800a0ec:	f6bf af49 	bge.w	8009f82 <__ieee754_pow+0x3a>
 800a0f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a0f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a0f8:	ea58 0804 	orrs.w	r8, r8, r4
 800a0fc:	d108      	bne.n	800a110 <__ieee754_pow+0x1c8>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4610      	mov	r0, r2
 800a104:	4619      	mov	r1, r3
 800a106:	f7f6 f8bf 	bl	8000288 <__aeabi_dsub>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	e794      	b.n	800a03a <__ieee754_pow+0xf2>
 800a110:	2c01      	cmp	r4, #1
 800a112:	f47f af36 	bne.w	8009f82 <__ieee754_pow+0x3a>
 800a116:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a11a:	4619      	mov	r1, r3
 800a11c:	e731      	b.n	8009f82 <__ieee754_pow+0x3a>
 800a11e:	0feb      	lsrs	r3, r5, #31
 800a120:	3b01      	subs	r3, #1
 800a122:	ea53 0204 	orrs.w	r2, r3, r4
 800a126:	d102      	bne.n	800a12e <__ieee754_pow+0x1e6>
 800a128:	4632      	mov	r2, r6
 800a12a:	463b      	mov	r3, r7
 800a12c:	e7e9      	b.n	800a102 <__ieee754_pow+0x1ba>
 800a12e:	3c01      	subs	r4, #1
 800a130:	431c      	orrs	r4, r3
 800a132:	d016      	beq.n	800a162 <__ieee754_pow+0x21a>
 800a134:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800a1c0 <__ieee754_pow+0x278>
 800a138:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a13c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a140:	f240 8112 	bls.w	800a368 <__ieee754_pow+0x420>
 800a144:	4b28      	ldr	r3, [pc, #160]	@ (800a1e8 <__ieee754_pow+0x2a0>)
 800a146:	459a      	cmp	sl, r3
 800a148:	4b25      	ldr	r3, [pc, #148]	@ (800a1e0 <__ieee754_pow+0x298>)
 800a14a:	d916      	bls.n	800a17a <__ieee754_pow+0x232>
 800a14c:	4598      	cmp	r8, r3
 800a14e:	d80b      	bhi.n	800a168 <__ieee754_pow+0x220>
 800a150:	f1b9 0f00 	cmp.w	r9, #0
 800a154:	da0b      	bge.n	800a16e <__ieee754_pow+0x226>
 800a156:	2000      	movs	r0, #0
 800a158:	b011      	add	sp, #68	@ 0x44
 800a15a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15e:	f000 bcf3 	b.w	800ab48 <__math_oflow>
 800a162:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800a1c8 <__ieee754_pow+0x280>
 800a166:	e7e7      	b.n	800a138 <__ieee754_pow+0x1f0>
 800a168:	f1b9 0f00 	cmp.w	r9, #0
 800a16c:	dcf3      	bgt.n	800a156 <__ieee754_pow+0x20e>
 800a16e:	2000      	movs	r0, #0
 800a170:	b011      	add	sp, #68	@ 0x44
 800a172:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a176:	f000 bcdf 	b.w	800ab38 <__math_uflow>
 800a17a:	4598      	cmp	r8, r3
 800a17c:	d20c      	bcs.n	800a198 <__ieee754_pow+0x250>
 800a17e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a182:	2200      	movs	r2, #0
 800a184:	2300      	movs	r3, #0
 800a186:	f7f6 fca9 	bl	8000adc <__aeabi_dcmplt>
 800a18a:	3800      	subs	r0, #0
 800a18c:	bf18      	it	ne
 800a18e:	2001      	movne	r0, #1
 800a190:	f1b9 0f00 	cmp.w	r9, #0
 800a194:	daec      	bge.n	800a170 <__ieee754_pow+0x228>
 800a196:	e7df      	b.n	800a158 <__ieee754_pow+0x210>
 800a198:	4b10      	ldr	r3, [pc, #64]	@ (800a1dc <__ieee754_pow+0x294>)
 800a19a:	4598      	cmp	r8, r3
 800a19c:	f04f 0200 	mov.w	r2, #0
 800a1a0:	d924      	bls.n	800a1ec <__ieee754_pow+0x2a4>
 800a1a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f7f6 fc98 	bl	8000adc <__aeabi_dcmplt>
 800a1ac:	3800      	subs	r0, #0
 800a1ae:	bf18      	it	ne
 800a1b0:	2001      	movne	r0, #1
 800a1b2:	f1b9 0f00 	cmp.w	r9, #0
 800a1b6:	dccf      	bgt.n	800a158 <__ieee754_pow+0x210>
 800a1b8:	e7da      	b.n	800a170 <__ieee754_pow+0x228>
 800a1ba:	bf00      	nop
 800a1bc:	f3af 8000 	nop.w
 800a1c0:	00000000 	.word	0x00000000
 800a1c4:	3ff00000 	.word	0x3ff00000
 800a1c8:	00000000 	.word	0x00000000
 800a1cc:	bff00000 	.word	0xbff00000
 800a1d0:	fff00000 	.word	0xfff00000
 800a1d4:	7ff00000 	.word	0x7ff00000
 800a1d8:	433fffff 	.word	0x433fffff
 800a1dc:	3ff00000 	.word	0x3ff00000
 800a1e0:	3fefffff 	.word	0x3fefffff
 800a1e4:	3fe00000 	.word	0x3fe00000
 800a1e8:	43f00000 	.word	0x43f00000
 800a1ec:	4b5a      	ldr	r3, [pc, #360]	@ (800a358 <__ieee754_pow+0x410>)
 800a1ee:	f7f6 f84b 	bl	8000288 <__aeabi_dsub>
 800a1f2:	a351      	add	r3, pc, #324	@ (adr r3, 800a338 <__ieee754_pow+0x3f0>)
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	460d      	mov	r5, r1
 800a1fc:	f7f6 f9fc 	bl	80005f8 <__aeabi_dmul>
 800a200:	a34f      	add	r3, pc, #316	@ (adr r3, 800a340 <__ieee754_pow+0x3f8>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	4606      	mov	r6, r0
 800a208:	460f      	mov	r7, r1
 800a20a:	4620      	mov	r0, r4
 800a20c:	4629      	mov	r1, r5
 800a20e:	f7f6 f9f3 	bl	80005f8 <__aeabi_dmul>
 800a212:	4b52      	ldr	r3, [pc, #328]	@ (800a35c <__ieee754_pow+0x414>)
 800a214:	4682      	mov	sl, r0
 800a216:	468b      	mov	fp, r1
 800a218:	2200      	movs	r2, #0
 800a21a:	4620      	mov	r0, r4
 800a21c:	4629      	mov	r1, r5
 800a21e:	f7f6 f9eb 	bl	80005f8 <__aeabi_dmul>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	a148      	add	r1, pc, #288	@ (adr r1, 800a348 <__ieee754_pow+0x400>)
 800a228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a22c:	f7f6 f82c 	bl	8000288 <__aeabi_dsub>
 800a230:	4622      	mov	r2, r4
 800a232:	462b      	mov	r3, r5
 800a234:	f7f6 f9e0 	bl	80005f8 <__aeabi_dmul>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	2000      	movs	r0, #0
 800a23e:	4948      	ldr	r1, [pc, #288]	@ (800a360 <__ieee754_pow+0x418>)
 800a240:	f7f6 f822 	bl	8000288 <__aeabi_dsub>
 800a244:	4622      	mov	r2, r4
 800a246:	4680      	mov	r8, r0
 800a248:	4689      	mov	r9, r1
 800a24a:	462b      	mov	r3, r5
 800a24c:	4620      	mov	r0, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	f7f6 f9d2 	bl	80005f8 <__aeabi_dmul>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4640      	mov	r0, r8
 800a25a:	4649      	mov	r1, r9
 800a25c:	f7f6 f9cc 	bl	80005f8 <__aeabi_dmul>
 800a260:	a33b      	add	r3, pc, #236	@ (adr r3, 800a350 <__ieee754_pow+0x408>)
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	f7f6 f9c7 	bl	80005f8 <__aeabi_dmul>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4650      	mov	r0, sl
 800a270:	4659      	mov	r1, fp
 800a272:	f7f6 f809 	bl	8000288 <__aeabi_dsub>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	4680      	mov	r8, r0
 800a27c:	4689      	mov	r9, r1
 800a27e:	4630      	mov	r0, r6
 800a280:	4639      	mov	r1, r7
 800a282:	f7f6 f803 	bl	800028c <__adddf3>
 800a286:	2400      	movs	r4, #0
 800a288:	4632      	mov	r2, r6
 800a28a:	463b      	mov	r3, r7
 800a28c:	4620      	mov	r0, r4
 800a28e:	460d      	mov	r5, r1
 800a290:	f7f5 fffa 	bl	8000288 <__aeabi_dsub>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4640      	mov	r0, r8
 800a29a:	4649      	mov	r1, r9
 800a29c:	f7f5 fff4 	bl	8000288 <__aeabi_dsub>
 800a2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	460f      	mov	r7, r1
 800a2b4:	4652      	mov	r2, sl
 800a2b6:	465b      	mov	r3, fp
 800a2b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2bc:	f7f5 ffe4 	bl	8000288 <__aeabi_dsub>
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	462b      	mov	r3, r5
 800a2c4:	f7f6 f998 	bl	80005f8 <__aeabi_dmul>
 800a2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	4689      	mov	r9, r1
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	f7f6 f990 	bl	80005f8 <__aeabi_dmul>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4640      	mov	r0, r8
 800a2de:	4649      	mov	r1, r9
 800a2e0:	f7f5 ffd4 	bl	800028c <__adddf3>
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	465b      	mov	r3, fp
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	460f      	mov	r7, r1
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	f7f6 f982 	bl	80005f8 <__aeabi_dmul>
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	4680      	mov	r8, r0
 800a2fa:	4689      	mov	r9, r1
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4639      	mov	r1, r7
 800a300:	f7f5 ffc4 	bl	800028c <__adddf3>
 800a304:	4b17      	ldr	r3, [pc, #92]	@ (800a364 <__ieee754_pow+0x41c>)
 800a306:	4299      	cmp	r1, r3
 800a308:	4604      	mov	r4, r0
 800a30a:	460d      	mov	r5, r1
 800a30c:	468a      	mov	sl, r1
 800a30e:	468b      	mov	fp, r1
 800a310:	f340 82ef 	ble.w	800a8f2 <__ieee754_pow+0x9aa>
 800a314:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a318:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a31c:	4303      	orrs	r3, r0
 800a31e:	f000 81e8 	beq.w	800a6f2 <__ieee754_pow+0x7aa>
 800a322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a326:	2200      	movs	r2, #0
 800a328:	2300      	movs	r3, #0
 800a32a:	f7f6 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800a32e:	3800      	subs	r0, #0
 800a330:	bf18      	it	ne
 800a332:	2001      	movne	r0, #1
 800a334:	e710      	b.n	800a158 <__ieee754_pow+0x210>
 800a336:	bf00      	nop
 800a338:	60000000 	.word	0x60000000
 800a33c:	3ff71547 	.word	0x3ff71547
 800a340:	f85ddf44 	.word	0xf85ddf44
 800a344:	3e54ae0b 	.word	0x3e54ae0b
 800a348:	55555555 	.word	0x55555555
 800a34c:	3fd55555 	.word	0x3fd55555
 800a350:	652b82fe 	.word	0x652b82fe
 800a354:	3ff71547 	.word	0x3ff71547
 800a358:	3ff00000 	.word	0x3ff00000
 800a35c:	3fd00000 	.word	0x3fd00000
 800a360:	3fe00000 	.word	0x3fe00000
 800a364:	408fffff 	.word	0x408fffff
 800a368:	4bd5      	ldr	r3, [pc, #852]	@ (800a6c0 <__ieee754_pow+0x778>)
 800a36a:	402b      	ands	r3, r5
 800a36c:	2200      	movs	r2, #0
 800a36e:	b92b      	cbnz	r3, 800a37c <__ieee754_pow+0x434>
 800a370:	4bd4      	ldr	r3, [pc, #848]	@ (800a6c4 <__ieee754_pow+0x77c>)
 800a372:	f7f6 f941 	bl	80005f8 <__aeabi_dmul>
 800a376:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a37a:	468b      	mov	fp, r1
 800a37c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a380:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a384:	4413      	add	r3, r2
 800a386:	930a      	str	r3, [sp, #40]	@ 0x28
 800a388:	4bcf      	ldr	r3, [pc, #828]	@ (800a6c8 <__ieee754_pow+0x780>)
 800a38a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a38e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a392:	459b      	cmp	fp, r3
 800a394:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a398:	dd08      	ble.n	800a3ac <__ieee754_pow+0x464>
 800a39a:	4bcc      	ldr	r3, [pc, #816]	@ (800a6cc <__ieee754_pow+0x784>)
 800a39c:	459b      	cmp	fp, r3
 800a39e:	f340 81a5 	ble.w	800a6ec <__ieee754_pow+0x7a4>
 800a3a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a3ac:	f04f 0a00 	mov.w	sl, #0
 800a3b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a3b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3b6:	4bc6      	ldr	r3, [pc, #792]	@ (800a6d0 <__ieee754_pow+0x788>)
 800a3b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3bc:	ed93 7b00 	vldr	d7, [r3]
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	ec53 2b17 	vmov	r2, r3, d7
 800a3c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a3ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a3ce:	f7f5 ff5b 	bl	8000288 <__aeabi_dsub>
 800a3d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	460f      	mov	r7, r1
 800a3da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3de:	f7f5 ff55 	bl	800028c <__adddf3>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	49ba      	ldr	r1, [pc, #744]	@ (800a6d4 <__ieee754_pow+0x78c>)
 800a3ea:	f7f6 fa2f 	bl	800084c <__aeabi_ddiv>
 800a3ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	f7f6 f8fd 	bl	80005f8 <__aeabi_dmul>
 800a3fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a402:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a406:	106d      	asrs	r5, r5, #1
 800a408:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a40c:	f04f 0b00 	mov.w	fp, #0
 800a410:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a414:	4661      	mov	r1, ip
 800a416:	2200      	movs	r2, #0
 800a418:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a41c:	4658      	mov	r0, fp
 800a41e:	46e1      	mov	r9, ip
 800a420:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a424:	4614      	mov	r4, r2
 800a426:	461d      	mov	r5, r3
 800a428:	f7f6 f8e6 	bl	80005f8 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4630      	mov	r0, r6
 800a432:	4639      	mov	r1, r7
 800a434:	f7f5 ff28 	bl	8000288 <__aeabi_dsub>
 800a438:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a43c:	4606      	mov	r6, r0
 800a43e:	460f      	mov	r7, r1
 800a440:	4620      	mov	r0, r4
 800a442:	4629      	mov	r1, r5
 800a444:	f7f5 ff20 	bl	8000288 <__aeabi_dsub>
 800a448:	4602      	mov	r2, r0
 800a44a:	460b      	mov	r3, r1
 800a44c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a450:	f7f5 ff1a 	bl	8000288 <__aeabi_dsub>
 800a454:	465a      	mov	r2, fp
 800a456:	464b      	mov	r3, r9
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f5 ff10 	bl	8000288 <__aeabi_dsub>
 800a468:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a46c:	f7f6 f8c4 	bl	80005f8 <__aeabi_dmul>
 800a470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a474:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a478:	4610      	mov	r0, r2
 800a47a:	4619      	mov	r1, r3
 800a47c:	f7f6 f8bc 	bl	80005f8 <__aeabi_dmul>
 800a480:	a37d      	add	r3, pc, #500	@ (adr r3, 800a678 <__ieee754_pow+0x730>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	4604      	mov	r4, r0
 800a488:	460d      	mov	r5, r1
 800a48a:	f7f6 f8b5 	bl	80005f8 <__aeabi_dmul>
 800a48e:	a37c      	add	r3, pc, #496	@ (adr r3, 800a680 <__ieee754_pow+0x738>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f7f5 fefa 	bl	800028c <__adddf3>
 800a498:	4622      	mov	r2, r4
 800a49a:	462b      	mov	r3, r5
 800a49c:	f7f6 f8ac 	bl	80005f8 <__aeabi_dmul>
 800a4a0:	a379      	add	r3, pc, #484	@ (adr r3, 800a688 <__ieee754_pow+0x740>)
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	f7f5 fef1 	bl	800028c <__adddf3>
 800a4aa:	4622      	mov	r2, r4
 800a4ac:	462b      	mov	r3, r5
 800a4ae:	f7f6 f8a3 	bl	80005f8 <__aeabi_dmul>
 800a4b2:	a377      	add	r3, pc, #476	@ (adr r3, 800a690 <__ieee754_pow+0x748>)
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f7f5 fee8 	bl	800028c <__adddf3>
 800a4bc:	4622      	mov	r2, r4
 800a4be:	462b      	mov	r3, r5
 800a4c0:	f7f6 f89a 	bl	80005f8 <__aeabi_dmul>
 800a4c4:	a374      	add	r3, pc, #464	@ (adr r3, 800a698 <__ieee754_pow+0x750>)
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	f7f5 fedf 	bl	800028c <__adddf3>
 800a4ce:	4622      	mov	r2, r4
 800a4d0:	462b      	mov	r3, r5
 800a4d2:	f7f6 f891 	bl	80005f8 <__aeabi_dmul>
 800a4d6:	a372      	add	r3, pc, #456	@ (adr r3, 800a6a0 <__ieee754_pow+0x758>)
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	f7f5 fed6 	bl	800028c <__adddf3>
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	460f      	mov	r7, r1
 800a4e6:	462b      	mov	r3, r5
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	f7f6 f884 	bl	80005f8 <__aeabi_dmul>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	4639      	mov	r1, r7
 800a4f8:	f7f6 f87e 	bl	80005f8 <__aeabi_dmul>
 800a4fc:	465a      	mov	r2, fp
 800a4fe:	4604      	mov	r4, r0
 800a500:	460d      	mov	r5, r1
 800a502:	464b      	mov	r3, r9
 800a504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a508:	f7f5 fec0 	bl	800028c <__adddf3>
 800a50c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a510:	f7f6 f872 	bl	80005f8 <__aeabi_dmul>
 800a514:	4622      	mov	r2, r4
 800a516:	462b      	mov	r3, r5
 800a518:	f7f5 feb8 	bl	800028c <__adddf3>
 800a51c:	465a      	mov	r2, fp
 800a51e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a522:	464b      	mov	r3, r9
 800a524:	4658      	mov	r0, fp
 800a526:	4649      	mov	r1, r9
 800a528:	f7f6 f866 	bl	80005f8 <__aeabi_dmul>
 800a52c:	4b6a      	ldr	r3, [pc, #424]	@ (800a6d8 <__ieee754_pow+0x790>)
 800a52e:	2200      	movs	r2, #0
 800a530:	4606      	mov	r6, r0
 800a532:	460f      	mov	r7, r1
 800a534:	f7f5 feaa 	bl	800028c <__adddf3>
 800a538:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a53c:	f7f5 fea6 	bl	800028c <__adddf3>
 800a540:	46d8      	mov	r8, fp
 800a542:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a546:	460d      	mov	r5, r1
 800a548:	465a      	mov	r2, fp
 800a54a:	460b      	mov	r3, r1
 800a54c:	4640      	mov	r0, r8
 800a54e:	4649      	mov	r1, r9
 800a550:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a554:	f7f6 f850 	bl	80005f8 <__aeabi_dmul>
 800a558:	465c      	mov	r4, fp
 800a55a:	4680      	mov	r8, r0
 800a55c:	4689      	mov	r9, r1
 800a55e:	4b5e      	ldr	r3, [pc, #376]	@ (800a6d8 <__ieee754_pow+0x790>)
 800a560:	2200      	movs	r2, #0
 800a562:	4620      	mov	r0, r4
 800a564:	4629      	mov	r1, r5
 800a566:	f7f5 fe8f 	bl	8000288 <__aeabi_dsub>
 800a56a:	4632      	mov	r2, r6
 800a56c:	463b      	mov	r3, r7
 800a56e:	f7f5 fe8b 	bl	8000288 <__aeabi_dsub>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a57a:	f7f5 fe85 	bl	8000288 <__aeabi_dsub>
 800a57e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a582:	f7f6 f839 	bl	80005f8 <__aeabi_dmul>
 800a586:	4622      	mov	r2, r4
 800a588:	4606      	mov	r6, r0
 800a58a:	460f      	mov	r7, r1
 800a58c:	462b      	mov	r3, r5
 800a58e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a592:	f7f6 f831 	bl	80005f8 <__aeabi_dmul>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4630      	mov	r0, r6
 800a59c:	4639      	mov	r1, r7
 800a59e:	f7f5 fe75 	bl	800028c <__adddf3>
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	460f      	mov	r7, r1
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	f7f5 fe6d 	bl	800028c <__adddf3>
 800a5b2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a5b6:	a33c      	add	r3, pc, #240	@ (adr r3, 800a6a8 <__ieee754_pow+0x760>)
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	4658      	mov	r0, fp
 800a5be:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a5c2:	460d      	mov	r5, r1
 800a5c4:	f7f6 f818 	bl	80005f8 <__aeabi_dmul>
 800a5c8:	465c      	mov	r4, fp
 800a5ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ce:	4642      	mov	r2, r8
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	f7f5 fe57 	bl	8000288 <__aeabi_dsub>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4630      	mov	r0, r6
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	f7f5 fe51 	bl	8000288 <__aeabi_dsub>
 800a5e6:	a332      	add	r3, pc, #200	@ (adr r3, 800a6b0 <__ieee754_pow+0x768>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f7f6 f804 	bl	80005f8 <__aeabi_dmul>
 800a5f0:	a331      	add	r3, pc, #196	@ (adr r3, 800a6b8 <__ieee754_pow+0x770>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	460f      	mov	r7, r1
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	f7f5 fffb 	bl	80005f8 <__aeabi_dmul>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4630      	mov	r0, r6
 800a608:	4639      	mov	r1, r7
 800a60a:	f7f5 fe3f 	bl	800028c <__adddf3>
 800a60e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a610:	4b32      	ldr	r3, [pc, #200]	@ (800a6dc <__ieee754_pow+0x794>)
 800a612:	4413      	add	r3, r2
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f7f5 fe38 	bl	800028c <__adddf3>
 800a61c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a620:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a622:	f7f5 ff7f 	bl	8000524 <__aeabi_i2d>
 800a626:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a628:	4b2d      	ldr	r3, [pc, #180]	@ (800a6e0 <__ieee754_pow+0x798>)
 800a62a:	4413      	add	r3, r2
 800a62c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a630:	4606      	mov	r6, r0
 800a632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a636:	460f      	mov	r7, r1
 800a638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a63c:	f7f5 fe26 	bl	800028c <__adddf3>
 800a640:	4642      	mov	r2, r8
 800a642:	464b      	mov	r3, r9
 800a644:	f7f5 fe22 	bl	800028c <__adddf3>
 800a648:	4632      	mov	r2, r6
 800a64a:	463b      	mov	r3, r7
 800a64c:	f7f5 fe1e 	bl	800028c <__adddf3>
 800a650:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a654:	4632      	mov	r2, r6
 800a656:	463b      	mov	r3, r7
 800a658:	4658      	mov	r0, fp
 800a65a:	460d      	mov	r5, r1
 800a65c:	f7f5 fe14 	bl	8000288 <__aeabi_dsub>
 800a660:	4642      	mov	r2, r8
 800a662:	464b      	mov	r3, r9
 800a664:	f7f5 fe10 	bl	8000288 <__aeabi_dsub>
 800a668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a66c:	f7f5 fe0c 	bl	8000288 <__aeabi_dsub>
 800a670:	465c      	mov	r4, fp
 800a672:	4602      	mov	r2, r0
 800a674:	e036      	b.n	800a6e4 <__ieee754_pow+0x79c>
 800a676:	bf00      	nop
 800a678:	4a454eef 	.word	0x4a454eef
 800a67c:	3fca7e28 	.word	0x3fca7e28
 800a680:	93c9db65 	.word	0x93c9db65
 800a684:	3fcd864a 	.word	0x3fcd864a
 800a688:	a91d4101 	.word	0xa91d4101
 800a68c:	3fd17460 	.word	0x3fd17460
 800a690:	518f264d 	.word	0x518f264d
 800a694:	3fd55555 	.word	0x3fd55555
 800a698:	db6fabff 	.word	0xdb6fabff
 800a69c:	3fdb6db6 	.word	0x3fdb6db6
 800a6a0:	33333303 	.word	0x33333303
 800a6a4:	3fe33333 	.word	0x3fe33333
 800a6a8:	e0000000 	.word	0xe0000000
 800a6ac:	3feec709 	.word	0x3feec709
 800a6b0:	dc3a03fd 	.word	0xdc3a03fd
 800a6b4:	3feec709 	.word	0x3feec709
 800a6b8:	145b01f5 	.word	0x145b01f5
 800a6bc:	be3e2fe0 	.word	0xbe3e2fe0
 800a6c0:	7ff00000 	.word	0x7ff00000
 800a6c4:	43400000 	.word	0x43400000
 800a6c8:	0003988e 	.word	0x0003988e
 800a6cc:	000bb679 	.word	0x000bb679
 800a6d0:	0800b2c0 	.word	0x0800b2c0
 800a6d4:	3ff00000 	.word	0x3ff00000
 800a6d8:	40080000 	.word	0x40080000
 800a6dc:	0800b2a0 	.word	0x0800b2a0
 800a6e0:	0800b2b0 	.word	0x0800b2b0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6ea:	e5d7      	b.n	800a29c <__ieee754_pow+0x354>
 800a6ec:	f04f 0a01 	mov.w	sl, #1
 800a6f0:	e65e      	b.n	800a3b0 <__ieee754_pow+0x468>
 800a6f2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a9c4 <__ieee754_pow+0xa7c>)
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	f7f5 fdc6 	bl	800028c <__adddf3>
 800a700:	4642      	mov	r2, r8
 800a702:	e9cd 0100 	strd	r0, r1, [sp]
 800a706:	464b      	mov	r3, r9
 800a708:	4620      	mov	r0, r4
 800a70a:	4629      	mov	r1, r5
 800a70c:	f7f5 fdbc 	bl	8000288 <__aeabi_dsub>
 800a710:	4602      	mov	r2, r0
 800a712:	460b      	mov	r3, r1
 800a714:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a718:	f7f6 f9fe 	bl	8000b18 <__aeabi_dcmpgt>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f47f ae00 	bne.w	800a322 <__ieee754_pow+0x3da>
 800a722:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a726:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a72a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a72e:	fa43 fa0a 	asr.w	sl, r3, sl
 800a732:	44da      	add	sl, fp
 800a734:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a738:	489d      	ldr	r0, [pc, #628]	@ (800a9b0 <__ieee754_pow+0xa68>)
 800a73a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a73e:	4108      	asrs	r0, r1
 800a740:	ea00 030a 	and.w	r3, r0, sl
 800a744:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a748:	f1c1 0114 	rsb	r1, r1, #20
 800a74c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a750:	fa4a fa01 	asr.w	sl, sl, r1
 800a754:	f1bb 0f00 	cmp.w	fp, #0
 800a758:	4640      	mov	r0, r8
 800a75a:	4649      	mov	r1, r9
 800a75c:	f04f 0200 	mov.w	r2, #0
 800a760:	bfb8      	it	lt
 800a762:	f1ca 0a00 	rsblt	sl, sl, #0
 800a766:	f7f5 fd8f 	bl	8000288 <__aeabi_dsub>
 800a76a:	4680      	mov	r8, r0
 800a76c:	4689      	mov	r9, r1
 800a76e:	4632      	mov	r2, r6
 800a770:	463b      	mov	r3, r7
 800a772:	4640      	mov	r0, r8
 800a774:	4649      	mov	r1, r9
 800a776:	f7f5 fd89 	bl	800028c <__adddf3>
 800a77a:	2400      	movs	r4, #0
 800a77c:	a37c      	add	r3, pc, #496	@ (adr r3, 800a970 <__ieee754_pow+0xa28>)
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	4620      	mov	r0, r4
 800a784:	460d      	mov	r5, r1
 800a786:	f7f5 ff37 	bl	80005f8 <__aeabi_dmul>
 800a78a:	4642      	mov	r2, r8
 800a78c:	e9cd 0100 	strd	r0, r1, [sp]
 800a790:	464b      	mov	r3, r9
 800a792:	4620      	mov	r0, r4
 800a794:	4629      	mov	r1, r5
 800a796:	f7f5 fd77 	bl	8000288 <__aeabi_dsub>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	4630      	mov	r0, r6
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	f7f5 fd71 	bl	8000288 <__aeabi_dsub>
 800a7a6:	a374      	add	r3, pc, #464	@ (adr r3, 800a978 <__ieee754_pow+0xa30>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	f7f5 ff24 	bl	80005f8 <__aeabi_dmul>
 800a7b0:	a373      	add	r3, pc, #460	@ (adr r3, 800a980 <__ieee754_pow+0xa38>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	4689      	mov	r9, r1
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	4629      	mov	r1, r5
 800a7be:	f7f5 ff1b 	bl	80005f8 <__aeabi_dmul>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	f7f5 fd5f 	bl	800028c <__adddf3>
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7da:	f7f5 fd57 	bl	800028c <__adddf3>
 800a7de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7e2:	4680      	mov	r8, r0
 800a7e4:	4689      	mov	r9, r1
 800a7e6:	f7f5 fd4f 	bl	8000288 <__aeabi_dsub>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	f7f5 fd49 	bl	8000288 <__aeabi_dsub>
 800a7f6:	4642      	mov	r2, r8
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	464b      	mov	r3, r9
 800a7fe:	4640      	mov	r0, r8
 800a800:	4649      	mov	r1, r9
 800a802:	f7f5 fef9 	bl	80005f8 <__aeabi_dmul>
 800a806:	a360      	add	r3, pc, #384	@ (adr r3, 800a988 <__ieee754_pow+0xa40>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	4604      	mov	r4, r0
 800a80e:	460d      	mov	r5, r1
 800a810:	f7f5 fef2 	bl	80005f8 <__aeabi_dmul>
 800a814:	a35e      	add	r3, pc, #376	@ (adr r3, 800a990 <__ieee754_pow+0xa48>)
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	f7f5 fd35 	bl	8000288 <__aeabi_dsub>
 800a81e:	4622      	mov	r2, r4
 800a820:	462b      	mov	r3, r5
 800a822:	f7f5 fee9 	bl	80005f8 <__aeabi_dmul>
 800a826:	a35c      	add	r3, pc, #368	@ (adr r3, 800a998 <__ieee754_pow+0xa50>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	f7f5 fd2e 	bl	800028c <__adddf3>
 800a830:	4622      	mov	r2, r4
 800a832:	462b      	mov	r3, r5
 800a834:	f7f5 fee0 	bl	80005f8 <__aeabi_dmul>
 800a838:	a359      	add	r3, pc, #356	@ (adr r3, 800a9a0 <__ieee754_pow+0xa58>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f7f5 fd23 	bl	8000288 <__aeabi_dsub>
 800a842:	4622      	mov	r2, r4
 800a844:	462b      	mov	r3, r5
 800a846:	f7f5 fed7 	bl	80005f8 <__aeabi_dmul>
 800a84a:	a357      	add	r3, pc, #348	@ (adr r3, 800a9a8 <__ieee754_pow+0xa60>)
 800a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a850:	f7f5 fd1c 	bl	800028c <__adddf3>
 800a854:	4622      	mov	r2, r4
 800a856:	462b      	mov	r3, r5
 800a858:	f7f5 fece 	bl	80005f8 <__aeabi_dmul>
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4640      	mov	r0, r8
 800a862:	4649      	mov	r1, r9
 800a864:	f7f5 fd10 	bl	8000288 <__aeabi_dsub>
 800a868:	4604      	mov	r4, r0
 800a86a:	460d      	mov	r5, r1
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4640      	mov	r0, r8
 800a872:	4649      	mov	r1, r9
 800a874:	f7f5 fec0 	bl	80005f8 <__aeabi_dmul>
 800a878:	2200      	movs	r2, #0
 800a87a:	e9cd 0100 	strd	r0, r1, [sp]
 800a87e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a882:	4620      	mov	r0, r4
 800a884:	4629      	mov	r1, r5
 800a886:	f7f5 fcff 	bl	8000288 <__aeabi_dsub>
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a892:	f7f5 ffdb 	bl	800084c <__aeabi_ddiv>
 800a896:	4632      	mov	r2, r6
 800a898:	4604      	mov	r4, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	463b      	mov	r3, r7
 800a89e:	4640      	mov	r0, r8
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	f7f5 fea9 	bl	80005f8 <__aeabi_dmul>
 800a8a6:	4632      	mov	r2, r6
 800a8a8:	463b      	mov	r3, r7
 800a8aa:	f7f5 fcef 	bl	800028c <__adddf3>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	f7f5 fce7 	bl	8000288 <__aeabi_dsub>
 800a8ba:	4642      	mov	r2, r8
 800a8bc:	464b      	mov	r3, r9
 800a8be:	f7f5 fce3 	bl	8000288 <__aeabi_dsub>
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	493b      	ldr	r1, [pc, #236]	@ (800a9b4 <__ieee754_pow+0xa6c>)
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	f7f5 fcdd 	bl	8000288 <__aeabi_dsub>
 800a8ce:	ec41 0b10 	vmov	d0, r0, r1
 800a8d2:	ee10 3a90 	vmov	r3, s1
 800a8d6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a8da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8de:	da30      	bge.n	800a942 <__ieee754_pow+0x9fa>
 800a8e0:	4650      	mov	r0, sl
 800a8e2:	f000 f87d 	bl	800a9e0 <scalbn>
 800a8e6:	ec51 0b10 	vmov	r0, r1, d0
 800a8ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8ee:	f7ff bbd2 	b.w	800a096 <__ieee754_pow+0x14e>
 800a8f2:	4c31      	ldr	r4, [pc, #196]	@ (800a9b8 <__ieee754_pow+0xa70>)
 800a8f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d91a      	bls.n	800a932 <__ieee754_pow+0x9ea>
 800a8fc:	4b2f      	ldr	r3, [pc, #188]	@ (800a9bc <__ieee754_pow+0xa74>)
 800a8fe:	440b      	add	r3, r1
 800a900:	4303      	orrs	r3, r0
 800a902:	d009      	beq.n	800a918 <__ieee754_pow+0x9d0>
 800a904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a908:	2200      	movs	r2, #0
 800a90a:	2300      	movs	r3, #0
 800a90c:	f7f6 f8e6 	bl	8000adc <__aeabi_dcmplt>
 800a910:	3800      	subs	r0, #0
 800a912:	bf18      	it	ne
 800a914:	2001      	movne	r0, #1
 800a916:	e42b      	b.n	800a170 <__ieee754_pow+0x228>
 800a918:	4642      	mov	r2, r8
 800a91a:	464b      	mov	r3, r9
 800a91c:	f7f5 fcb4 	bl	8000288 <__aeabi_dsub>
 800a920:	4632      	mov	r2, r6
 800a922:	463b      	mov	r3, r7
 800a924:	f7f6 f8ee 	bl	8000b04 <__aeabi_dcmpge>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d1eb      	bne.n	800a904 <__ieee754_pow+0x9bc>
 800a92c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a9cc <__ieee754_pow+0xa84>
 800a930:	e6f7      	b.n	800a722 <__ieee754_pow+0x7da>
 800a932:	469a      	mov	sl, r3
 800a934:	4b22      	ldr	r3, [pc, #136]	@ (800a9c0 <__ieee754_pow+0xa78>)
 800a936:	459a      	cmp	sl, r3
 800a938:	f63f aef3 	bhi.w	800a722 <__ieee754_pow+0x7da>
 800a93c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a940:	e715      	b.n	800a76e <__ieee754_pow+0x826>
 800a942:	ec51 0b10 	vmov	r0, r1, d0
 800a946:	4619      	mov	r1, r3
 800a948:	e7cf      	b.n	800a8ea <__ieee754_pow+0x9a2>
 800a94a:	491a      	ldr	r1, [pc, #104]	@ (800a9b4 <__ieee754_pow+0xa6c>)
 800a94c:	2000      	movs	r0, #0
 800a94e:	f7ff bb18 	b.w	8009f82 <__ieee754_pow+0x3a>
 800a952:	2000      	movs	r0, #0
 800a954:	2100      	movs	r1, #0
 800a956:	f7ff bb14 	b.w	8009f82 <__ieee754_pow+0x3a>
 800a95a:	4630      	mov	r0, r6
 800a95c:	4639      	mov	r1, r7
 800a95e:	f7ff bb10 	b.w	8009f82 <__ieee754_pow+0x3a>
 800a962:	460c      	mov	r4, r1
 800a964:	f7ff bb5e 	b.w	800a024 <__ieee754_pow+0xdc>
 800a968:	2400      	movs	r4, #0
 800a96a:	f7ff bb49 	b.w	800a000 <__ieee754_pow+0xb8>
 800a96e:	bf00      	nop
 800a970:	00000000 	.word	0x00000000
 800a974:	3fe62e43 	.word	0x3fe62e43
 800a978:	fefa39ef 	.word	0xfefa39ef
 800a97c:	3fe62e42 	.word	0x3fe62e42
 800a980:	0ca86c39 	.word	0x0ca86c39
 800a984:	be205c61 	.word	0xbe205c61
 800a988:	72bea4d0 	.word	0x72bea4d0
 800a98c:	3e663769 	.word	0x3e663769
 800a990:	c5d26bf1 	.word	0xc5d26bf1
 800a994:	3ebbbd41 	.word	0x3ebbbd41
 800a998:	af25de2c 	.word	0xaf25de2c
 800a99c:	3f11566a 	.word	0x3f11566a
 800a9a0:	16bebd93 	.word	0x16bebd93
 800a9a4:	3f66c16c 	.word	0x3f66c16c
 800a9a8:	5555553e 	.word	0x5555553e
 800a9ac:	3fc55555 	.word	0x3fc55555
 800a9b0:	fff00000 	.word	0xfff00000
 800a9b4:	3ff00000 	.word	0x3ff00000
 800a9b8:	4090cbff 	.word	0x4090cbff
 800a9bc:	3f6f3400 	.word	0x3f6f3400
 800a9c0:	3fe00000 	.word	0x3fe00000
 800a9c4:	652b82fe 	.word	0x652b82fe
 800a9c8:	3c971547 	.word	0x3c971547
 800a9cc:	4090cc00 	.word	0x4090cc00

0800a9d0 <fabs>:
 800a9d0:	ec51 0b10 	vmov	r0, r1, d0
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a9da:	ec43 2b10 	vmov	d0, r2, r3
 800a9de:	4770      	bx	lr

0800a9e0 <scalbn>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	ec55 4b10 	vmov	r4, r5, d0
 800a9e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	462b      	mov	r3, r5
 800a9ee:	b991      	cbnz	r1, 800aa16 <scalbn+0x36>
 800a9f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a9f4:	4323      	orrs	r3, r4
 800a9f6:	d03d      	beq.n	800aa74 <scalbn+0x94>
 800a9f8:	4b35      	ldr	r3, [pc, #212]	@ (800aad0 <scalbn+0xf0>)
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f7f5 fdfa 	bl	80005f8 <__aeabi_dmul>
 800aa04:	4b33      	ldr	r3, [pc, #204]	@ (800aad4 <scalbn+0xf4>)
 800aa06:	429e      	cmp	r6, r3
 800aa08:	4604      	mov	r4, r0
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	da0f      	bge.n	800aa2e <scalbn+0x4e>
 800aa0e:	a328      	add	r3, pc, #160	@ (adr r3, 800aab0 <scalbn+0xd0>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	e01e      	b.n	800aa54 <scalbn+0x74>
 800aa16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800aa1a:	4291      	cmp	r1, r2
 800aa1c:	d10b      	bne.n	800aa36 <scalbn+0x56>
 800aa1e:	4622      	mov	r2, r4
 800aa20:	4620      	mov	r0, r4
 800aa22:	4629      	mov	r1, r5
 800aa24:	f7f5 fc32 	bl	800028c <__adddf3>
 800aa28:	4604      	mov	r4, r0
 800aa2a:	460d      	mov	r5, r1
 800aa2c:	e022      	b.n	800aa74 <scalbn+0x94>
 800aa2e:	460b      	mov	r3, r1
 800aa30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aa34:	3936      	subs	r1, #54	@ 0x36
 800aa36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800aa3a:	4296      	cmp	r6, r2
 800aa3c:	dd0d      	ble.n	800aa5a <scalbn+0x7a>
 800aa3e:	2d00      	cmp	r5, #0
 800aa40:	a11d      	add	r1, pc, #116	@ (adr r1, 800aab8 <scalbn+0xd8>)
 800aa42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa46:	da02      	bge.n	800aa4e <scalbn+0x6e>
 800aa48:	a11d      	add	r1, pc, #116	@ (adr r1, 800aac0 <scalbn+0xe0>)
 800aa4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa4e:	a31a      	add	r3, pc, #104	@ (adr r3, 800aab8 <scalbn+0xd8>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fdd0 	bl	80005f8 <__aeabi_dmul>
 800aa58:	e7e6      	b.n	800aa28 <scalbn+0x48>
 800aa5a:	1872      	adds	r2, r6, r1
 800aa5c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800aa60:	428a      	cmp	r2, r1
 800aa62:	dcec      	bgt.n	800aa3e <scalbn+0x5e>
 800aa64:	2a00      	cmp	r2, #0
 800aa66:	dd08      	ble.n	800aa7a <scalbn+0x9a>
 800aa68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aa6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aa70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa74:	ec45 4b10 	vmov	d0, r4, r5
 800aa78:	bd70      	pop	{r4, r5, r6, pc}
 800aa7a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800aa7e:	da08      	bge.n	800aa92 <scalbn+0xb2>
 800aa80:	2d00      	cmp	r5, #0
 800aa82:	a10b      	add	r1, pc, #44	@ (adr r1, 800aab0 <scalbn+0xd0>)
 800aa84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa88:	dac1      	bge.n	800aa0e <scalbn+0x2e>
 800aa8a:	a10f      	add	r1, pc, #60	@ (adr r1, 800aac8 <scalbn+0xe8>)
 800aa8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa90:	e7bd      	b.n	800aa0e <scalbn+0x2e>
 800aa92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aa96:	3236      	adds	r2, #54	@ 0x36
 800aa98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aa9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	4b0d      	ldr	r3, [pc, #52]	@ (800aad8 <scalbn+0xf8>)
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	e7d4      	b.n	800aa54 <scalbn+0x74>
 800aaaa:	bf00      	nop
 800aaac:	f3af 8000 	nop.w
 800aab0:	c2f8f359 	.word	0xc2f8f359
 800aab4:	01a56e1f 	.word	0x01a56e1f
 800aab8:	8800759c 	.word	0x8800759c
 800aabc:	7e37e43c 	.word	0x7e37e43c
 800aac0:	8800759c 	.word	0x8800759c
 800aac4:	fe37e43c 	.word	0xfe37e43c
 800aac8:	c2f8f359 	.word	0xc2f8f359
 800aacc:	81a56e1f 	.word	0x81a56e1f
 800aad0:	43500000 	.word	0x43500000
 800aad4:	ffff3cb0 	.word	0xffff3cb0
 800aad8:	3c900000 	.word	0x3c900000

0800aadc <with_errno>:
 800aadc:	b510      	push	{r4, lr}
 800aade:	ed2d 8b02 	vpush	{d8}
 800aae2:	eeb0 8a40 	vmov.f32	s16, s0
 800aae6:	eef0 8a60 	vmov.f32	s17, s1
 800aaea:	4604      	mov	r4, r0
 800aaec:	f7fd fa8e 	bl	800800c <__errno>
 800aaf0:	eeb0 0a48 	vmov.f32	s0, s16
 800aaf4:	eef0 0a68 	vmov.f32	s1, s17
 800aaf8:	ecbd 8b02 	vpop	{d8}
 800aafc:	6004      	str	r4, [r0, #0]
 800aafe:	bd10      	pop	{r4, pc}

0800ab00 <xflow>:
 800ab00:	4603      	mov	r3, r0
 800ab02:	b507      	push	{r0, r1, r2, lr}
 800ab04:	ec51 0b10 	vmov	r0, r1, d0
 800ab08:	b183      	cbz	r3, 800ab2c <xflow+0x2c>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab10:	e9cd 2300 	strd	r2, r3, [sp]
 800ab14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab18:	f7f5 fd6e 	bl	80005f8 <__aeabi_dmul>
 800ab1c:	ec41 0b10 	vmov	d0, r0, r1
 800ab20:	2022      	movs	r0, #34	@ 0x22
 800ab22:	b003      	add	sp, #12
 800ab24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab28:	f7ff bfd8 	b.w	800aadc <with_errno>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	e7ee      	b.n	800ab10 <xflow+0x10>
 800ab32:	0000      	movs	r0, r0
 800ab34:	0000      	movs	r0, r0
	...

0800ab38 <__math_uflow>:
 800ab38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab40 <__math_uflow+0x8>
 800ab3c:	f7ff bfe0 	b.w	800ab00 <xflow>
 800ab40:	00000000 	.word	0x00000000
 800ab44:	10000000 	.word	0x10000000

0800ab48 <__math_oflow>:
 800ab48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab50 <__math_oflow+0x8>
 800ab4c:	f7ff bfd8 	b.w	800ab00 <xflow>
 800ab50:	00000000 	.word	0x00000000
 800ab54:	70000000 	.word	0x70000000

0800ab58 <__ieee754_sqrt>:
 800ab58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	4a68      	ldr	r2, [pc, #416]	@ (800ad00 <__ieee754_sqrt+0x1a8>)
 800ab5e:	ec55 4b10 	vmov	r4, r5, d0
 800ab62:	43aa      	bics	r2, r5
 800ab64:	462b      	mov	r3, r5
 800ab66:	4621      	mov	r1, r4
 800ab68:	d110      	bne.n	800ab8c <__ieee754_sqrt+0x34>
 800ab6a:	4622      	mov	r2, r4
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f7f5 fd42 	bl	80005f8 <__aeabi_dmul>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4620      	mov	r0, r4
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	f7f5 fb86 	bl	800028c <__adddf3>
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	ec45 4b10 	vmov	d0, r4, r5
 800ab88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	2d00      	cmp	r5, #0
 800ab8e:	dc0e      	bgt.n	800abae <__ieee754_sqrt+0x56>
 800ab90:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ab94:	4322      	orrs	r2, r4
 800ab96:	d0f5      	beq.n	800ab84 <__ieee754_sqrt+0x2c>
 800ab98:	b19d      	cbz	r5, 800abc2 <__ieee754_sqrt+0x6a>
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7f5 fb72 	bl	8000288 <__aeabi_dsub>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	f7f5 fe50 	bl	800084c <__aeabi_ddiv>
 800abac:	e7e8      	b.n	800ab80 <__ieee754_sqrt+0x28>
 800abae:	152a      	asrs	r2, r5, #20
 800abb0:	d115      	bne.n	800abde <__ieee754_sqrt+0x86>
 800abb2:	2000      	movs	r0, #0
 800abb4:	e009      	b.n	800abca <__ieee754_sqrt+0x72>
 800abb6:	0acb      	lsrs	r3, r1, #11
 800abb8:	3a15      	subs	r2, #21
 800abba:	0549      	lsls	r1, r1, #21
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d0fa      	beq.n	800abb6 <__ieee754_sqrt+0x5e>
 800abc0:	e7f7      	b.n	800abb2 <__ieee754_sqrt+0x5a>
 800abc2:	462a      	mov	r2, r5
 800abc4:	e7fa      	b.n	800abbc <__ieee754_sqrt+0x64>
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	3001      	adds	r0, #1
 800abca:	02dc      	lsls	r4, r3, #11
 800abcc:	d5fb      	bpl.n	800abc6 <__ieee754_sqrt+0x6e>
 800abce:	1e44      	subs	r4, r0, #1
 800abd0:	1b12      	subs	r2, r2, r4
 800abd2:	f1c0 0420 	rsb	r4, r0, #32
 800abd6:	fa21 f404 	lsr.w	r4, r1, r4
 800abda:	4323      	orrs	r3, r4
 800abdc:	4081      	lsls	r1, r0
 800abde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abe2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800abe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abea:	07d2      	lsls	r2, r2, #31
 800abec:	bf5c      	itt	pl
 800abee:	005b      	lslpl	r3, r3, #1
 800abf0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800abf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abf8:	bf58      	it	pl
 800abfa:	0049      	lslpl	r1, r1, #1
 800abfc:	2600      	movs	r6, #0
 800abfe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ac02:	106d      	asrs	r5, r5, #1
 800ac04:	0049      	lsls	r1, r1, #1
 800ac06:	2016      	movs	r0, #22
 800ac08:	4632      	mov	r2, r6
 800ac0a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ac0e:	1917      	adds	r7, r2, r4
 800ac10:	429f      	cmp	r7, r3
 800ac12:	bfde      	ittt	le
 800ac14:	193a      	addle	r2, r7, r4
 800ac16:	1bdb      	suble	r3, r3, r7
 800ac18:	1936      	addle	r6, r6, r4
 800ac1a:	0fcf      	lsrs	r7, r1, #31
 800ac1c:	3801      	subs	r0, #1
 800ac1e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ac22:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ac26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ac2a:	d1f0      	bne.n	800ac0e <__ieee754_sqrt+0xb6>
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	2720      	movs	r7, #32
 800ac30:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ac34:	429a      	cmp	r2, r3
 800ac36:	eb00 0e0c 	add.w	lr, r0, ip
 800ac3a:	db02      	blt.n	800ac42 <__ieee754_sqrt+0xea>
 800ac3c:	d113      	bne.n	800ac66 <__ieee754_sqrt+0x10e>
 800ac3e:	458e      	cmp	lr, r1
 800ac40:	d811      	bhi.n	800ac66 <__ieee754_sqrt+0x10e>
 800ac42:	f1be 0f00 	cmp.w	lr, #0
 800ac46:	eb0e 000c 	add.w	r0, lr, ip
 800ac4a:	da42      	bge.n	800acd2 <__ieee754_sqrt+0x17a>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	db40      	blt.n	800acd2 <__ieee754_sqrt+0x17a>
 800ac50:	f102 0801 	add.w	r8, r2, #1
 800ac54:	1a9b      	subs	r3, r3, r2
 800ac56:	458e      	cmp	lr, r1
 800ac58:	bf88      	it	hi
 800ac5a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ac5e:	eba1 010e 	sub.w	r1, r1, lr
 800ac62:	4464      	add	r4, ip
 800ac64:	4642      	mov	r2, r8
 800ac66:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ac6a:	3f01      	subs	r7, #1
 800ac6c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ac70:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ac74:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ac78:	d1dc      	bne.n	800ac34 <__ieee754_sqrt+0xdc>
 800ac7a:	4319      	orrs	r1, r3
 800ac7c:	d01b      	beq.n	800acb6 <__ieee754_sqrt+0x15e>
 800ac7e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ad04 <__ieee754_sqrt+0x1ac>
 800ac82:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ad08 <__ieee754_sqrt+0x1b0>
 800ac86:	e9da 0100 	ldrd	r0, r1, [sl]
 800ac8a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ac8e:	f7f5 fafb 	bl	8000288 <__aeabi_dsub>
 800ac92:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4640      	mov	r0, r8
 800ac9c:	4649      	mov	r1, r9
 800ac9e:	f7f5 ff27 	bl	8000af0 <__aeabi_dcmple>
 800aca2:	b140      	cbz	r0, 800acb6 <__ieee754_sqrt+0x15e>
 800aca4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800aca8:	e9da 0100 	ldrd	r0, r1, [sl]
 800acac:	e9db 2300 	ldrd	r2, r3, [fp]
 800acb0:	d111      	bne.n	800acd6 <__ieee754_sqrt+0x17e>
 800acb2:	3601      	adds	r6, #1
 800acb4:	463c      	mov	r4, r7
 800acb6:	1072      	asrs	r2, r6, #1
 800acb8:	0863      	lsrs	r3, r4, #1
 800acba:	07f1      	lsls	r1, r6, #31
 800acbc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800acc0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800acc4:	bf48      	it	mi
 800acc6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800acca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800acce:	4618      	mov	r0, r3
 800acd0:	e756      	b.n	800ab80 <__ieee754_sqrt+0x28>
 800acd2:	4690      	mov	r8, r2
 800acd4:	e7be      	b.n	800ac54 <__ieee754_sqrt+0xfc>
 800acd6:	f7f5 fad9 	bl	800028c <__adddf3>
 800acda:	e9da 8900 	ldrd	r8, r9, [sl]
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4640      	mov	r0, r8
 800ace4:	4649      	mov	r1, r9
 800ace6:	f7f5 fef9 	bl	8000adc <__aeabi_dcmplt>
 800acea:	b120      	cbz	r0, 800acf6 <__ieee754_sqrt+0x19e>
 800acec:	1ca0      	adds	r0, r4, #2
 800acee:	bf08      	it	eq
 800acf0:	3601      	addeq	r6, #1
 800acf2:	3402      	adds	r4, #2
 800acf4:	e7df      	b.n	800acb6 <__ieee754_sqrt+0x15e>
 800acf6:	1c63      	adds	r3, r4, #1
 800acf8:	f023 0401 	bic.w	r4, r3, #1
 800acfc:	e7db      	b.n	800acb6 <__ieee754_sqrt+0x15e>
 800acfe:	bf00      	nop
 800ad00:	7ff00000 	.word	0x7ff00000
 800ad04:	200001f0 	.word	0x200001f0
 800ad08:	200001e8 	.word	0x200001e8

0800ad0c <_init>:
 800ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0e:	bf00      	nop
 800ad10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad12:	bc08      	pop	{r3}
 800ad14:	469e      	mov	lr, r3
 800ad16:	4770      	bx	lr

0800ad18 <_fini>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	bf00      	nop
 800ad1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad1e:	bc08      	pop	{r3}
 800ad20:	469e      	mov	lr, r3
 800ad22:	4770      	bx	lr
